#!/usr/local/bin/gawk -f
#!/usr/bin/awk -f
# @(#) pss.gawk 1.2.1 97/07/23
# 93/05/28 john h. dubois iii (john@armory.com)
# 93/09/30 Added help and -t options.
# 94/03/10 Use gawk so - options can be given.
# 94/07/28 Made TIME field sort right if time > 99:59
# 95/04/10 Added t option.  Changed fieldname to be arg rather than option.
# 95/05/08 Added x option.
# 95/05/19 Added s option.
# 95/08/29 gawk+protlib bug workaround
# 96/01/06 5.0 port: Use new ps options if available.  TTY column is now
#          aligned on the right.
# 96/02/13 Read rcfiles; added oO options.
# 96/05/28 bugfix for above change.
# 96/09/04 Make sort field case insensitive.
# 97/07/23 1.2.1 Make -o- give default fields.

# Should use FIELDWIDTHS for this, since that was the original idea...

#  1 2      3     4    5     6 7   8   9      10     11     12       13
#  F S      UID   PID  PPID  C PRI NI  ADDR1  ADDR2  SZ     WCHAN    STIME
#  14       15   16
#  TTY      TIME CMD
# 20 S  spcecdt   525     1  0  30 10    563   1089  68  f00fcd64  May 23   07       0:08 -ksh 

BEGIN {
    Name = "pss"
    Usage = Name " [-hnctz] [-s<min>] [-[oO]<fields>] <fieldname>"
    SortField = "TIME"
    rcFile = ".pss"
    ARGC = Opts(Name,Usage,"no:czs:tO:hx",0,
    "~/" rcFile ":$HOME/" rcFile ":/etc/default/pss",
    "NONZERO,FIELDS,CPUONLY,SIZE,MIN,TOP,SUPPRESS")
#  F S      UID   PID  PPID  C PRI NI  ADDR1  ADDR2  SZ     WCHAN    STIME  TTY      TIME CMD
    PrintFmt = "UID,PID,PPID,C,PRI,NI,SZ,STIME,TTY,TIME,CMD"
    if ("h" in Options) {
	printf \
"%s: List processes sorted by any field.\n"\
"%s\n"\
"<fieldname> is one of the headers in the output of ps -fl: F, S, UID, PID,\n"\
"PPID, C, PRI, NI, ADDR1, ADDR2, SZ, WCHAN, STIME, TTY, TIME, and CMD.  If\n"\
"given, output is sorted by that field.  The default is TIME (CPU time used\n"\
"by process).\n"\
"Options:\n"\
"Some of the following options can also be set by assigning values to\n"\
"variables in a configuration file.  Three configuration files are read, in\n"\
"order: a file named %s in the invoking user's home directory; a file\n"\
"named %s in the directory specified by the environment variable UHOME\n"\
"(if it is set); and the file /etc/default/pss.  Variables are assigned\n"\
"to with the syntax:  varname=value  or in the case of flags, by simply\n"\
"putting the indicated variable name in the file without a value.\n"\
"A variable assigned to in one of these files will override values assigned\n"\
"to the same variable in one of the files read after it.  To turn off an\n"\
"option and prevent it from being set in a file read later, assign it a\n"\
"value of 0.  e.g. if CPUONLY is set in /etc/default/pss, CPUONLY=0 in\n"\
"a %s file will override it.  Flag options can be turned off on the\n"\
"command line by following them immediately with '-', e.g. -z- to turn off\n"\
"the z option in such a way that it cannot be turned on in a config file.\n"\
"Variable names appear in parentheses in the option descriptions.\n"\
"-h: Print this help.\n"\
"-n: Only processes with a non-zero sort field are printed.  With the\n"\
"    default sort field, this produces a listing of processes that have\n"\
"    used one second or more of CPU time.  (NONZERO)\n"\
"-o<fields>: Make the output consist of the fields given in the comma-\n"\
"    seperated list.  The valid field names are the same as those that can\n"\
"    be given as a sort field.  If FIELDS is set, -o- can be used to\n"\
"    get the default fields.  The default fields are:\n"\
"    %s  (FIELDS)\n"\
"-O<fields>: Do not print the named fields.  (SUPPRESS)\n"\
"-c: List cpu-using processes only.  Equivalent to '-n C'.  (CPUONLY)\n"\
"-z: Sort by size field (equivalent to a <fieldname> of SZ).  (SIZE)\n"\
"-s<min>: List only processes whose sort field is equal to or greater than\n"\
"    <min>.  Values are compared numerically.  (MIN)\n"\
"-t: Print top processes only.  Output lines are truncated to the screen\n"\
"    width, and only as many as will fit on the screen are printed.  (TOP)\n",
Name,Usage,rcFile,rcFile,rcFile,PrintFmt
	exit(0)
    }
    Debug = "x" in Options
    if (ARGC > 2) {
	printf "%s: too many arguments.  Use -h for help.\n",Name \
	> "/dev/stderr"
	exit 1
    }
    # Make fd 0 be /dev/null to work around gawk+protlib bugs
    # Existance of /stand is a fast if imperfect test for OS >= 5.0
    # Use new PS options if available, for flexibility in the future
    Cmd = "[ ! -d /stand ] && exec ps -efl < /dev/null || "\
    "exec ps -e -of -os -ouser -opid -oppid -oc -opri -onice -oaddr "\
    "-ovsz -owchan -ostime -otty -otime -oargs </dev/null"
    Cmd | getline Header
    if (Debug)
	printf "Header line:\n%s\n",Header
    NewPS = Header ~ "VSZ"
    # tty might be 'console'
    FWidths = SetFields(Header,0,(NewPS ? "" : "TTY=7 ") "CMD=0 COMMAND=0",
    Fields,Gutter)

    if ("z" in Options)
	SortField = "SZ"
    if (SortField == "SZ")
	Numeric = 1	# should really have this for other fields too
    else
	Numeric = 0
    if (NewPS) {
	if (SortField == "SZ")
	    SortField = "VSZ"
	else if (SortField == "UID")
	    SortField = "USER"
	else if (SortField == "CMD")
	    SortField = "COMMAND"
    }
    if ("t" in Options)
	HeadTailInit()
    if (ARGC == 2)
	SortField = toupper(ARGV[1])
    for (Elem in Fields)
	AllFields[Fields[Elem]]
    if (!(SortField in AllFields)) {
	printf "%s: %s: No such field.\n",Name,SortField > "/dev/stderr"
	exit 1
    }
    Nonzero = "n" in Options
    if ("c" in Options) {
	Nonzero = 1
	SortField = "C"
    }
    if (Debug)
	printf "Sort field is <%s>\n",SortField > "/dev/stderr"

    if ("o" in Options && Options["o"] != "-")
	PrintFmt = toupper(Options["o"])
    NumFmt = split(PrintFmt,Format,",")
    if (Debug)
	printf "Initially %d fields: %s\n",NumFmt,PrintFmt
    if ("O" in Options) {
	split(toupper(Options["O"]),Suppress,",")
	for (i in Suppress) {
	    opt = Suppress[i]
	    if (!(opt in AllFields)) {
		printf "Bad field given with -O: %s.  Exiting.\n",
		opt > "/dev/stderr"
		exit 1
	    }
	    for (j in Format)
		if (opt == Format[j]) {
		    if (Debug)
			printf "Suppressing field %s\n",opt > "/dev/stderr"
		    delete Format[j]
		    NumFmt--
		    break
		}
	}
    }
    PackArr(Format,NumFmt,1)
    if (Debug) {
	print "Fields are now:" > "/dev/stderr"
	for (i = 1; i in Format; i++)
	    printf "%d: %s\n",i,Format[i]
    }
    LineNum = 0
    split(FWidths,Widths)
    GutterSort = SortField == "TIME"
    if (Debug)
	print "Command: " Cmd
    FS = " +"
    while ((ret = (Cmd | getline)) == 1) {
	if (Debug)
	    printf "."
	FieldsByName(Fields,FieldVals,$0,Widths)
	if (NewPS)
	    MapNames(FieldVals)
	Lines[++LineNum] = MakeLine(Format,FieldVals)
	SortVal = sprintf("%6s",FieldVals[SortField])
	# Special case for TIME field.  If > 99:59 minutes it will exceed its
	# field with and overflow into the gutter that follows it.  So, to
	# make it sort right, if it *hasn't* done that move the gutter space
	# to the start of the field.
	# its field width
	if (GutterSort && SortVal ~ / $/) {
	    sub(/ $/,"",SortVal)
	    SortVal = " " SortVal
	}
	if (Numeric)
	    SortVal += 0
	SortInd[LineNum] = SortVal
    }
    if (Debug)
	print ""
    if (estat = close(Cmd))
	printf "%s: %s exited with status %d\n",Name,Cmd,estat
    if (ret) {
	print "Error reading output of '%s': %s\n",Cmd,ERRNO
	exit 1
    }

    if (Debug)
	printf "%d line(s) to process.\n",LineNum

    # Lines[n] contains the formatted output lines.
    # SortInd[n] contains the sort field.

    # Get rid of unwanted output here to reduce sorting work.
    if ("s" in Options) {
	Min = Options["s"]
	gsub("[^0-9a-f]","",Min)	# discard non-num chars
	Min += 0	# force to num val
	for (i = 1; i <= LineNum; i++) {
	    Ind = SortInd[i]
	    gsub("[^0-9a-f]","",Ind)	# discard non-num chars
	    if (Ind+0 < Min) {
		if (Debug)
		    printf "%s < %s; discarding %s\n",Ind,Min,Lines[i]
		delete SortInd[i]
	    }
	}
    }
    # Can't use qsortNumIndByValue because SortInd may be missing some indices
    LineNum = qsortArbIndByValue(SortInd,k)
    if (Debug)
	printf "%d line(s) to print.\n",LineNum

    # Print header
    FieldsByName(Fields,FieldVals,Header,Widths)
    if (NewPS)
	MapNames(FieldVals)
    HeadPrint(MakeLine(Format,FieldVals))

    for (i = LineNum; i >= 1; i--) {
	# Stop when a zero value is reached (one that has no non-0 digits in it)
	if (Nonzero && SortInd[k[i]] !~ "[1-9a-f]")
	    exit
	if (!HeadPrint(Lines[k[i]])) {
	    if (Debug)
		print "Finished printing top lines." > "/dev/stderr"
	    exit 0
	}
#	else if (Debug)
#	    printf "Printed line %d\n",i
    }
}

function MapNames(FieldVals) {
    if ("COMMAND" in FieldVals)
	FieldVals["CMD"] = FieldVals["COMMAND"]
    if ("USER" in FieldVals) {
	FieldVals["UID"] = FieldVals["USER"]
    }
    if ("VSZ" in FieldVals)
	FieldVals["SZ"] = FieldVals["VSZ"]
}

# @(#) headtail.awk 95/06/20
# 95/04/28 Added tail routines.

# Turn on screen-bounded printing.
# Sets global vars LINES and COLUMNS.
# Set either of them to 0 after calling this function if you do not want
# limiting of lines or line length respectively.
function HeadTailInit(  Cmd) {
    # tput will use values in environment, but we want to avoid running
    # it if possible.
    if ("COLUMNS" in ENVIRON)
	COLUMNS = ENVIRON["COLUMNS"]
    else {
	Cmd = "exec tput cols"
	Cmd | getline COLUMNS
	close(Cmd)
	if (COLUMNS == "")
	    COLUMNS = 80
    }
    if ("LINES" in ENVIRON)
	LINES = ENVIRON["LINES"]
    else {
	Cmd = "exec tput lines"
	Cmd | getline LINES
	close(Cmd)
	if (LINES == "")
	    LINES = 24
    }
}

# Do screen-bound printing.  
# If LINES  is >0, the last LINES-1 lines are kept in a circular buffer.  
# When TailFlush() is called, they are printed.
# If LINES = 0, all lines are printed immediately.
# If COLUMNS is >0, truncates Line to COLUMNS-1 characters before printing it.
# Global vars: uses LINES & COLUMNS; sets/uses TailPtr;
# saves lines in TailLines[] from 1..LINES-1
# Embedded newlines split the line into multiple lines; trailing newlines are
# stripped.  Tabs are expanded to spaces.
function TailPrint(Line) {
    if (!LINES)
	print Line
    else {
	if (++TailPtr > (LINES-1))
	    TailPtr = 1
	TailLines[TailPtr] = Line
    }
}

function TailFlush(  NumPrinted,Lines,Line,i,Buffer,PrintLines) {
    if (!LINES)
	return
    NumPrinted = 0
    PrintLines = LINES-1
    # Since lines may contain multiple lines, we must create a buffer to be
    # printed by reading line buffer backwards.
    # Stop when we've copied enough lines, or if we wrap around to the end and
    # find that the entire line buffer wasn't used.
    while (NumPrinted < PrintLines && TailPtr in TailLines) {
	# Split line into individual lines, then process them last to first
	Num = split(TailLines[TailPtr],Lines,"\n")
	for (i = Num; i >= 1; i--) {
	    Line = Lines[i]
	    if (i == Num && Line == "")	# discard trailing newline
		continue
	    # Put this line at the front of the print buffer
	    if (COLUMNS)
		Buffer = substr(TabEx(Line),1,COLUMNS - 1) "\n" Buffer
	    else
		Buffer = Line "\n" Buffer
	    if (++NumPrinted == PrintLines)
		break
	}
	if (!--TailPtr)	# Wrap pointer if neccessary
	    TailPtr = PrintLines
    }
    printf "%s",Buffer
}

# Do screen-bound printing.  
# If LINES >0, returns 0 when LINES-1 lines have been printed by HeadPrint().
# Otherwise returns 1.
# If COLUMNS is >0, truncates Line to COLUMNS-1 characters before printing it.
# Global vars: uses LINES & COLUMNS; sets/uses LinesPrinted.
# Line should not include newlines.
function HeadPrint(Line) {
    # Check first, in case some calls of this function to not check return
    # value, and in case LINES is 1.
    if (LINES && LinesPrinted >= (LINES-1))
	return 0
    if (COLUMNS)
	print substr(Line,1,COLUMNS - 1)
    else
	print Line
    if (LINES && ++LinesPrinted >= (LINES-1))
	return 0
    return 1
}

# Expand tabs in Line
function TabEx(Line,  Segs,i,Num,S) {
    Num = split(Line,Segs,"\t")
    Line = ""
    for (i = 1; i < Num; i++) {
	S = Segs[i]
	Line = Line S substr("        ",length(S) % 8 + 1)
    }
    return Line Segs[Num]
}

function MakeLine(Format,Fields,  Line,Name) {
    for (i = 1; i in Format; i++) {
	Name = Format[i]
	if (Name in Fields)
	    Line = Line Fields[Name]
	else
	    printf "Error: MakeLine(): no such field '%s' in Fields[].\n",
	    Name > "/dev/stderr"
    }
    return Line
}

# FieldsByName: Put fields in FieldVals[] indexed by their names as given in
# FieldNames[].
# Line is the input line to split up.
# Widths gives the width of each field.
# FieldNames contains an index for each field name that is to be printed.
function FieldsByName(FieldNames,FieldVals,Line,Widths,  i,Pos) {
    Pos = 1
    for (i = 1; i in Widths; i++) {
	if (i in FieldNames)
	    FieldVals[FieldNames[i]] = substr(Line,Pos,Widths[i])
	Pos += Widths[i]
    }
}

# SetFields: generate a FIELDWIDTHS string and a field name map from a header.
# SetFields parses a header and uses it to generate a list of field widths.
# Input vars:
# Header is the header to parse.  It should contain field names separted by
# whitespace.
# LeftAdj sets the default field name adjustment.
# If 1, field names are processed as left adjusted by default.
# This means that the columns corresponding to the spaces after a field
# name are given to the field named on their left.
# If LeftAdj is 0, field names are processed as right adjusted by default;
# columns corresponding to the spaces after a field name are given to the
# field named on their right.
# AltAdjFields is a list of fields which have adjustment opposite the default.
# It has the form "fieldname1=width fieldname2=width ..."
# Each width specifies the width of the named field.
# The width must be given so that the columns between a left-adjusted and a
# right-adjusted field can be assigned.  A width of 0 means the field is the
# rightmost field, it is left-adjusted, and it has no fixed length.
# Output vars:
# Fields[] gives the names of the fields, indexed by the field numbers as
# they will be set by gawk when FIELDWIDTHS is set.
# Gutter[fieldname] is set to 1 if a gutter was added to the field.
# Return value:
# The return value is a FIELDWIDTHS string.
# Example: 
# For parsing ps output in various formats:
# FIELDWIDTHS = \
# SetFields(Header,0,"TTY=4 CMD=0 COMMAND=0",Fields)
function SetFields(Header,LeftAdj,AltAdjFields,Fields,Gutter,
Offset,NFields,HFields,Pos,Alt,i,Name,Adj,Lengths,PreSpace,Columns,
OtherField,FieldNum,Widths) {
    Offset = 1-LeftAdj*2
    NFields = split(Header,HFields)
    Pos = 0
    Assign(Alt,AltAdjFields," +","=")
    # This loop sets the following:
    # Adj[i]: whether field i is left-adjusted
    # Lengths[i]: Length of field name.
    # PreSpace[i]: Number of spaces in header before field name.
    for (i = 1; i <= NFields; i++) {
	Name = HFields[i]
	if (Name in Alt)
	    Adj[i] = !LeftAdj
	else
	    Adj[i] = LeftAdj
	Lengths[i] = length(Name)
	PreSpace[i] = index(Header,Name) - 1
	# Strip off the field name just processed
	Header = substr(Header,Lengths[i] + PreSpace[i] + 1)
    }
    for (i = 1; i <= NFields; i++) {
	# The columns that go to this field by default
	Columns = PreSpace[i+Adj[i]] 
	# The field on the other side of the columns
	OtherField = i + Adj[i]*2-1
	if (Adj[i] == Adj[OtherField])
	    # If this field and the other both have the same adjustment,
	    # then this field gets the columns.
	    Lengths[i] += Columns
	else {
	    Name = HFields[i]
	    # If this field and the other have different adjustment, then one
	    # or the other other (but not both) of them is in Alt[].
	    # If it's this field, set its width to the value given in
	    # Alt and give whatever is left to the other.
	    if (Name in Alt) {
		if (Alt[Name] == 0)
		    Alt[Name] = 1000000
		Lengths[OtherField] += Lengths[i] + Columns - Alt[Name]
		Lengths[i] = Alt[Name]
	    }
	}
    }
    FieldNum = 0
    for (i = 1; i <= NFields; i++) {
	Name = HFields[i]
	Fields[++FieldNum] = Name
	# If this field is right adjusted and next is left adjusted,
	# there is an unused gap between them.  Give one char of it
	# to the left field so there will be a gutter in the output.
	if (!Adj[i] && Adj[i+1]) {
	    Widths = Widths Lengths[i]+1 " "
	    # For anything that cares that a gutter is part of this field
	    Gutter[Name] = 1
	    if (PreSpace[i+1] > 1) {
		Widths = Widths PreSpace[i+1]-1 " "
		++FieldNum
	    }
	}
	else
	    Widths = Widths Lengths[i] " "
    }
    return Widths
}

### Begin qsort routines

# Arr[] is an array of values with arbitrary indices.
# k[] is returned with numeric indices 1..n.
# The values in k[] are the indices of Arr[],
# ordered so that if Arr[] is stepped through
# in the order Arr[k[1]] .. Arr[k[n]], it will be stepped
# through in order of the values of its elements.
# The return value is the number of elements in the arrays (n).
function qsortArbIndByValue(Arr,k,  ArrInd,ElNum) {
    ElNum = 0
    for (ArrInd in Arr)
	k[++ElNum] = ArrInd
    qsortSegment(Arr,k,1,ElNum)
    return ElNum
}

# Sort a segment of an array.
# Arr[] contains data with arbitrary indices.
# k[] has indices 1..nelem, with the indices of arr[] as values.
# This function sorts the elements of arr that are pointed to by
# k[start..end], swapping the values of elements of k[] so that
# when this function returns arr[k[start..end]] will be in order.
function qsortSegment(Arr,k,start,end,  left,right,sepval,tmp,tmpe,tmps) {
    # handle two-element case explicitly for a tiny speedup
    if ((end - start) == 1) {
	if (Arr[tmps = k[start]] > Arr[tmpe = k[end]]) {
	    k[start] = tmpe
	    k[end] = tmps
	}
	return
    }
    # Make sure comparisons act on these as numbers
    left = start+0
    right = end+0
    sepval = Arr[k[int((left + right) / 2)]]
    # Make every element <= sepval be to the left of every element > sepval
    while (left < right) {
	while (Arr[k[left]] < sepval)
	    left++
	while (Arr[k[right]] > sepval)
	    right--
	if (left < right) {
	    tmp = k[left]
	    k[left++] = k[right]
	    k[right--] = tmp
	}
    }
    if (left == right)
	if (Arr[k[left]] < sepval)
	    left++
	else
	    right--
    if (start < right)
	qsortSegment(Arr,k,start,right)
    if (left < end)
	qsortSegment(Arr,k,left,end)
}

# Arr[] is an array of values with arbitrary indices.
# k[] is returned with numeric indices 1..n.
# The values in k are the indices of Arr[],
# ordered so that if Arr[] is stepped through
# in the order Arr[k[1]] .. Arr[k[n]], it will be stepped
# through in order of the values of its indices.
# The return value is the number of elements in the arrays (n).
# If the indexes are numeric, Numeric should be true, so that they can be
# compared as such rather than as strings.  Numeric indexes do not have to be
# contiguous.
function qsortByArbIndex(Arr,k,Numeric,  ArrInd,ElNum) {
    ElNum = 0
    if (Numeric)
	# Indexes do not preserve numeric type, so must be forced
	for (ArrInd in Arr)
	    k[++ElNum] = ArrInd+0
    else
	for (ArrInd in Arr)
	    k[++ElNum] = ArrInd
    qsortNumIndByValue(k,1,ElNum)
    return ElNum
}

# Arr is an array of elements with contiguous numeric indexes to be sorted
# by value.
# start and end are the starting and ending indexes of the range to be sorted.
function qsortNumIndByValue(Arr,start,end,  left,right,sepval,tmp,tmpe,tmps) {
    # handle two-element case explicitly for a tiny speedup
    if ((start - end) == 1) {
	if ((tmps = Arr[start]) > (tmpe = Arr[end])) {
	    Arr[start] = tmpe
	    Arr[end] = tmps
	}
	return
    }
    left = start+0
    right = end+0
    sepval = Arr[int((left + right) / 2)]
    while (left < right) {
	while (Arr[left] < sepval)
	    left++
	while (Arr[right] > sepval)
	    right--
	if (left <= right) {
	    tmp = Arr[left]
	    Arr[left++] = Arr[right]
	    Arr[right--] = tmp
	}
    }
    if (start < right)
	qsortNumIndByValue(Arr,start,right)
    if (left < end)
	qsortNumIndByValue(Arr,left,end)
}

### End qsort routines

### Begin set library

function Intersection(A,B,Inter,  Elem,Count) {
    for (Elem in A)
	if (Elem in B) {
	    Inter[Elem]
	    Count++
	}
    return Count
}

function Union(A,B,Both,  Elem) {
    for (Elem in A)
	Both[Elem]
    for (Elem in B)
	Both[Elem]
}

# Deletes any elements that are in both Minuend and Subtrahend from Minuend.
function SubtractSet(Minuend,Subtrahend,  Elem) {
    for (Elem in Subtrahend)
	delete Minuend[Elem]
}

function CopySet(From,To,  Elem) {
    for (Elem in From)
	To[Elem]
}

# Returns 1 if Set is empty, 0 if not.
function IsEmpty(Set,  i) {
    for (i in Set)
	return 0
    return 1
}

# MakeSet: make a set from a list.
# An index with the name of each element of the list
# is created in the given array.
# Input variables: 
# Elements is a string containing the list of elements.
# Sep is the character that separates the elements of the list.
# Output variables:
# Set is the array.
# Return value: the number of elements added to the set.
function MakeSet(Set,Elements,Sep,  i,Num,Names) {
    Num = split(Elements,Names,Sep)
    for (i = 1; i <= Num; i++)
	Set[Names[i]]
    return Num
}
# Returns the number of elements in set Set
function NumElem(Set,  elem,Num) {
    for (elem in Set)
	Num++
    return Num
}

# Remove all elements from Set
function DeleteAll(Set,  i) {
    for (i in Set)
	delete Set[i]
}

### End set library
### Start of ProcArgs library
# @(#) ProcArgs 1.11 96/12/08
# 92/02/29 john h. dubois iii (john@armory.com)
# 93/07/18 Added "#" arg type
# 93/09/26 Do not count -h against MinArgs
# 94/01/01 Stop scanning at first non-option arg.  Added ">" option type.
#          Removed meaning of "+" or "-" by itself.
# 94/03/08 Added & option and *()< option types.
# 94/04/02 Added NoRCopt to Opts()
# 94/06/11 Mark numeric variables as such.
# 94/07/08 Opts(): Do not require any args if h option is given.
# 95/01/22 Record options given more than once.  Record option num in argv.
# 95/06/08 Added ExclusiveOptions().
# 96/01/20 Let rcfiles be a colon-separated list of filenames.
#          Expand $VARNAME at the start of its filenames.
#          Let varname=0 and -option- turn off an option.
# 96/05/05 Changed meaning of 7th arg to Opts; now can specify exactly how many
#          of the vars should be searched for in the environment.
#          Check for duplicate rcfiles.
# 96/05/13 Return more specific error values.  Note: ProcArgs() and InitOpts()
#          now return various negatives values on error, not just -1, and
#          Opts() may set Err to various positive values, not just 1.
#          Added AllowUnrecOpt.
# 96/05/23 Check type given for & option
# 96/06/15 Re-port to awk
# 96/10/01 Moved file-reading code into ReadConfFile(), so that it can be
#          used by other functions.
# 96/10/15 Added OptChars
# 96/11/01 Added exOpts arg to Opts()
# 96/11/16 Added ; type
# 96/12/08 Added Opt2Set() & Opt2Sets()
# 96/12/27 Added CmdLineOpt()

# optlist is a string which contains all of the possible command line options.
# A character followed by certain characters indicates that the option takes
# an argument, with type as follows:
# :	String argument
# ;	Non-empty string argument
# *	Floating point argument
# (	Non-negative floating point argument
# )	Positive floating point argument
# #	Integer argument
# <	Non-negative integer argument
# >	Positive integer argument
# The only difference the type of argument makes is in the runtime argument
# error checking that is done.

# The & option is a special case used to get numeric options without the
# user having to give an option character.  It is shorthand for [-+.0-9].
# If & is included in optlist and an option string that begins with one of
# these characters is seen, the value given to "&" will include the first
# char of the option.  & must be followed by a type character other than ":"
# or ";".
# Note that if e.g. &> is given, an option of -.5 will produce an error.

# Strings in argv[] which begin with "-" or "+" are taken to be
# strings of options, except that a string which consists solely of "-"
# or "+" is taken to be a non-option string; like other non-option strings,
# it stops the scanning of argv and is left in argv[].
# An argument of "--" or "++" also stops the scanning of argv[] but is removed.
# If an option takes an argument, the argument may either immediately
# follow it or be given separately.
# "-" and "+" options are treated the same.  "+" is allowed because most awks
# take any -options to be arguments to themselves.  gawk 2.15 was enhanced to
# stop scanning when it encounters an unrecognized option, though until 2.15.5
# this feature had a flaw that caused problems in some cases.  See the OptChars
# parameter to explicitly set the option-specifier characters.

# If an option that does not take an argument is given,
# an index with its name is created in Options and its value is set to the
# number of times it occurs in argv[].

# If an option that does take an argument is given, an index with its name is
# created in Options and its value is set to the value of the argument given
# for it, and Options[option-name,"count"] is (initially) set to the 1.
# If an option that takes an argument is given more than once,
# Options[option-name,"count"] is incremented, and the value is assigned to
# the index (option-name,instance) where instance is 2 for the second occurance
# of the option, etc.
# In other words, the first time an option with a value is encountered, the
# value is assigned to an index consisting only of its name; for any further
# occurances of the option, the value index has an extra (count) dimension.

# The sequence number for each option found in argv[] is stored in
# Options[option-name,"num",instance], where instance is 1 for the first
# occurance of the option, etc.  The sequence number starts at 1 and is
# incremented for each option, both those that have a value and those that
# do not.  Options set from a config file have a value of 0 assigned to this.

# Options and their arguments are deleted from argv.
# Note that this means that there may be gaps left in the indices of argv[].
# If compress is nonzero, argv[] is packed by moving its elements so that
# they have contiguous integer indices starting with 0.
# Option processing will stop with the first unrecognized option, just as
# though -- was given except that unlike -- the unrecognized option will not be
# removed from ARGV[].  Normally, an error value is returned in this case.
# If AllowUnrecOpt is true, it is not an error for an unrecognized option to
# be found, so the number of remaining arguments is returned instead.
# If OptChars is not a null string, it is the set of characters that indicate
# that an argument is an option string if the string begins with one of the
# characters.  A string consisting solely of two of the same option-indicator
# characters stops the scanning of argv[].  The default is "-+".
# argv[0] is not examined.
# The number of arguments left in argc is returned.
# If an error occurs, the global string OptErr is set to an error message
# and a negative value is returned.
# Current error values:
# -1: option that required an argument did not get it.
# -2: argument of incorrect type supplied for an option.
# -3: unrecognized (invalid) option.
function ProcArgs(argc,argv,OptList,Options,compress,AllowUnrecOpt,OptChars,
ArgNum,ArgsLeft,Arg,ArgLen,ArgInd,Option,Pos,NumOpt,Value,HadValue,specGiven,
NeedNextOpt,GotValue,OptionNum,Escape,dest,src,count,c,OptTerm,OptCharSet)
{
# ArgNum is the index of the argument being processed.
# ArgsLeft is the number of arguments left in argv.
# Arg is the argument being processed.
# ArgLen is the length of the argument being processed.
# ArgInd is the position of the character in Arg being processed.
# Option is the character in Arg being processed.
# Pos is the position in OptList of the option being processed.
# NumOpt is true if a numeric option may be given.
    ArgsLeft = argc
    NumOpt = index(OptList,"&")
    OptionNum = 0
    if (OptChars == "")
	OptChars = "-+"
    while (OptChars != "") {
	c = substr(OptChars,1,1)
	OptChars = substr(OptChars,2)
	OptCharSet[c]
	OptTerm[c c]
    }
    for (ArgNum = 1; ArgNum < argc; ArgNum++) {
	Arg = argv[ArgNum]
	if (length(Arg) < 2 || !((specGiven = substr(Arg,1,1)) in OptCharSet))
	    break	# Not an option; quit
	if (Arg in OptTerm) {
	    delete argv[ArgNum]
	    ArgsLeft--
	    break
	}
	ArgLen = length(Arg)
	for (ArgInd = 2; ArgInd <= ArgLen; ArgInd++) {
	    Option = substr(Arg,ArgInd,1)
	    if (NumOpt && Option ~ /[-+.0-9]/) {
		# If this option is a numeric option, make its flag be & and
		# its option string flag position be the position of & in
		# the option string.
		Option = "&"
		Pos = NumOpt
		# Prefix Arg with a char so that ArgInd will point to the
		# first char of the numeric option.
		Arg = "&" Arg
		ArgLen++
	    }
	    # Find position of flag in option string, to get its type (if any).
	    # Disallow & as literal flag.
	    else if (!(Pos = index(OptList,Option)) || Option == "&") {
		if (AllowUnrecOpt) {
		    Escape = 1
		    break
		}
		else {
		    OptErr = "Invalid option: " specGiven Option
		    return -3
		}
	    }

	    # Find what the value of the option will be if it takes one.
	    # NeedNextOpt is true if the option specifier is the last char of
	    # this arg, which means that if the option requires a value it is
	    # the next arg.
	    if (NeedNextOpt = (ArgInd >= ArgLen)) { # Value is the next arg
		if (GotValue = ArgNum + 1 < argc)
		    Value = argv[ArgNum+1]
	    }
	    else {	# Value is included with option
		Value = substr(Arg,ArgInd + 1)
		GotValue = 1
	    }

	    if (HadValue = AssignVal(Option,Value,Options,
	    substr(OptList,Pos + 1,1),GotValue,"",++OptionNum,!NeedNextOpt,
	    specGiven)) {
		if (HadValue < 0)	# error occured
		    return HadValue
		if (HadValue == 2)
		    ArgInd++	# Account for the single-char value we used.
		else {
		    if (NeedNextOpt) {	# option took next arg as value
			delete argv[++ArgNum]
			ArgsLeft--
		    }
		    break	# This option has been used up
		}
	    }
	}
	if (Escape)
	    break
	# Do not delete arg until after processing of it, so that if it is not
	# recognized it can be left in ARGV[].
	delete argv[ArgNum]
	ArgsLeft--
    }
    if (compress != 0) {
	dest = 1
	src = argc - ArgsLeft + 1
	for (count = ArgsLeft - 1; count; count--) {
	    ARGV[dest] = ARGV[src]
	    dest++
	    src++
	}
    }
    return ArgsLeft
}

# Assignment to values in Options[] occurs only in this function.
# Option: Option specifier character.
# Value: Value to be assigned to option, if it takes a value.
# Options[]: Options array to return values in.
# ArgType: Argument type specifier character.
# GotValue: Whether any value is available to be assigned to this option.
# Name: Name of option being processed.
# OptionNum: Number of this option (starting with 1) if set in argv[],
#     or 0 if it was given in a config file or in the environment.
# SingleOpt: true if the value (if any) that is available for this option was
#     given as part of the same command line arg as the option.  Used only for
#     options from the command line.
# specGiven is the option specifier character use, if any (e.g. - or +),
# for use in error messages.
# Global variables: OptErr
# Return value: negative value on error, 0 if option did not require an
# argument, 1 if it did & used the whole arg, 2 if it required just one char of
# the arg.
# Current error values:
# -1: Option that required an argument did not get it.
# -2: Value of incorrect type supplied for option.
# -3: Bad type given for option &
function AssignVal(Option,Value,Options,ArgType,GotValue,Name,OptionNum,
SingleOpt,specGiven,  UsedValue,Err,NumTypes) {
    # If option takes a value...    [
    NumTypes = "*()#<>]"
    if (Option == "&" && ArgType !~ "[" NumTypes) {	# ]
	OptErr = "Bad type given for & option"
	return -3
    }

    if (UsedValue = (ArgType ~ "[:;" NumTypes)) {	# ]
	if (!GotValue) {
	    if (Name != "")
		OptErr = "Variable requires a value -- " Name
	    else
		OptErr = "option requires an argument -- " Option
	    return -1
	}
	if ((Err = CheckType(ArgType,Value,Option,Name,specGiven)) != "") {
	    OptErr = Err
	    return -2
	}
	# Mark this as a numeric variable; will be propogated to Options[] val.
	if (ArgType != ":" && ArgType != ";")
	    Value += 0
	if ((Instance = ++Options[Option,"count"]) > 1)
	    Options[Option,Instance] = Value
	else
	    Options[Option] = Value
    }
    # If this is an environ or rcfile assignment & it was given a value...
    else if (!OptionNum && Value != "") {
	UsedValue = 1
	# If the value is "0" or "-" and this is the first instance of it,
	# do not set Options[Option]; this allows an assignment in an rcfile to
	# turn off an option (for the simple "Option in Options" test) in such
	# a way that it cannot be turned on in a later file.
	if (!(Option in Options) && (Value == "0" || Value == "-"))
	    Instance = 1
	else
	    Instance = ++Options[Option]
	# Save the value even though this is a flag
	Options[Option,Instance] = Value
    }
    # If this is a command line flag and has a - following it in the same arg,
    # it is being turned off.
    else if (OptionNum && SingleOpt && substr(Value,1,1) == "-") {
	UsedValue = 2
	if (Option in Options)
	    Instance = ++Options[Option]
	else
	    Instance = 1
	Options[Option,Instance]
    }
    # If this is a flag assignment without a value, increment the count for the
    # flag unless it was turned off.  The indicator for a flag being turned off
    # is that the flag index has not been set in Options[] but it has an
    # instance count.
    else if (Option in Options || !((Option,1) in Options))
	# Increment number of times this flag seen; will inc null value to 1
	Instance = ++Options[Option]
    Options[Option,"num",Instance] = OptionNum
    return UsedValue
}

# Option is the option letter
# Value is the value being assigned
# Name is the var name of the option, if any
# ArgType is one of:
# :	String argument
# ;	Non-null string argument
# *	Floating point argument
# (	Non-negative floating point argument
# )	Positive floating point argument
# #	Integer argument
# <	Non-negative integer argument
# >	Positive integer argument
# specGiven is the option specifier character use, if any (e.g. - or +),
# for use in error messages.
# Returns null on success, err string on error
function CheckType(ArgType,Value,Option,Name,specGiven,  Err,ErrStr) {
    if (ArgType == ":")
	return ""
    if (ArgType == ";") {
	if (Value == "")
	    Err = "must be a non-empty string"
    }
    # A number begins with optional + or -, and is followed by a string of
    # digits or a decimal with digits before it, after it, or both
    else if (Value !~ /^[-+]?([0-9]+|[0-9]*\.[0-9]+|[0-9]+\.)$/)
	Err = "must be a number"
    else if (ArgType ~ "[#<>]" && Value ~ /\./)
	Err = "may not include a fraction"
    else if (ArgType ~ "[()<>]" && Value < 0)
	Err = "may not be negative"
    # (
    else if (ArgType ~ "[)>]" && Value == 0)
	Err = "must be a positive number"
    if (Err != "") {
	ErrStr = "Bad value \"" Value "\".  Value assigned to "
	if (Name != "")
	    return ErrStr "variable " substr(Name,1,1) " " Err
	else {
	    if (Option == "&")
		Option = Value
	    return ErrStr "option " specGiven substr(Option,1,1) " " Err
	}
    }
    else
	return ""
}

# Note: only the above functions are needed by ProcArgs.
# The rest of these functions call ProcArgs() and also do other
# option-processing stuff.

# Opts: Process command line arguments.
# Opts processes command line arguments using ProcArgs()
# and checks for errors.  If an error occurs, a message is printed
# and the program is exited.
#
# Input variables:
# Name is the name of the program, for error messages.
# Usage is a usage message, for error messages.
# OptList the option description string, as used by ProcArgs().
# MinArgs is the minimum number of non-option arguments that this
# program should have, non including ARGV[0] and +h.
# If the program does not require any non-option arguments,
# MinArgs should be omitted or given as 0.
# rcFiles, if given, is a colon-seprated list of filenames to read for
# variable initialization.  If a filename begins with ~/, the ~ is replaced
# by the value of the environment variable HOME.  If a filename begins with
# $, the part from the character after the $ up until (but not including)
# the first character not in [a-zA-Z0-9_] will be searched for in the
# environment; if found its value will be substituted, if not the filename will
# be discarded.
# rcfiles are read in the order given.
# Values given in them will not override values given on the command line,
# and values given in later files will not override those set in earlier
# files, because AssignVal() will store each with a different instance index.
# The first instance of each variable, either on the command line or in an
# rcfile, will be stored with no instance index, and this is the value
# normally used by programs that call this function.
# VarNames is a comma-separated list of variable names to map to options,
# in the same order as the options are given in OptList.
# If EnvSearch is given and nonzero, the first EnvSearch variables will also be
# searched for in the environment.  If set to -1, all values will be searched
# for in the environment.  Values given in the environment will override
# those given in the rcfiles but not those given on the command line.
# NoRCopt, if given, is an additional letter option that if given on the
# command line prevents the rcfiles from being read.
# See ProcArgs() for a description of AllowUnRecOpt and optChars, and
# ExclusiveOptions() for a description of exOpts.
# Special options:
# If x is made an option and is given, some debugging info is output.
# h is assumed to be the help option.

# Global variables:
# The command line arguments are taken from ARGV[].
# The arguments that are option specifiers and values are removed from
# ARGV[], leaving only ARGV[0] and the non-option arguments.
# The number of elements in ARGV[] should be in ARGC.
# After processing, ARGC is set to the number of elements left in ARGV[].
# The option values are put in Options[].
# On error, Err is set to a positive integer value so it can be checked for in
# an END block.
# Return value: The number of elements left in ARGV is returned.
# Must keep OptErr global since it may be set by InitOpts().
function Opts(Name,Usage,OptList,MinArgs,rcFiles,VarNames,EnvSearch,NoRCopt,
AllowUnrecOpt,optChars,exOpts,  ArgsLeft,e) {
    if (MinArgs == "")
	MinArgs = 0
    ArgsLeft = ProcArgs(ARGC,ARGV,OptList NoRCopt,Options,1,AllowUnrecOpt,
    optChars)
    if (ArgsLeft < (MinArgs+1) && !("h" in Options)) {
	if (ArgsLeft >= 0) {
	    OptErr = "Not enough arguments"
	    Err = 4
	}
	else
	    Err = -ArgsLeft
	printf "%s: %s.\nUse -h for help.\n%s\n",
	Name,OptErr,Usage > "/dev/stderr"
	exit 1
    }
    if (rcFiles != "" && (NoRCopt == "" || !(NoRCopt in Options)) &&
    (e = InitOpts(rcFiles,Options,OptList,VarNames,EnvSearch)) < 0)
    {
	print Name ": " OptErr ".\nUse -h for help." > "/dev/stderr"
	Err = -e
	exit 1
    }
    if ((exOpts != "") && ((OptErr = ExclusiveOptions(exOpts,Options)) != ""))
    {
	printf "%s: Error: %s\n",Name,OptErr > "/dev/stderr"
	Err = 1
	exit 1
    }
    return ArgsLeft
}

# ReadConfFile(): Read a file containing var/value assignments, in the form
# <variable-name><assignment-char><value>.
# Whitespace (spaces and tabs) around a variable (leading whitespace on the
# line and whitespace between the variable name and the assignment character) 
# is stripped.  Lines that do not contain an assignment operator or which
# contain a null variable name are ignored, other than possibly being noted in
# the return value.  If more than one assignment is made to a variable, the
# first assignment is used.
# Input variables:
# File is the file to read.
# Comment is the line-comment character.  If it is found as the first non-
#     whitespace character on a line, the line is ignored.
# Assign is the assignment string.  The first instance of Assign on a line
#     separates the variable name from its value.
# If StripWhite is true, whitespace around the value (whitespace between the
#     assignment char and trailing whitespace on the line) is stripped.
# VarPat is a pattern that variable names must match.  
#     Example: "^[a-zA-Z][a-zA-Z0-9]+$"
# If FlagsOK is true, variables are allowed to be "set" by being put alone on
#     a line; no assignment operator is needed.  These variables are set in
#     the output array with a null value.  Lines containing nothing but
#     whitespace are still ignored.
# Output variables:
# Values[] contains the assignments, with the indexes being the variable names
#     and the values being the assigned values.
# Lines[] contains the line number that each variable occured on.  A flag set
#     is record by giving it an index in Lines[] but not in Values[].
# Return value:
# If any errors occur, a string consisting of descriptions of the errors
# separated by newlines is returned.  In no case will the string start with a
# numeric value.  If no errors occur,  the number of lines read is returned.
function ReadConfigFile(Values,Lines,File,Comment,Assign,StripWhite,VarPat,
FlagsOK,
Line,Status,Errs,AssignLen,LineNum,Var,Val) {
    if (Comment != "")
	Comment = "^" Comment
    AssignLen = length(Assign)
    if (VarPat == "")
	VarPat = "."	# null varname not allowed
    while ((Status = (getline Line < File)) == 1) {
	LineNum++
	sub("^[ \t]+","",Line)
	if (Line == "")		# blank line
	    continue
	if (Comment != "" && Line ~ Comment)
	    continue
	if (Pos = index(Line,Assign)) {
	    Var = substr(Line,1,Pos-1)
	    Val = substr(Line,Pos+AssignLen)
	    if (StripWhite) {
		sub("^[ \t]+","",Val)
		sub("[ \t]+$","",Val)
	    }
	}
	else {
	    Var = Line	# If no value, var is entire line
	    Val = ""
	}
	if (!FlagsOK && Val == "") {
	    Errs = Errs \
	    sprintf("\nBad assignment on line %d of file %s: %s",
	    LineNum,File,Line)
	    continue
	}
	sub("[ \t]+$","",Var)
	if (Var !~ VarPat) {
	    Errs = Errs sprintf("\nBad variable name on line %d of file %s: %s",
	    LineNum,File,Var)
	    continue
	}
	if (!(Var in Lines)) {
	    Lines[Var] = LineNum
	    if (Pos)
		Values[Var] = Val
	}
    }
    if (Status)
	Errs = Errs "\nCould not read file " File
    close(File)
    return Errs == "" ? LineNum : substr(Errs,2)	# Skip first newline
}

# Variables:
# Data is stored in Options[].
# rcFiles, OptList, VarNames, and EnvSearch are as as described for Opts().
# Global vars:
# Sets OptErr.  Uses ENVIRON[].
# If anything is read from any of the rcfiles, sets READ_RCFILE to 1.
function InitOpts(rcFiles,Options,OptList,VarNames,EnvSearch,
Line,Var,Pos,Vars,Map,CharOpt,NumVars,TypesInd,Types,Type,Ret,i,rcFile,
fNames,numrcFiles,filesRead,Err,Values,retStr) {
    split("",filesRead,"")	# make awk know this is an array
    NumVars = split(VarNames,Vars,",")
    TypesInd = Ret = 0
    if (EnvSearch == -1)
	EnvSearch = NumVars
    for (i = 1; i <= NumVars; i++) {
	Var = Vars[i]
	CharOpt = substr(OptList,++TypesInd,1)
	if (CharOpt ~ "^[:;*()#<>&]$")
	    CharOpt = substr(OptList,++TypesInd,1)
	Map[Var] = CharOpt
	Types[Var] = Type = substr(OptList,TypesInd+1,1)
	# Do not overwrite entries from environment
	if (i <= EnvSearch && Var in ENVIRON &&
	(Err = AssignVal(CharOpt,ENVIRON[Var],Options,Type,1,Var,0)) < 0)
	    return Err
    }

    numrcFiles = split(rcFiles,fNames,":")
    for (i = 1; i <= numrcFiles; i++) {
	rcFile = fNames[i]
	if (rcFile ~ "^~/")
	    rcFile = ENVIRON["HOME"] substr(rcFile,2)
	else if (rcFile ~ /^\$/) {
	    rcFile = substr(rcFile,2)
	    match(rcFile,"^[a-zA-Z0-9_]*")
	    envvar = substr(rcFile,1,RLENGTH)
	    if (envvar in ENVIRON)
		rcFile = ENVIRON[envvar] substr(rcFile,RLENGTH+1)
	    else
		continue
	}
	if (rcFile in filesRead)
	    continue
	# rcfiles are liable to be given more than once, e.g. UHOME and HOME
	# may be the same
	filesRead[rcFile]
	if ("x" in Options)
	    printf "Reading configuration file %s\n",rcFile > "/dev/stderr"
	retStr = ReadConfigFile(Values,Lines,rcFile,"#","=",0,"",1)
	if (retStr > 0)
	    READ_RCFILE = 1
	else if (ret != "") {
	    OptErr = retStr
	    Ret = -1
	}
	for (Var in Lines)
	    if (Var in Map) {
		if ((Err = AssignVal(Map[Var],
		Var in Values ? Values[Var] : "",Options,Types[Var],
		Var in Values,Var,0)) < 0)
		    return Err
	    }
	    else {
		OptErr = sprintf(\
		"Unknown var \"%s\" assigned to on line %d\nof file %s",Var,
		Lines[Var],rcFile)
		Ret = -1
	    }
    }

    if ("x" in Options)
	for (Var in Map)
	    if (Map[Var] in Options)
		printf "(%s) %s=%s\n",Map[Var],Var,Options[Map[Var]] > \
		"/dev/stderr"
	    else
		printf "(%s) %s not set\n",Map[Var],Var > "/dev/stderr"
    return Ret
}

# OptSets is a semicolon-separated list of sets of option sets.
# Within a list of option sets, the option sets are separated by commas.  For
# each set of sets, if any option in one of the sets is in Options[] AND any
# option in one of the other sets is in Options[], an error string is returned.
# If no conflicts are found, nothing is returned.
# Example: if OptSets = "ab,def,g;i,j", an error will be returned due to
# the exclusions presented by the first set of sets (ab,def,g) if:
# (a or b is in Options[]) AND (d, e, or f is in Options[]) OR
# (a or b is in Options[]) AND (g is in Options) OR
# (d, e, or f is in Options[]) AND (g is in Options)
# An error will be returned due to the exclusions presented by the second set
# of sets (i,j) if: (i is in Options[]) AND (j is in Options[]).
# todo: make options given on command line unset options given in config file
# todo: that they conflict with.
function ExclusiveOptions(OptSets,Options,
Sets,SetSet,NumSets,Pos1,Pos2,Len,s1,s2,c1,c2,ErrStr,L1,L2,SetSets,NumSetSets,
SetNum,OSetNum) {
    NumSetSets = split(OptSets,SetSets,";")
    # For each set of sets...
    for (SetSet = 1; SetSet <= NumSetSets; SetSet++) {
	# NumSets is the number of sets in this set of sets.
	NumSets = split(SetSets[SetSet],Sets,",")
	# For each set in a set of sets except the last...
	for (SetNum = 1; SetNum < NumSets; SetNum++) {
	    s1 = Sets[SetNum]
	    L1 = length(s1)
	    for (Pos1 = 1; Pos1 <= L1; Pos1++)
		# If any of the options in this set was given, check whether
		# any of the options in the other sets was given.  Only check
		# later sets since earlier sets will have already been checked
		# against this set.
		if ((c1 = substr(s1,Pos1,1)) in Options)
		    for (OSetNum = SetNum+1; OSetNum <= NumSets; OSetNum++) {
			s2 = Sets[OSetNum]
			L2 = length(s2)
			for (Pos2 = 1; Pos2 <= L2; Pos2++)
			    if ((c2 = substr(s2,Pos2,1)) in Options)
				ErrStr = ErrStr "\n"\
				sprintf("Cannot give both %s and %s options.",
				c1,c2)
		    }
	}
    }
    if (ErrStr != "")
	return substr(ErrStr,2)
    return ""
}

# The value of each instance of option Opt that occurs in Options[] is made an
# index of Set[].
# The return value is the number of instances of Opt in Options.
function Opt2Set(Options,Opt,Set,  count) {
    if (!(Opt in Options))
	return 0
    Set[Options[Opt]]
    count = Options[Opt,"count"]
    for (; count > 1; count--)
	Set[Options[Opt,count]]
    return count
}

# The value of each instance of option Opt that occurs in Options[] that
# begins with "!" is made an index of nSet[] (with the ! stripped from it).
# Other values are made indexes of Set[].
# The return value is the number of instances of Opt in Options.
function Opt2Sets(Options,Opt,Set,nSet,  count,aSet,ret) {
    ret = Opt2Set(Options,Opt,aSet)
    for (value in aSet)
	if (substr(value,1,1) == "!")
	    nSet[substr(value,2)]
	else
	    Set[value]
    return ret
}

# Returns true if option Opt was given on the command line.
function CmdLineOpt(Options,Opt,  i) {
    for (i = 1; (Opt,"num",i) in Options; i++)
	if (Options[Opt,"num",i] != 0)
	    return 1
    return 0
}
### End of ProcArgs library
### Begin array routines

# InitArr: Initialize an array with values.
# Ind and Vals are separated into lists on Sep.
# For each item in Ind, an index with that name is created in Arr[],
# and the value with the same position in Vals is stored in it.
# Global variables: none.
function InitArr(Arr,Ind,Vals,sep,  numind,indnames,values) {
    split(Ind,indnames,sep)
    split(Vals,values,sep)
    for (numind in indnames)
	Arr[indnames[numind]] = values[numind]
}

function ClearArr(Arr,  Elem) {
    for (Elem in Arr)
	delete Arr[Elem]
}

function CopyArr(From,To,  Elem) {
    for (Elem in From)
	To[Elem] = From[Elem]
}

# Subtract the values in Subtrahend from those in Minuend
function SubtractArr(Minuend,Subtrahend,  Elem) {
    for (Elem in Subtrahend)
	Minuend[Elem] -= Subtrahend[Elem]
}
# For each element of the array In, an element is created in Out having
# an index equal to the value of the element in In and a value equal to
# the index of the element in In.
function Invert(In,Out,  Index) {
    for (Index in In)
	Out[In[Index]] = Index
}

# Assign: make an array from a list of assignments.
# An index with the name of each variable in the list is created in the array.
# Its value is set to the value given for it.
# Input variables:
# Elements is a string containing the list of variable-value pairs.
# Sep is the string that separates the pairs in the list.
# AssignOp is the string that separates variables from values.
# Output variables:
# Arr is the array.
# Return value: the number of elements added to the set.
# Example:
# Assign(Arr,"foo=blot bar=blat baz=blit"," ","=")
function Assign(Arr,Elements,Sep,AssignOp,
Num,Names,Elem,Assignments,Assignment,i) {
    Num = split(Elements,Assignments,Sep)
    for (i = 1; i <= Num; i++) {
	Assignment = Assignments[i]
	Ind = index(Assignment,AssignOp)
	Arr[substr(Assignment,1,Ind - 1)] = substr(Assignment,Ind + 1)
    }
    return Num
}

# Packs Arr[], which should have integer indices starting at or above n, to
# contiguous integer indices starting with n.
# If n is not given it defaults to 0.
# Num should be the number of elements in Arr.
function PackArr(Arr,Num,n,  NewInd,OldInd) {
    NewInd = OldInd = n+0
    for (; Num; Num--) {
	while (!(OldInd in Arr))
	    OldInd++
	if (NewInd != OldInd) {
	    Arr[NewInd] = Arr[OldInd]
	    delete Arr[OldInd]
	}
	OldInd++
	NewInd++
    }
}
### End array routines
