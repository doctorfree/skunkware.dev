#!/usr/local/bin/zsh
# Command completion for zsh
#
# philiph@sco.com
# 4/19/1999

###
### Set up some variables we'll need later on
###

# Create a list of possible groups, from /etc/group
groups=( "${${(f)$(</etc/group)}%%:*}" )

# Pull a list of hosts for ncftp out of the bookmarks file.
#ncftphosts=( `cut -d "," -f 1 < ~/.ncftp/bookmarks | tail +3` )

# List ports from /etc/services.
ports=( "${${${(f)$(</etc/services)}:#\#*}%%[ 	]*}" )

# A list of frequently accessed hosts, pulled from /etc/hosts
#hosts=(newton michael novasco aspen maelstrom priscila elvis)
#hosts=("${${(s: :)${(s:	:)${${(f)$(</etc/hosts)}%%\#*}#*[ 	]*}}:#}")
hosts=( `cut -d'	' -f3 </etc/hosts | tail +6` )


###
### Completions for zsh builtins
###

compctl -z -P '%' bg
compctl -j -P '%' fg jobs disown
compctl -j -P '%' + -s '`ps -x | tail +2 | cut -c1-5`' wait
compctl -A shift
compctl -caF type whence which
compctl -c unhash
compctl -a unalias alias
compctl -x 'w[1,-d] p[2]' -n - 'w[1,-d] p[3]' -g '*(-/)' - \
	'p[1]' -c - 'p[2]' -g '*(-x)' -- hash
compctl -F functions unfunction
compctl -v getln unset vared
compctl -eB -x 'p[1] s[-]' -k '(a f m r)' - \
  'C[1,-*a*]' -ea - 'C[1,-*f*]' -eF - 'C[-1,-*r*]' -ew \
  -- disable
compctl -dB -x 'p[1] s[-]' -k '(a f m r)' - \
  'C[1,-*a*]' -da - 'C[1,-*f*]' -dF - 'C[-1,-*r*]' -dw \
  -- enable
# Redirection below makes zsh silent when completing unsetopt xtrace
compctl -s '$(setopt 2>/dev/null)' + -s 'no${=^$(unsetopt)}' + -o unsetopt
compctl -s '$(unsetopt)' + -s 'no${=^$(setopt 2>/dev/null)}' + -o setopt
compctl -s '${^fpath}/*(N:t)' autoload
compctl -b bindkey
compctl -x 'C[-1,[+-]o]' -o - 'c[-1,-A]' -A -- set
# pushln, pwd: disable completion.
compctl -k '( )' pushln pwd
# eval, command: complete as if command of its own.
compctl -l '' eval command
# complete current directory files and commands, first argument only.
compctl -x 'p[1]' -f -c -- source .
# typeset, declare, export, local, integer, readonly: match variable
# names by default.
compctl -v -x 'R[-*f,^*]' -F \
  - 's[-][+]' -k '(L R Z f i l r t u x m)' \
  -- typeset declare local integer export readonly
# limit, unlimit: match keywords, allow optional -h beforehand.
compctl -x 'p[1],p[2] c[-1,-h]' \
  -k '(cputime filesize datasize stacksize coredumpsize resident
  memoryuse memorylocked descriptors openfiles vmemorysize)' \
  -- limit unlimit
# fc: Match options, expect command for editor after -c,
# forbid mutually incompatible options.
compctl -x 'R[-[ARWI],^*] s[-]' -k '(A R W I)' \
  - 'R[-[ARWI],^*]' -f \
  - 's[-e],c[-1,-e]' -c \
  - 'R[-[enlrdDfEm],^*] s[-]' -k '(e n l r d D f E m)' \
  - 's[-]' -k '(A R W I e n l r d D f E m)' \
  -- fc
# vared: match options, allow entry of prompts after -p and -r,
# match variables by default.
compctl -v -x 's[-p][-r],C[-1,-[pr]]' -k '( )' \
  - 's[-]' -k '(c p r)' \
  -- vared
# r: much-reduced version of fc; now just does options.
compctl -x 's[-]' -k '(n l r)' -- r
# sched: if first word starts with a -, present waiting jobs
# (match-sched).  Otherwise, complete as if second command were the
# real command.
compctl -c -x 'p[1] s[-]' -K match-sched \
  - 'p[1]' -k '( )' \
  - 'p[2,-1]' -l '' \
  -- sched
# builtin: complete first word as builtin command, then treat as
# arguments to that command.
compctl -x 'p[1]' -B - 'p[1,-1]' -l '' \
  -- builtin
compctl -l '' -x 'p[1]' -em \
  -- command
# print: after -R, no options allowed.  After -u, need number,
# otherwise, prompt for options.
compctl -x 'R[-*R,^*]' -k '( )' \
  - 's[-u]' -k '( )' \
  - 's[-]' -k '(R n r s l z p N D P o O i c u)' \
  -- print
# Anything after nohup is a command by itself with its own completion
compctl -l '' nohup noglob exec nice eval - time
# kill: takes signal names as the first argument after -, but job
# names after % or PIDs as a last resort
compctl -j -P '%' + -s '`ps -a | tail +2 | cut -c2-6`' + \
	-x 's[-] p[1]' -k "($signals[1,-3])" -- kill
# compctl: complete using command names (and + ) by default, then
# [1] After --, complete command names *only*;
# [2] Between -x and --, just after -x or -, complete match characters
#     (And add a '[' as a prompt for more);
# [3] Match functions with -K;
# [4] Arrays with -k;
# [5] commands with -l;
# [6] Disable completion on -X, -P, -S, -g, -s (all for one argument)
#     and -H for two arguments.
# [7] complete option letters when given a -.
# This isn't as robust as it could be but it is as good as can be done
# cleanly without adding several more cases.
compctl -c -k '( + )' -x 'R[--,^*]' -c \
  - 'r[-x,--] s[-x],r[-x,--] c[-1,-x][-1,-]' -k \
  '( s S p c C w W n N m r R )' -S '[' \
  - 's[-K],c[-1,-K]' -F \
  - 's[-k],c[-1,-k]' -A \
  - 's[-l],c[-1,-l]' -c \
  - 's[-X][-P][-S][-g][-s][-H],C[-1,-[XPSgsH]],C[-1,-H?*],c[-2,-H]' -k '( )' \
  - 's[-]' -k '( - c f q o v b C D A I F p E j B a R G u d e r z N O Z n k \
    X K P S g s H l x )' \
  -- compctl


###
### Development Tools
###

# make: complete on makefiles, or complete on files with -f.
# Modified for UW7.
compctl -g '[mM]akefile' \
  -x 'c[-1,-f]' -f \
  - 's[-]' -k '(B e i k n p P q r s t u w)' \
  -- make

# gmake: Similar to system make, but different options.
compctl -g '[mM]akefile' \
  -x 'c[-1,-f]' -f \
  - 's[--]' -k '(directory debug environment-overrides file makefile \
  help ignore-errors include-dir jobs keep-going load-average \
  max-load just-print dry-run recon old-file assume-old \
  print-data-base question no-builtin-rules silent quiet \
  no-keep-going stop touch version print-directory no-print-directory \
  what-if new-file assume-new warn-undefined-variables)' \
  -X '"-" for short options, or:' \
  - 's[-]' -k '(C d e f h i I j k l n o p q r s S t u w W -)' \
  -X '"--" for long options, or:' \
  -- gmake
  
# strip, profile, and debug only executables.  The compctls for the
# debuggers could be better, of course.
compctl -g '*(*)' strip gprof adb dbx xdbx ups
# For rcs users, co and rlog from the RCS directory.  We don't want to
# see the RCS and ,v though.
compctl -g 'RCS/*(:s@RCS/@@:s/,v//)' co rlog rcs rcsdiff
# Generic completion for C compiler.
compctl -g "*.[cCoa]" -x 's[-I]' -g "*(/)" \
  - 's[-l]' \
  -s '${(s.:.)^LD_LIBRARY_PATH}/lib*.a(:t:r:s/lib//)' \
  -- cc

# GCC completion, by Andrew Main
# completes to filenames (*.c, *.C, *.o, etc.); to miscellaneous
# options after a -; to various -f options after -f (and similarly -W,
# -g and -m); and to a couple of other things at different points.
# The -l completion is nicked from the cc compctl above.
# The -m completion should be tailored to each system; the one below
# is i386.
compctl -g '*.([cCmisSoa]|cc|cxx|ii)' \
  -x 's[-l]' \
  -s '${(s.:.)^LD_LIBRARY_PATH}/lib*.a(:t:r:s/lib//)' - 'c[-1,-x]' \
  -k '(none c objective-c c-header c++ cpp-output assembler assembler-with-cpp)' \
  - 'c[-1,-o]' \
  -f - 'C[-1,-i(nclude|macros)]' \
  -g '*.h' - 'C[-1,-i(dirafter|prefix)]' \
  -g '*(-/)' - 's[-B][-I][-L]' \
  -g '*(-/)' - 's[-fno-],s[-f]' \
  -k '(all-virtual cond-mismatch dollars-in-identifiers enum-int-equiv external-templates asm builtin strict-prototype signed-bitfields signd-char this-is-variable unsigned-bitfields unsigned-char writable-strings syntax-only pretend-float caller-saves cse-follow-jumps cse-skip-blocks delayed-branch elide-constructors expensive-optimizations fast-math float-store force-addr force-mem inline-functions keep-inline-functions memoize-lookups default-inline defer-pop function-cse inline peephole omit-frame-pointer rerun-cse-after-loop schedule-insns schedule-insns2 strength-reduce thread-jumps unroll-all-loops unroll-loops)' - 's[-g]' \
  -k '(coff xcoff xcoff+ dwarf dwarf+ stabs stabs+ gdb)' - \
  's[-mno-][-mno][-m]' \
  -k '(486 soft-float fp-ret-in-387)' - 's[-Wno-][-W]' \
  -k '(all aggregate-return cast-align cast-qual char-subscript comment conversion enum-clash error format id-clash-6 implicit inline missing-prototypes missing-declarations nested-externs import parentheses pointer-arith redundant-decls return-type shadow strict-prototypes switch template-debugging traditional trigraphs uninitialized unused write-strings)' - 's[-]' \
  -k '(pipe ansi traditional traditional-cpp trigraphs pedantic
  pedantic-errors nostartfiles nostdlib static shared symbolic include
  imacros idirafter iprefix iwithprefix nostdinc nostdinc++ undef)' \
  -X 'Use "-f", "-g", "-m" or "-W" for more options' \
  -- gcc g++


###
### External system utils
###

# locate: disable completion
compctl -k '( )' locate
# ulimit: match option letters.  Complete the word 'unlimited' if
# started.
# Modified for UW7.
compctl -x 'S[u]' -k '(unlimited)' \
  - 's[-]' -k '(H S a c d f m n p s t v)' \
  -- ulimit
# su: takes an username and args for the shell.  The `-c' case is
# handled specially here.
compctl -u -x 'w[2,-c] p[3,-1]' -l '' \
  -- su

# rcp, rsh, rlogin: match files *and* hosts initially, match files
# after a :, if the first argument contained a : then the second
# matches files and vice versa.
compctl -f \
  -k hosts -x 'n[1,:]' \
  -f - 'p[1] W[2,*:*]' \
  -f - 'p[1]' \
  -k hosts \
  -S ':' - 'p[2] W[1,*:*]' \
  -f - 'p[2]' \
  -k hosts -S ':' \
  -- rcp
# rsh: make the first argument complete to hosts and treat the rest of
# the line as a command on its own.
compctl -k hosts -x 'p[2,-1]' -l '' \
  -- rsh
# rlogin: takes hosts and users after `-l'
compctl -k hosts -x 'c[-1,-l]' -u \
  -- rlogin

# rmdir, dircmp: operate on only real directories
compctl -g '*(/)' rmdir dircmp 
# cd, pushd, mkdir: operate only on directories or symbolic links to
# directories
compctl -g '*(-/)' cd pushd mkdir

compctl -s '$(groups)' + -k groups newgrp
compctl -f -x 'p[1], p[2] C[-1,-*]' -k groups -- chgrp
compctl -f -x 'p[1] n[-1,.], p[2] C[-1,-*] n[-1,.]' -k groups \
	- 'p[1], p[2] C[-1,-*]' -u -S '.' -- chown

# gs, ghostview, psps pstops, psmulti, psselect, gv: run on postscript
# files, but if no postscript file matches what we already typed,
# complete directories as the postscript file may not be in the
# current directory.
compctl -g '*.(e|)ps' + -g '*(-/)' gs ghostview psps pstops psmulti\
    psselect gv
# tex, texi2dvi, xdvi, dvips: same logic as for postscript utils.
compctl -g '*.tex*' + -g '*(-/)' {,la,gla,ams{la,},{g,}sli}tex texi2dvi
compctl -g '*.dvi' + -g '*(-/)' xdvi dvips
# groff, grog: run on roff files, follow postscript logic.
compctl -g '*.(groff|gr|nr)' + -g '*(-/)' groff grog

# ls, dir: complete files, options (both - and -- kind), and option
# params.
# This is for GNU ls.
compctl -f \
  -x s'[--format]' -P '=' \
  -k '(long verbose commas horizontal across vertical single-column)' \
  - s'[--sort]' -P '=' -k '(none time size extension)' \
  - s'[--time]' -P '=' -k '(atime ctime access use status)' \
  - s'[--width=][--tabsize=][--ignore=][-w][-T][-I],c[-1,-w][-1,-T][-1,-I]' \
  -k '( )' \
  - s'[--]' -S '' \
  -k '(all\  escape\  directory\  inode\  kilobytes\  numeric-uid-gid\ \ 
       no-group\  hide-control-chars\  reverse\  size\  width= tabsize= \
       almost-all\  ignore-backups\  classify\  file-type\  full-time\ \ 
       ignore= dereference\  literal\  quote-name\  no-color\  7bit\ \
       8bit\  recursive\  sort= format= time= help\  version\ )' \
  - s'[-]' \
  -k '(a b c d f g i k l m n o p q r s t u x A B C F G L N Q R S U \
       X 1 w T I)' \
  -- ls dir

# find: very system dependent, this one is for GNU find.
# Note that 'r[-exec,;]' must come first
# On Linux use 'c[-1,-fstype]' -s '$(cut -f2 /proc/filesystems)' 
compctl -x 'r[-exec,;][-ok,;]' -l '' - 's[-]' \
  -s 'daystart {max,min,}depth follow noleaf version xdev \
      {a,c,}newer {a,c,m}{min,time} empty false {fs,x,}type gid inum links \
      {i,}{l,}name {no,}{user,group} path perm regex size true uid used \
      exec {f,}print{f,0,} ok prune ls' - \
      'p[1]' -g '. .. *(-/)' - \
      'C[-1,-((a|c|)newer|fprint(|0|f))]' -f - \
      'c[-1,-fstype]' \
  -k '(ufs 4.2 4.3 nfs tmp mfs S51K S52K)' - 'c[-1,-group]' \
  -k groups - 'c[-1,-user]' -u \
  -- find

# gunzip, zmore, gzcat: operate on compressed files only.
compctl -g '*.(gz|z|Z|t[agp]z|tarZ|tz|tgz)' + -g '*(-/)' gunzip
compctl -g '*.(gz|z|Z|t[agp]z|tarZ|tz|tgz)' + -g '(-/)' zmore gzcat

# uncompress, zcat: operate on compressed files only.
compctl -g '*.(Z|tarZ)' + -g '*(-/)' uncompress
compctl -g '*.(Z|tarZ)' + -g '*(-/)' zcat

# ftp, ping: takes hostnames
compctl -k hosts ftp ping

# telnet: complete hostname, then port number.
compctl -k hosts \
  -x "C[-1,[^-]*] p[2,-1]" -k ports \
  -- telnet

# ncftp: take hosts from ncftp bookmarks file.
#compctl -k ncftphosts ncftp

# mutt: if -f, -i, -a, or -H is given, complete files,
# and if -f+ (or -f=, or -f +, or -f =) is given, complete folders in
# ~/mail.  Also complete options after -. 
# Don't complete users because I never mail anyone on my own system.
compctl -x 's[-f=]' -g '~/mail/*(:t)' \
  - 's[=] c[-1,-f]' -g '~/mail/*(:t)' \
  - 's[-f+]' -g '~/mail/*(:t)' \
  - 's[+] c[-1,-f]' -g '~/mail/*(:t)' \
  - 's[-f],s[-i],s[-a],s[-H],C[-1,-[fiaH]]' -f \
  - 's[-]' -k '(a b c e f F H i m n p R s v x y z Z h)' \
  -- mutt

# man: complete commands.
compctl -c man

# tar: complete tar files (only .tar or .tar.* format) after -f, disable
# completion for certain options, let user choose directory with -C,
# complete GNU tar long options beginning with --.  The match-taropts
# function prompts for GNU tar options, ensures one of the seven
# mandatory options is given in the first argument to tar, and enforces
# spaces after options that take an argument (this is required by GNU
# tar and also makes filename completion possible for the -f option).
# Note that the -[0-7][lmh] options are not completed, but they're
# hardly ever used.
compctl -f \
  -x 'C[-1,-*f],p[2] C[-1,*f],c[-1,--file]' -g '*.tar(|.*)' + -g '*(-/)' \
  - 'C[-1,-*[bLN]],p[2] C[-1,*[bLN]],c[-1,--block-size][-1,tape-length][-1,--after-date][-1,--newer]' -k '( )' \
  - 'C[-1,-*C],p[2] C[-1,*C],c[-1,directory]' -g '*(-/)' \
  - 'C[-1,-*[FgKTV]],p[2] C[-1,*[FgKTV]],c[-1,--info-script][-1,--new-volume-script][-1,--starting-file][-1,--files-from][-1,--label][-1,--exclude]' -f \
  - 's[--]' -k '(catenate concatenate create diff compare delete append list update extract get atime-preserve block-size read-full-blocks directory checkpoint file force-local info-script new-volume-script incremental dereference ignore-zeros ignore-failed-read keep-old-files starting-file one-file-system tape-length modification-time multi-volume after-date newer old-archive portability to-stdout same-permissions preserve-permissions absolute-paths preserve record-number remove-files same-order preserve-order same-owner sparse files-from null totals verbose label version interactive confirmation verify exclude exclude-from compress uncompress gzip ungzip use-compress-program block-compress)' \
  - 's[-],p[1]' -S '' -K 'match-taropts' \
  -- gtar

# gcpio: needs work.
compctl -x \
   'p[1,1]' -k '(-iamcd -iamcdt -iamcdv -moldc -moldcv -dump -dumpv)' - \
   'C[-1,(-iamcd|-iamcdt|-iamcdv)]' -g '*.cpio' -P '-I ' + -g '*(-/)' - \
   'C[-1,(-dump|-dumpv)]' -g '*(-/)' - \
   'C[-1,(-moldc|-moldcv)]' -g '*(-/)' \
   -- gcpio

# xhost: complete host names (set by you in $hosts), even if after a + or -.
compctl -k hosts -x 's[-][+]' -k hosts -- xhost

# xsetroot: gets possible colours, cursors and bitmaps from wherever.
# Uses two auxiliary functions.  You might need to change the path
# names.
# Paths modified for UW7.
Xcolours() {
  reply=( ${(L)$(awk '{ if (NF = 4) print $4 }' < /usr/X/lib/X11/rgb.txt)} )
}
Xcursor() {
  reply=( $(sed -n 's/^#define[	 ][ 	]*XC_\([^ 	]*\)[ 	].*$/\1/p' \
	  < /usr/X/include/X11/cursorfont.h) )
}
compctl -k '(-help -def -display -cursor -cursor_name -bitmap -mod -fg -bg
   -grey -rv -solid -name)' -x 'c[-1,-display]' -k hosts -S ':0.0' - \
   'c[-1,-cursor]' -f -  'c[-2,-cursor]' -f - \
   'c[-1,-bitmap]' -g '/usr/include/X11/bitmaps/*' - \
   'c[-1,-cursor_name]' -K Xcursor - \
   'C[-1,-(solid|fg|bg)]' -K Xcolours -- xsetroot

# xrdb: complete options and hosts where appropriate.
compctl -f -x 's[-]' -k '(display all global screen screens n cpp \
  nocpp query load merge edit backup symbols remove retain quiet)' - \
  'c[-1,-display]' -k hosts -S :0.0 - 'c[-1,-cpp]' -c - 'c[-1,-edit]' -f \
  -- xrdb

# dd: fill in the options
# Modified for UW7.
compctl  \
  -k '(if of conv ibs obs bs cbs files skip file seek iseek oseek count)' \
  -S '=' -x 's[if=], s[of=]' -f - 'C[0,conv=*,*] n[-1,,], s[conv=]' \
  -k \
  '(ascii ebcdic ibm block unblock lcase ucase swab noerror notrunc sync)' \
  -q -S ',' - 'n[-1,=]' -X '<number>' -- dd

# gnucash: complete on .xac gnucash files, then directories
compctl -g '*.xac' + -g '*(-/)' - \
  --gnucash

# umount: use the mounted helper function to list the currently
# mounted filesystem.
# Modified for UW7.
mounted() {
  reply=( $(cut -d'	' -f2 </etc/mnttab) )
  }

compctl -K mounted - \
  -- umount

# lyx: complete on .lyx files, otherwise present directories.
compctl -g '*.lyx' + -g '*(-/)' - \
  -- lyx

# xv: complete on pciture types
compctl -g '*.(gif|jpg|tiff|png)' + -g '*(-/)' - \
  -- xv

# a2ps: in progress.  Currently completes short and long options.
compctl -f -x 's[--]' \
  -k '(version help copyright guess list quiet verbose debug define \
  medium columns rows major landscape portrait borders compact margins \
  line-numbers font-size lines-per-page chars-per-line catman tabsize \
  non-printable-format no-header header underlay center-title \
  left-title right-title left-footer footer right-footer pages \
  truncate-lines interpret end-of-line encoding title stdin prologue \
  print delegate pretty-print highlight-level strip-level output \
  version-control suffix printer ppd copies sides setpagedevice \
  statusdict page-prefeed no-page-prefeed)' \
  -X '"-" for short options, or:' \
  - 's[-]' -k '(V q v = M 1 r R J A C f l L m T b B u -)' \
  -X '"--" for long options, or:' \
  -- a2ps


# tar, gtar: do some gnarly completion...
tarnames () {
    # Completion function for use with tar:
    # get the names of files in the tar archive to extract.
    #
    # Author: Peter Stephenson <pws@ifh.de>
    #
    # The main claim to fame of this particular function is that it
    # completes directories in the tar-file in a manner very roughly
    # consistent with `compctl -f'.  There are two bugs:  first, the whole
    # path prefix up to the present is listed with ^D, not just the new
    # part to add; second, after a unique completion a space is always
    # inserted, even if the completion ends with a slash.  These are
    # currently limitations of zsh.
    #
    # This only works for the (fairly common) tar argument style where
    # the arguments are bunched into the first argument, and the second
    # argument is the name of the tarfile.  For example,
    #  tar xvzf zsh-3.1.2.tar.gz ...
    # You can only use compressed/gzipped files if tar is GNU tar,
    # although the correct name for the tar programme will be inferred.

    local line list=tf
    read -cA line
    # $line[2] is the first argument:  check for possible compression args.
    # (This is harmless when used with non-GNU tar, but then the file must
    # be uncompressed to be able to use it with tar anyway.)
    [[ $line[2] = *[Zz]* ]] && list=tfz
    # $line[1] is the command name:  something like tar or gnutar.
    # $line[3] is the name of the tar archive.

    # cache contents for multiple completion: note tar_cache_name
    # and tar_cache_list are not local.  Assumes all files with the
    # same name are the same file, even if in different directories:
    # you can trick it with $PWD/file on the command line.
    if [[ $line[3] != $tar_cache_name ]]; then
      tar_cache_list=($($line[1] $list $line[3]))
      tar_cache_name=$line[3]
    fi

    # Now prune the list to include only appropriate directories.
    local file new
    reply=()
    if [[ $1 = */* ]]; then
      local sofar=${1%/*}/
      for file in $tar_cache_list; do
        if [[ $file = $sofar* ]]; then
          new=${file#$sofar}
          if [[ $new = */* ]]; then
        new=$sofar${new%%/*}/
          else
        new=$file
          fi
          if [[ $1 != */ || $new != $1 ]]; then
        reply=($reply $new)
          fi
        fi
      done
    else
      for file in $tar_cache_list; do
        if [[ $file = */* ]]; then
          new=${file%%/*}/
        else
          new=$file
        fi
        reply=($reply $new)
      done
    fi
}

compctl -f \
    -x 'p[2] C[-1,*(z*f|f*z)*]' -/g '*.(taz|tar.(gz|z|Z)|tgz)' \
    - 'p[2] C[-1,*(Z*f|f*Z)*]' -/g '*.(tar.Z|taz)' \
    - 'p[2] C[-1,*f*]' -/g '*.tar' \
    - 'p[1] N[-1,ctxvzZ]' -k "(v z f)" \
    - 'p[1] s[]' -k "(c t x)" -S '' \
    - 'p[3,-1] W[1,*x*]' -K tarnames \
    -- tar
