subj: tls049 - POP mail server


Useful hints, thanks to: Brian Atkinson:

This is compiled with C2 code. If you dont use C2 it seems to
break with the message
	Security command was invoked without ANY arguments

I altered popper.c and pop_pass.c so that where C2 was required, I had
	#if defined(SCO) && defined(C2)
which cured the problem.

Further to this, there are some funnies when sending a mail
Attempting a reply (xtnd xmit) seems to give you the message
	 No valid author present

This is from sendmail, *not* popper. I'm not entirely sure what is
causing this as it may be package related or the use of the sendmail
flags within popper itself. However, many "pop" packages seem to use
pop to pick up but then can use SMTP to send. I've simply configured
our pop packages (B&W, QVTnet amongst others) to send with SMTP. I'll
be honest and say I didnt spend any time worrying about it. I just
switched to SMTP and forgot it.

However, it *does* work (after the C2 removal) and seems to be very reliable.

brian

-----------------------------


From the README file:

Introduction

The Post Office Protocol server runs on a variety of Unix[1] computers
to manage electronic mail for Macintosh and MS-DOS computers.  The
server was developed at the University of California at Berkeley and
conforms fully to the specifications in RFC 1081[2] and RFC 1082[3].
The Berkeley server also has extensions to send electronic mail on
behalf of a client.

Contents of the Distribution

The distribution contains the following:

+   All of the C source necessary to create the server program.

+   A visual representation of how the POP system works.

+   Reprints of RFC 1081 and RFC 1082.

+   A HyperCard stack POP client implementation using MacTCP.

+   A man page for the popper daemon.

+   This guide.


Compatibility

The Berkeley POP server has been successfully tested on the following
Unix operating systems:

+   Berkeley Systems Distribution 4.3

+   Sun Microsystems Operating System versions 3.5 and 4.0

+   Ultrix version 2.3

[ SCO UNIX version 4.2 ]

The following POP clients operate correctly with the Berkeley POP server:

+   The Berkeley HyperMail HyperCard stack for the Apple Macintosh 
    (distributed with the server).

+   The Stanford University Macintosh Internet Protocol MacMH program.

+   The Stanford University Personal Computer Internet Protocol MH 
    program.

+   The mh version 6.0 programs for Unix.


Support

The Berkeley POP server is not officially supported and is without any
warranty, explicit or implied.  However, we are interested in your
experiences using the server.  Bugs, comments and suggestions should be
sent electronically to netinfo@garnet.Berkeley.EDU.


Operational Characteristics

The POP Transaction Cycle

The Berkeley POP server is a single program (called popper) that is
launched by inetd when it gets a service request on the POP TCP port.
(The official port number specified in RFC 1081 for POP version 3 is
port 110.  However, some POP3 clients attempt to contact the server at
port 109, the POP version 2 port.  Unless you are running both POP2 and
POP3 servers, you can simply define both ports for use by the POP3
server.  This is explained in the installation instructions later on.)
The popper program initializes and verifies that the peer IP address is
registered in the local domain, logging a warning message when a
connection is made to a client whose IP address does not have a
canonical name.  For systems using BSD 4.3 bind, it also checks to see
if a cannonical name lookup for the client returns the same peer IP
address, logging a warning message if it does not.  The the server
enters the authorization state, during which the client must correctly
identify itself by providing a valid Unix userid and password on the
server's host machine.  No other exchanges are allowed during this
state (other than a request to quit.)  If authentication fails, a
warning message is logged and the session ends.  Once the user is
identified, popper changes its user and group ids to match that of the
user and enters the transaction state.  The server makes a temporary
copy of the user's maildrop (ordinarily in /usr/spool/mail) which is
used for all subsequent transactions.  These include the bulk of POP
commands to retrieve mail, delete mail, undelete mail, and so forth.  A
Berkeley extension also allows the user to submit a mail parcel to the
server who mails it using the sendmail program (this extension is
supported in the HyperMail client distributed with the server).  When
the client quits, the server enters the final update state during which
the network connection is terminated and the user's maildrop is updated
with the (possibly) modified temporary maildrop.


Logging

The POP server uses syslog to keep a record of its activities.  On
systems with BSD 4.3 syslogging, the server logs (by default) to the
"local0" facility at priority "notice" for all messages except
debugging which is logged at priority "debug".  The default log file is
/usr/spool/mqueue/POPlog.  These can be changed, if desired.  On
systems with 4.2 syslogging all messages are logged to the local log
file, usually /usr/spool/mqueue/syslog.

Problems

If the filesystem which holds the /usr/spool/mail fills up users will 
experience difficulties.  The filesystem must have enough space to hold
(approximately) two copies of the largest mail box.  Popper (v1.81 and
above) is designed to be robust in the face of this problem, but you may
end up with a situation where some of the user's mail is in

	/usr/spool/mail/.userid.pop

and some of the mail is in

	/usr/spool/mail/userid

If this happens the System Administrator should clear enough disk space
so that the filesystem has at least as much free disk as both mailboxes
hold and probably a little more.  Then the user should initiate a POP
session, and do nothing but quit.  If the POP session ends without an
error the user can then use POP or another mail program to clean up his/her
mailbox.

Alternatively, the System Administrator can combine the two files (but
popper will do this for you if there is enough disk space).


Debugging

The popper program will log debugging information when the -d parameter
is specified after its invocation in the inetd.conf file.  Care should
be exercised in using this option since it generates considerable
output in the syslog file.  Alternatively, the "-t <file-name>" option
will place debugging information into file "<file-name>" using fprintf
instead of syslog.  (To enable debugging, you must edit the Makefile
to add -DDEBUG to the compiler options.)

For SunOS version 3.5, the popper program is launched by inetd from
/etc/servers.  This file does not allow you to specify command line
arguments.  Therefore, if you want to enable debugging, you can specify
a shell script in /etc/servers to be launched instead of popper and in
this script call popper with the desired arguments.

Limitations

+   The POP server copies the user's entire maildrop to /tmp and
    then operates on that copy.  If the maildrop is particularly
    large, or inadequate space is available in /tmp, then the
    server will refuse to continue and terminate the connection.

+   Simultaneous modification of a single maildrop can result in 
    confusing results.  For example, manipulating messages in a
    maildrop using the Unix /usr/ucb/mail command while a copy of
    it is being processed by the POP server can cause the changes
    made by one program to be lost when the other terminates.  This
    problem is being worked on and will be fixed in a later
    release.


Credits

The POP server was written by Edward Moy and Austin Shelton with
contributions from Robert Campbell (U.C. Berkeley) and Viktor Dukhovni
(Princeton University).  Edward Moy wrote the HyperMail stack and drew
the POP operation diagram.  This installation guide was written by
Austin Shelton.


Footnotes

[1] Copyright (c) 1990 Regents of the University of California.
    All rights reserved.  The Berkeley software License Agreement
    specifies the terms and conditions for redistribution.  Unix is
    a registered trademark of AT&T corporation.  HyperCard and
    Macintosh are registered trademarks of Apple Corporation.

[2] M. Rose, Post Office Protocol - Version 3.  RFC  1081, NIC, 
    November 1988.

[3] M. Rose, Post Office Protocol - Version 3 Extended Service 
    Offerings.  RFC 1082, NIC, November 1988.
