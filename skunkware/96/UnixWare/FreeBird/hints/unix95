
Subject: (fwd) Everything You've Ever Wanted to Know about X/Open UNIX


Submitted-by: stephe@srw.com (Stephen Walli)

            Everything You've Ever Wanted to Know About
           X/Open UNIX, and the Single UNIX Specification
                          Stephen R. Walli
                            SRW Software


[srw --- This article originally appeared in ;login:, the 
USENIX Association Newsletter, Vol. 20, No. 3, June 1995.
Much of that article in turn was derived from material that 
first appeared in an article for Open Systems Networking &
Computing, (March 1995),  an English technology analysis 
monthly.  It was reworked to remove much of the historical 
UNIX material, and editted to  (hopefully)  be more useful 
to USENIX's technical audience.]

In  October  1994,   X/Open  rolled  out   the  Single  UNIX
Specification, and  followed  this up  with the X/Open  UNIX
brand programme in March 1995.  UNIX is now ``a trademark in
the United States  and other countries, licensed exclusively
through X/Open Company, Ltd.''  So what does this mean?

This article provides a brief history of Spec 1170, the work
that lead  to the Single  UNIX Specification, describes  the
Single UNIX Specification  and its context within the X/Open
Common  Application  Environment,  and outlines  how  X/Open
brands work  in  general with  specific reference to  X/Open
UNIX.

POSIX.1, XPG4, and Spec 1170 in Context
=======================================

A  little  history  is  in  order.   A Common  Open  Systems
Environment (COSE) project  was announced in  Spring 1993 to
develop a  common API  specification to support  application
source-code portability.   The  five primary  sponsors  were
Hewlett-Packard,   IBM,   Novell/USL,  the   Open   Software
Foundation, and Sun  Microsystems, however, the  project was
endorsed by a  total of 50 system vendors and 20 independent
software  vendors  (ISV).   The  intent  was  to  develop  a
specification of the  common interfaces used  in traditional
UNIX  systems,  which  when  implemented by  the  supporting
system   vendors,   would   allow  software   vendors   with
applications developed for  traditional UNIX systems to more
easily  port  their   source-code  to  a  wider  variety  of
platforms.

The idea  of developing a  common application interface  for
source code  portability  was not  new.  As the  traditional
UNIX system programming  interface changed and diverged with
each  new  architecture  that  supported the  original  UNIX
operating system,  a  number of  efforts  arose to  try  and
define a single operating system programming interface.

In North America,  /usr/group (now Uniforum), developed what
was known  as  the /usr/group Standard  in 1984.  This  work
became input to  the Institute of Electrical and Electronics
Engineers (IEEE) POSIX  standards committee when they formed
in 1985.   The  original IEEE POSIX  work culminated in  the
ratification of  the  POSIX.1 system  interface standard  in
1988  (IEEE  Std  1003.1-1988),  which was  reformatted  and
became the  international ISO standard  in 1990.  (IEEE  Std
1003.1-1990 is  identical to  ISO/IEC 9945-1:1990, with  the
small exception  of the IEEE  book's more colourful  cover.)

POSIX.1 is very  focused in scope, and the consensus process
has created areas  where the specification is either silent,
or allows a  choice between two different behaviours.  While
POSIX.1  was  being  developed  by  the  IEEE,  a  CBEMA  X3
committee developed the ANSI C standard, ratified in 1989.

While the POSIX  and ANSI C efforts were developing in North
America,  a  group   of  European  systems  vendors  took  a
different approach to  applications source code  portability
specifications.  X/Open Company  Limited was formed in 1984,
as a not-for-profit  organization that would  be responsible
for   developing   and    maintaining   specifications   for
applications  portability  that the  founding  share-holders
would implement.   X/Open  produced the  X/Open  Portability
Guide (XPG),  which  has been  expanded  and grown  into  an
entire application  environment  specification known as  the
X/Open Common Application Environment (CAE).

As the X/Open  CAE evolved, X/Open  involved themselves with
the IEEE  POSIX process, recognising  the importance of  the
formal consensus process.   When XPG4 was published in 1992,
it  was  fully aligned  with  the POSIX.1  system  interface
standard  and  the then  newly  ratified POSIX.2  shell  and
utilities standard.  (XPG4 is actually a name rather than an
acronym.   XPG3  did  indeed  stand for  X/Open  Portability
Guide, Issue  3.   By 1992,  the XPG3  had evolved into  the
X/Open CAE, Issue  4, a much  broader set of specifications.
XPG4 is the  convenient name for the systems interfaces, and
commands and utilities specifications that are part of issue
4 of the  CAE.)  XPG4 was  a proper superset  of these POSIX
standards, plus the  ANSI/ISO C language standard libraries,
and contained a  wealth of other  application interfaces and
utilities, many of  them derived from the System V Interface
Definition.

The primary sponsors of the COSE initiative were responsible
for developing the  common API specification.  They began by
defining a base  for the specification  using other accepted
industry specifications.   XPG4  was chosen  as the  initial
specification.  It was  already widely implemented and used,
and supported key  formal portability standards  in the eyes
of most potential  customers of this  work.  Next were added
the traditional UNIX  System V Interface  Definition, (SVID)
Edition 3, Level  1 Base and Kernel Extension calls, and the
OSF Application  Environment  Specification (AES)  Full  Use
interface  definitions.   These interfaces  represented  the
stable central core of the latter two specifications.

A novel survey  technique was then  used for developing  the
common  API   specification.   A   set  of  key   successful
applications were chosen  for the survey,  and at either the
source  code  or   binary  level  these   applications  were
inspected  for  system  interface  and library  usage.   The
applications were  chosen  based on  such factors as  market
success, and application type in an effort to ensure that no
particular group of  applications (e.g. databases) was over-
represented.  A further  survey of 3500  program modules was
performed,  recognising  that  while  the primary  group  of
applications  was representative  of  the industry,  it  was
certainly not a  complete representation.  After the survey,
another 130  interfaces  were added to  the base common  API
specification.  Many  of  these were  found in  applications
originally developed on Berkeley-based systems.

There were  1170  interfaces in  the complete  specification
when  the  work was  done  (926 programming  interfaces,  70
headers, 174  commands  and utilities),  and the common  API
specification became known as Spec 1170.

The breadth and  mixed origins of Spec 1170 meant there were
areas of duplicated  functionality.  (For example, there are
similar interfaces for  memory management -- bcopy() versus
memmove() -- and  creating temporary filenames -- tmpnam()
versus mktemp().   Such  duplication was  left  in place  to
ensure  that the  maximum  number of  existing  applications
would be portable on systems implementing the specification.
This  was  still  the intent  of  the specification  --  to
provide a base  for porting existing  applications developed
on traditional UNIX  and UNIX-like operating systems.  While
allowing  the  duplication,   pointers  to  the  recommended
practise for future  portability were outlined.   In similar
fashion, the  base  specifications that  were used were  not
pruned of interfaces  not discovered by the survey, as it is
believed they provide a clear direction for new applications
development.

The specification was turned over to X/Open in December 1993
to be  turned  into a  proper  industry specification  using
their   fast-track   review   process.   The   Single   UNIX
Specification is the fruit of this labour, and was published
in  October  1994,  and  the  supporting X/Open  UNIX  brand
programme is  in place as  of March 1995.   Spec 1170 is  no
more,  replaced  by  the  publication  of  the  Single  UNIX
Specification.  (There are  also nolonger 1170 interfaces in
the specification  as the  fast-track review process  shaped
the  document,   and   the  new   internationalised   curses
specification contributed a large number of interfaces.)

The Single UNIX Specification
=============================

The  Single  UNIX Specification  is  published as  a  proper
superset of  XPG4,  and thus  still  has the POSIX.1  system
interface,  POSIX.2  shell  and  utilities, and  ISO/ANSI  C
language specifications at  its core.  It is a collection of
documents  that  are  all part  of  the X/Open  CAE  (Common
Application Environment), and consists of:

- System Interface Definitions, Issue 4, Version 2

- System Interfaces and Headers, Issue 4, Version 2

- Commands and Utilities, Issue 4, Version 2

- Networking Services, Issue 4

- X/Open Curses, Issue 4

The  first  three  documents  made  up  XPG4, and  with  the
addition of the traditional UNIX interfaces and definitions,
were re-released  as  Issue 4,  Version  2.  The  only  real
changes  to  the   Commands  and  Utilities  documents  were
enhanced descriptions of the cc and c89 compiler front-ends.

Berkeley based sockets  and IP address resolution interfaces
were added to  the Networking Services document that already
described  the  X/Open  Transport Interface  (XTI).   X/Open
Curses, Issue 4,  is a substantially enhanced version of the
Issue  3   Curses   calls,  supporting  colour,   multi-byte
characters, and different writing directions.

Components, Profiles, and X/Open Brands
=======================================

The  X/Open  CAE  specifications  describe  interfaces  that
developers may use  when writing portable applications code.
The  other  half   of  X/Open's  formula   for  applications
portability is their brand programme.  X/Open has identified
functional  components,  based   upon  the  interfaces   and
protocols described in  the X/Open CAE  specifications.  For
example, there  is  an ``XPG4  Commands  and Utilities  V2''
component,  described  in   the  X/Open  CAE   Commands  and
Utilities, Issue 4, Version 2, specification.  Likewise, the
``XPG4   System   Interfaces  and   Libraries   (Extended)''
component is described  in the X/Open  CAE System Interfaces
and Headers, Issue  4, Version 2,  specification.  There are
26 different components identified for the X/Open CAE.

Profiles  are constructed  from  components, and  there  are
several XPG4-based profiles.

XPG4 Base -- the XPG4 Base profile originally published in
1992.  It  describes  a fully  functional environment  for
portable  applications  development.    It  requires  full
conformance to the  POSIX.1 (System Interfaces)  standard,
and a transitional path for POSIX.2 (Shell and Utilities).
Required components:
-- XPG4 Internationalised System Calls and Libraries
-- XPG4 Commands and Utilities
-- XPG4 C Language

XPG4 Base  95  -- the current  enhanced XPG4 Base  profile
requiring  full  conformance  to  the  XPG4  Commands  and
Utilities component.  Required components:
-- XPG4 Internationalised System Calls and Libraries
-- XPG4 Commands and Utilities V2
-- XPG4 C Language

XPG4 UNIX --  This profile is  a superset of XPG4 Base 95,
and  describes  a   platform  supporting  the   additional
functions  for   applications  portability  for   programs
originally developed on  traditional UNIX and UNIX-derived
systems.  Required components:
-- XPG4  Internationalised   System  Calls  and   Libraries
 Extended
-- XPG4 Commands and Utilities V2
-- XPG4 C Language
-- XPG4 Transport Service (XTI)
-- XPG4 Sockets
-- XPG4 Internationalised Terminal Interfaces

The  XPG4  Internationalized   System  Calls  and  Libraries
(Extended)  component covers  all  of the  base  interfaces,
(e.g.  the  POSIX.1   interfaces,  the  ISO  C  library  and
Multibyte Support Extension  addendum), makes mandatory  all
feature groups (POSIX.2  C-Language Binding, Shared  Memory,
Enhanced Internationalization),  and  adds the  new  feature
group X/OPEN UNIX  covering all of  the new interfaces added
to this  version  of the  X/Open  CAE System Interfaces  and
Headers volume.  The feature groups are small collections of
interfaces found in the System Interfaces and Headers, Issue
4, specification, that are not mandatory for implementations
of the XPG4 Base and XPG4 Base 95 profiles.

To claim  conformance  to a component  or profile, a  vendor
completes a Conformance  Statement Questionaire (CSQ), which
is  then  referred   to  as  a   Conformance  Statement  and
maintained up-to-date on  file at all  times.  There may  be
authorised test suites  to be run  for some components,  but
these are simply  ``Indicators of Conformance''.   The brand
agreement is the  binding commitment to conformance, not the
test suite.  (Test  suites exist for  all XPG4 UNIX  profile
components except the new version of XPG4 Curses.)

If at anytime  anybody discovers that the branded product is
not  behaving  according   to  the  appropriate  X/Open  CAE
specification,  the  vendor  is  obligated  to  correct  the
problem within very  strict time frames or lose the brand on
their  product.   This  has  already  been proven  with  the
largest  of  vendors.   No  one  committing  loudly  in  the
marketplace  to  open  systems  would  want to  be  publicly
announced as in breach of their brand contract.

There  have  been  occasions  when  it would  be  impossible
despite the  existence of a  CAE specification and  branding
programme for any  significant number of  vendors to deliver
products conforming  to  the complete  specification in  any
reasonable  time  frame,  and  a  transitional  or  ``soft''
conformance path was allowed. This is the primary difference
between the XPG4  Base and XPG4  Base 95 profiles,  with the
latter requiring proper conformance to the XPG4 Commands and
Utilities component.

Soft   branding   allows   the   vendor  to   identify   the
specification  to   which   they  are  conforming,   clearly
describing in a  Conformance Statement Questionaire  to what
they conform  and identify  where they do  not yet meet  the
specification, and then conform to their statement.

As  an  example,   Commands  and  Utilities,  Issue  4,  was
published in 1992  as part of  XPG4, with the newly ratified
IEEE POSIX.2 Shell  and Utilities standard (IEEE Std 1003.2-
1992) at  its  core.  The  specification was just  different
enough  from every  vendors'  existing shell  and  utilities
implementations, that no  one could really  claim to conform
to the XPG4  Commands and Utilities component completely and
exactly as it was specified. The transitional ``soft'' brand
was allowed  for  this component  in  this situation.   Hard
branding was required  for the other  components in the XPG4
Base profile.

Some  jokingly  claimed   that  soft  branding  allowed  the
creation of  the  the XPG4  Commands  and Utilities  branded
toaster, whereby a vendor could claim in their CSQ that they
have a toaster  that does exactly none of the specification.
While a fun example of a pathological interpretation of soft
branding,  obviously   no  vendor   survives  long  in   the
marketplace with such  a strategy.  It  does, however, point
out the  importance  of understanding  what  brands are  all
about if you are buying X/Open branded products.  Ask to see
the product  conformance statements,  if you are  comparison
shopping.   Soft  branding   is  sometimes  referred  to  as
``historical''  branding.   Within   three  months  of   the
approval of an  X/Open authorised test  suite, no additional
requests to soft brand are accepted.

In  order  to  clearly  identify  to  purchasers  the  exact
specification  to  which  a  branded  product  conforms,  an
additional attribution, called  a trademark attribution,  is
required when  reference  is made  to  the X/Open brand  and
branded  products  or  to  the  trademark  and  the  product
registration.

The XPG4 profile attributions are:

	     __________________________
	    |Profile Name  Attribution |
	    |__________________________|
	    |XPG4 Base     Base        |
	    |XPG4 Base 95  Base 95     |
	    |XPG4 UNIX     UNIX 95     |
	    |UNIX 93       UNIX 93     |
	    |__________________________|

So  depending  upon  the  profile  to  which  a  system  was
branding, they would  claim:  ``MyProduct, Version M.m is an
X/Open <Attribution> branded product'' If the system branded
to the X/Open  UNIX definition, described  by the XPG4  UNIX
Profile, (whose components are documented in the Single UNIX
Specification), they would  complete a Conformance Statement
and deliver the  appropriate test reports,  and would claim:
``MyProduct,  Version  M.m  is  an  X/Open UNIX  95  branded
product''

The one ``surprise''  here is UNIX  93, which is  an interim
brandable profile.  To  brand this way, a system must (i) be
XPG3 or XPG4  Base branded, (ii)  based on USL/Novell  code,
(iii) pass the  System V Verification Suite (SVVS), and (iv)
commit to full  XPG4 UNIX branding  as quickly as  possible.
This brand is  renewable for existing  product versions, but
no new applications  for this interim brand will be accepted
by X/Open  12 months  after the existence  of the full  XPG4
UNIX  brand  programme,  i.e.  beginning  March  1995.   The
branded system may  not use ``UNIX''  as part of the product
name -- only  in the X/Open  trademark claim.  Products are
allowed to use  ``UNIX'' as part  of the product name if the
vendor has committed  in writing to obtaining full XPG4 UNIX
branding within 24 months, at the time they sign the license
agreement.

This ``UNIX 93''  interim profile is  not a proper  profile,
and is  only  described in  the  X/Open Trade  Mark  License
Agreement. It is  only considered to  be an interim  measure
similar to soft  branding, allowing the marketplace to catch
up to the specification programme.

There were  additional  pre-existing conditions  on  systems
registering to use  the UNIX trademark,  if they are derived
from UNIX System Laboratories (USL) releases that constitute
derivatives of UNIX  System V Release  3.2, and are  adapted
for Intel 80x86  upwards compatible architectures.   Systems
that met  the  above criteria  needed  to demonstrate  their
ability to  run  a particular  set  of binary  applications.
These conditions were already attached to the UNIX trademark
prior to X/Open  becoming exclusive licensor, but X/Open has
worked to remove these conditions.

Use of the Single UNIX Specification and X/Open UNIX Systems
============================================================

With the publication  of the Single  UNIX Specification, and
the roll-out of the X/Open UNIX branding programme, ``UNIX''
as a  product (rather than  a philosophy) has  fundamentally
changed.   There  is  now  a  clear separation  between  the
specification and trademark  licensing organization, and the
commercial organizations providing implementations.  This is
a good thing.

Novell has made  the UNIX trademark  available to X/Open  as
the exclusive licensor.   The only way a system may now call
itself a  ``UNIX''  system is  through  the X/Open  branding
programme.  This is tied to a well-defined specification.

The  Single  UNIX  Specification  was  created to  ease  the
porting  burden  for  applications originally  developed  on
traditional UNIX  and UNIX-like  systems.  X/Open's care  at
integrating it  into  the XPG4  specifications  as a  proper
superset of XPG4 is a fundamentally good thing.  XPG4 itself
is a coherent  well-designed specification for  applications
portability, based  on  key industry  formal standards,  and
providing a  large number of  functional interfaces.  It  is
widely implemented  and used.   Adding the additional  calls
covered by the  X/OPEN UNIX feature  group does not harm the
XPG4 base portability model, and arguably enhances it.

Where    functional    duplication   exists    within    the
specifications, the  recommended way  of writing things  has
been clearly indicated.   This is typically couched in terms
of  extending portability  to,  or remaining  portable  ``to
systems   that   implement    previous   versions   of   the
specification'', i.e. XPG4 Base functionality.

As  always,   application   development  organizations   are
required to  understand  their own  needs, and design  their
portability  model  accordingly.   While  this  is  probably
obvious to most  readers of ;login:,  some of the  sponsors'
marketing teams would  have you believe that the Single UNIX
Specification is the  greatest software development ``tool''
since ...  well,  since sliced  bread.   If an  organization
cares  predominantly  about traditional  UNIX  environments,
then shifting  their  application portability  model to  the
Single UNIX Specification  is likely a  good idea.  It means
they  have   a   well-defined,  supported   and   maintained
specification against  which to  write applications, and  an
X/Open  branding   programme   to  support   their   systems
procurements.   If an  organization  cares about  a  broader
portability base,  including  systems like  DEC's VMS,  then
they may  wish  to stick  with XPG4.  While  it may be  more
limited in  scope,  it is perhaps  implemented on a  broader
base of systems.   (Don't laugh, but  IBM intends to  obtain
the XPG4 Base  95 brand for  MVS by this  September.  Having
worked a little  with the POSIX environment provided on MVS,
their intentions are good, and very realisable.)

As always, development organizations will need to ensure the
programmers understand the portability model, how to use it,
and when and how to break the rules.  Developers should have
copies of the  relevant specifications.  If  an organization
is developing applications  with the intent  of distributing
them on multiple platforms, they will need to understand how
to  organize  their  software  management  and  construction
environments.  The Single  UNIX Specification, as  with XPG4
and POSIX  is  simply the  basis  for a  portability  model.
Development  organizations  still   need  to  manage   their
software development environments.

Those  responsible  for  purchasing or  recommending  system
purchases will need  to understand the  brand programme, and
their ability to request copies of Conformance Statements so
as to compare  potential platforms.  This  becomes essential
if an organization  is willing to accept either XPG4 UNIX or
UNIX   93   systems   for   applications   development   and
distribution.  At  Uniforum  '95 in Dallas,  TX, ten of  the
large traditional UNIX  workstation vendors announced  their
UNIX 93  brands.  No one  has yet branded  to the full  XPG4
UNIX 95 profile.   It will be interesting to see who will be
first.

Lastly, should you need to obtain a copy of the Single UNIX 
Specification, there are a couple of sources.  You can get a
large published paper edition from X/Open directly for about
US$250 (contact: +1 703 876 0044 in the United States and
Canada,  +44 (1) 734 508 311 in Europe).  It has also been 
published by Prentice-Hall in CD-ROM format with several UNIX
and MS-Windows browsers and is accompanied by an introductory
book, ``Go Solo'' (ISBN 0-13-439381-3) for about US$80.
[srw -- Lest anyone think I'm advertising here (as the author
of the introductory book,) ``Go Solo'' was a work done for hire. :-)]



Volume-Number: Volume 35, Number 64


