----------------------------------------------------------------------------
		Introduction to the WKSH Mailing Lists

			Frequent Posting

Updated: June 5, 1993			Author: J. Stephen Pendergrast, Jr.
						pend@usl.com
----------------------------------------------------------------------------

This message will be posted about once per month to the WKSH mailing lists.
It will be updated when needed.

Table of Contents:

1. Purpose of the mailing lists
2. Administration of the lists
3. List of lists, appropriate items to post
4. Disclaimer
5. Etiquette
6. Current circulation size and demographics

-----------------------------------------------------------------------------

1. PURPOSE OF THE MAILING LISTS

The mailing lists described here are set up to help WKSH programmers.
The lists are implemented as mail aliases set up on the UNIX System 
Laboratories, Inc. mail server.  To post an item to any of these lists,
you simply send electronic mail to the alias.  Your mail is then forwarded
to all members of the named list automatically.

2. ADMINISTRATION OF THE LISTS

If you wish to be removed from or added to one or more lists, 
or if you or someone you know wants to be added to one of the lists, 
simply send mail to to the wksh_lists alias with your request enclosed.  
Modification of the list normally takes one business day or less, but 
could take longer if the administrator is on vacation, etc.

3. LIST OF LISTS, APPROPRIATE ITEMS TO POST

There are currently 3 wksh mailing lists.  Here is a list of them, along
with examples of the kind of materials that are considered appropriate to
post:

	wksh@usl.com		Items of general interest to WKSH programmers.
				Example scripts, discussion of WKSH features,
				discussion of know problems and/or workarounds,
				discussion of "new feature" requests, product
				plans, etc.  This list should also be used
				to request formation of new lists.  USL will
				evaluate such requests and has sole discretion
				on whether or not to create such new lists.

	wksh_q@usl.com		Questions and answers about WKSH programming.
				Any member of the list may answer any question.
				Multiple answers are ok too.

				USL WKSH developers monitor this list and will 
				answer questions on a time available basis.

	wksh_lists@usl.com	Administration of the mailing lists.  This
				list does not get forwarded to other members
				of the wksh mailing lists, it goes directly
				to the USL mail alias administrator.  This
				can be used to request removal or addition of
				people to the other lists.  Requests are
				typically honored within 1 business day, but
				sometimes could take longer.

4. DISCLAIMER

UNIX System Laboratories, Inc. (USL) does not necessarily endorse any opinions
posted by its employees or others on these lists.  Advice and answers to
questions posted on these lists are not waranteed by USL for any particular
purpose.  USL is not liable for any damages resulting from the use or
application of statements made by USL employees or others on these lists.

These lists are provided as a communication service by USL without fee,
and as such USL reserves the right to terminate these lists at any time 
for any reason.

USL maintains complete administrative control over these lists, and reserves
the right to deny any particular individual's inclusion in this list for
any reason USL deems appropriate.

Users of these lists are cautioned that a message posted to this list will
reach many people in many different companies and institutions, and thus
any information of a proprietary nature should not be posted, even if there
are nondisclosures between USL and the posting entity.  Messages posted to
these lists are automatically routed to mailing list members without any
review by USL personell or intervention.

5. ETIQUETTE

The same standards of etiquette apply to items posted to these mailing lists
as apply to the USENET.  Consult news.announce.newusers for more information.

USL reserves the right to remove flagrant etiquette violators from the
lists at any time.  Such removal is at the sole discretion of USL and
the administrators of these mailing lists.

6. CURRENT CIRCULATION SIZE AND DEMOGRAPHICS

The number of individuals receiving the list at this moment in time
is estimated at 47.  It is not possible to get an exact number, since
some members of the mailing list are themselves aliases routed to multiple
people at certain companies and institutions.  I request that occasionally
the administrators of these remote aliases send me updated counts so I
can maintain an accurate estimate.

Of the 47 individuals, 8 are employees of UNIX System Laboratories, Inc., 
and 3 are employees of Univel, Inc.  24 of the subscribers are commercial
(.COM), 3 are educational (.EDU).  5 subscribers appear to be European, 
one Canadian, and the rest appear to be based in the USA.  25 distinct
companies/institutions appear on the list.

<END-OF-REPORT>

-------------------------------------------------------------------------------
			WKSH Frequently Asked Questions

Updated: May 27, 1993	   	    Compiled By: J. Stephen Pendergrast, Jr.
                                                 UNIX System Laboratories, Inc.
-------------------------------------------------------------------------------

Table of Contents:

1.  What is WKSH?
2.  Why another GUI tool?
3.  Availability of WKSH Source Code
4.  Availability of WKSH Binaries
5.  Availability of WKSH Training
6.  What is the History of WKSH?
7.  What Version of KSH is WKSH Based On?
8.  What Versions of X/Motif/OPEN LOOK/MOOLIT are supported?
9.  What about performance?
10. How much easier is it to write applications in WKSH as opposed to C?
11. Is there a GUI Builder for WKSH?
12. Does WKSH run on DOS? Window 3.1?  Windows NT?
13. If I write an OPEN LOOK program using WKSH, will that program
    work under Motif?  Vice versa?  What the heck is MOOLIT?
-------------------------------------------------------------------------------

1. What is WKSH?

Windowing Korn Shell (WKSH) is a commercial product written by UNIX
System Laboratories, Inc. which extends the standard Korn Shell,
allowing it to create and manage X Windows graphical objects.
WKSH supports the Motif, OPEN LOOK, and MOOLIT widget sets.

WKSH contains new built-in commands that interface to the Xt Intrinsics
layer of X Windows.  About 30 of the Xt Intrinsics commands are provided.
Some convenience functions are also provided from Motif, OPEN LOOK, and
MOOLIT.

WKSH also contains new commands that allow Dynamic Shared Object files
to be attached at run time.  The C functions compiled into these shared
object files can be called from WKSH, or registered as built-ins.  This
feature of WKSH is not technically related to graphics, but is one of
WKSH's most useful features.

2. Why another GUI tool?

WKSH fills an important niche among GUI tools because there are
hundreds of thousands of shell programmers in the world.  Many GUI
tools similar to WKSH invent a new language.  Many people don't want
to learn a new language, they are comfortable with Shell programming.
WKSH gives these people a way to *incrementally* step into the world
of X programming without using C or learning a new language.

3. Availability of source code

WKSH is a commercial product.  It is not freeware or shareware.
The source code is distributed by UNIX System Laboratories, Inc.
using the "toolchest" mechanism.  You can get more information on
the "toolchest" by writing to tcadmin@usl.com.  You can also
call USL at 1-800-828-UNIX.

WKSH source code costs $12,500.  That includes 6 months of telephone
support and full rights to distribute binaries.  Binary royalties are
$5 for limited use (1-2 user) systems and $35 for unlimited use
(multi-user or server) systems.  Substantial source code discounts are 
available for companies that already own vanilla KSH source code.
Binary royalty discounts are available based on volume.  Support after
the initial 6 month period is available for $5,000 per year.

4. Availability of binaries

WKSH binaries are bundled with most vendors versions of UNIX SVR4.2,
such as UnixWare.  So, if you have UnixWare you already have WKSH.

Information Foundation, Inc. also distributes a port of UNIX SVR4.2
in which they bundle WKSH, their number is 1-800-GET-UNIX.  Consensys
Corporation's version of SVR4.2 has an add-on package for WKSH, their
number is (416) 940-2900.

There are binary distributors for other UNIX platforms besides
SVR4.2 on Intel.  Here is the current list:

	PLATFORM(S)		                DISTRIBUTOR
--------------------------------  ----------------------------------------
SunOs 4.1.* w/ OPEN WINDOWS 3.*	  ACACIA Computer Agency,
Solaris 2.*                       (908) 561-0105
SCO ODT (Motif)

IBM RS/6000 AIX 3.2, Motif        Computer Aid, 1-800-444-WKSH
--------------------------------------------------------------------------

We are seeking an HP/UX distributor now.  USL has already done the
HP/UX port, we just need somebody to ship binaries and support them
at this point.

5.  Availability of WKSH Training

Training courses for both Motif and OPEN LOOK have been created by
UNIX System Laboratories, Inc.  Currently, these courses are only
taught on-site, i.e. USL will send a trainer to your company site
(for a fee of course).  Call 1-800-828-UNIX for details.  

These training courses are currently being licensed to a number of 
companies who will be setting up nationwide training, but none of 
these is currently available.  We expect some availability by the 
third quarter of 1993.

Your company can also license these training materials.  Call the
USL 800 number for details.

6.  What is the History of WKSH?

WKSH was initially proposed within USL in March, 1991 as a way
to quickly produce X Windows administration dialogs.  A prototype
was developed at that time.  The first source code release, WKSH R1.0
became available in April, 1992.  In June, 1992, the UNIX SVR4.2
project picked up WKSH as one of their source code components.  In
August 1992 the UnixWare product team decided to bundle WKSH on
every UnixWare unit shipped.  In November 1992 the second release
became available, WKSH R1.1.  

The KornShell source on which WKSH was based comes from AT&T Bell
Laboratories and was primarily written by David Korn.  The graphical
extensions were written by J. Stephen Pendergrast, Jr. of USL.  The
dynamic shared object and C access routines were written by Larry
Feigen of USL (he has since moved to Univel).

WKSH has been ported to over 12 UNIX hardware/software platforms 
by companies who have bought the source from USL, including
RS/6000 AIX, SPARC, HP/UX, SGI IRIS, Ultrix on MIPS, Pyramid, Motorolla 
running SVR3.2, and others.  Averaging porting time is reportedly about
1 day.  It is in use by a number of major corporations for X Windows 
application development.

7.  What Version of KSH is WKSH Based On?

WKSH R1.1 is based on KSH88-G.  We'll be revving up to KSH88-I in
3Q93.

8.  What Versions of X/Motif/OPEN LOOK/MOOLIT are supported?

Call the commercial distributors above for current version information.

WKSH source code customers have reported successfully using 
WKSH with X11R4 and X11R5, OPEN LOOK versions 4, 4i (USL numbering scheme), 
OPEN WINDOWS versions 3.0 and 3.1, Motif versions 1.1.2, 1.1.4, and 1.2, and
MOOLIT version 1.0.

9.  What about performance?

Ad hoc studies show that well written WKSH scripts incur a run-time
penalty of only 15% to 30% compared to a well written C program with
equivalent functionality.  This percentage hit is typically not
detectable.  This figure is for scripts that have *not* been optimized
by using attachable C libraries.  For such applications, performance
within 5% of an equivalent C program can typically be achieved.

There is also a start-up time penalty of about 1 CPU second on a
386/25 class machine.  Again, this is a penalty that most users will
not detect since on this class machine X Windows application startup
time is typically in the 3 to 6 second range anyway.  On more
powerful machines such as SPARC, PA/RISC, or RS/6000 the startup delay 
is even less significant.

10. Can I "compile" WKSH into C?

Not right now.  We are investigating stuff like this, but it is not
as easy as you might think.  There are technical issues that make it
quite difficult to compile shell scripts in general.  There are some
commercial Bourne shell compilers on the market, but if you check them
out you will see that they have severe restrictions on the kinds of
programs you can compile.  For example, they don't allow back-quoted
expressions.  As any serious shell programmer knows, it is rare for
a "real" shell script to contain no backquoted expressions.  They also
don't often handle functions, again, this is a crippling limitation.

Note that because performance is so close to a C program already, there
is not really much need to compile WKSH scripts.  I know people have
a hard time believing this, but it is true.

Another reason why some people want to "compile" their WKSH scripts 
besides performance is to "hide" their program from unwanted eyes.
This can already be accomplished in WKSH by other means.  See the
manual pages for "wkcrypt" and "crypteval".

10. How much easier is it to write applications in WKSH as opposed to C?

Ad hoc studies place the productivity gain at approximately a factor
of 10.  The number of lines of code required for a given task typically
falls by a factor of 4.  The fact that there is no compile time, and the
fact that debugging is easier (the application never "dumps core"),
combine to produce the factor of 10 overall productivity gain.

I have seen numerous cases where novice X Windows programmers using WKSH
outperform X Windows veterans with years of experience writing in C.
In the hands of the X Windows veteran, WKSH can produce  astonishing 
results.  Applications that previously required months require only a week,
and perform indistinguishably from C programs, can be customized in the field
for a given customer in less than an hour, etc.

11. Can I use WKSH without learning X Windows concepts?

No, WKSH maps directly to the Xt Intrinsics layer of X Windows, it's
a 1 to 1 correspondence.  But, I might mention that WKSH provides a far 
easier environment to learn X Windows programming than using the
C interface.  WKSH strips away most of grunge work and allows the
new programmer to focus on the important concepts.  I know several
people who starting writing useful graphical programs within *hours*
of picking up the WKSH manual.  Some of these people had previously
given up after trying to learn the C interface for *days*.  The WKSH
training courses mentioned earlier cover as much X Windows programming
concepts material in 2 days as are covered in 8 days of C language
X Windows training.  Because WKSH builtins map 1 to 1 with Xt Intrinsics
functions, the WKSH novice is learning a good deal of what a C language
X programmer needs to know, but much faster and with more immediate
gratification.

11. Is there a GUI Builder for WKSH?

At this writing, I have some prototype stuff that allows a programmer
using the ICS Builder Accessory tool for UnixWare create WKSH scripts.
What it does is translate the UIL-like format that Builder Accessory
writes into WKSH.  Thus, you can write your callbacks in shell and build
the screen with the tool.

A similar strategy can be implemented for Sun's /dev/guide product, or
so I'm told.  Also, I'm told the same will work for UIMX.  These translators
are not rocket science, they are little 50 line awk scripts.  I am
investigating providing such translators for these commercial GUI builders.

I'll make one more point though (and most people don't believe me):
I find all these GUI builders to be harder to use than just programming
directly.  The reason people think they need GUI builders is because
they don't know how to use the widgets properly.  Using the correct
widgets automatically results in correct screen layout in 90% of the cases.
There are many examples were it is far easier to use a program than a
GUI builder.  My favorite is the calculator program.  A calculator has
two or three dozen buttons.  Using a GUI builder, I have to painstakingly
create each of these individually.  Using a language, I'll use a 
"for" loop and will be done long before the GUI builder programmer.
Another claim from the GUI builder people is that "you don't need to
know X" to use it.  Believe me, once you start writing the callbacks you'll
see how false this is.  You will also see the limitations of the GUI builders
very clearly when you try to write a program that can be internationalized.
Finally, let me point out that only about 20% of a typical X program is 
code to produce static screen layouts, the rest is the callbacks, GUI 
builders optimize the smallest part of the program.  True, some have
features to help out with the callbacks, usually they invent a whole new
language for you to learn.  You get to pay several thousand dollars *per
seat* for the honor of having to learn a language that is inferior to
WKSH 8-).

But, sigh, people still think they need GUI builders, and I recognize
that and will get some kind of support for them in a near future release.

12. Does WKSH run on DOS?  Windows 3.1?  Windows NT?

No.  MKS toolkit ksh is *not* based on the USL vanilla ksh code, it
is a complete reverse-engineer.  WKSH would not easily port to a
non-posix environment like DOS or Windows 3.1.

A Windows NT port (using POSIX mode) is theoretically possible, but 
would likely be a chore, and because of the wonderful way 
Microsoft did their microkernel you wouldn't be able to use it to 
write a WIN32 application.

13. If I write an OPEN LOOK program using WKSH, will that program
    work under Motif?  Vice versa?  What the heck is MOOLIT?

WKSH does not address the problem of look-and-feel independence.
WKSH gives you direct access to Xt Intrinsics, when you write the
program you must choose your widget set.

MOOLIT is an extended version of OPEN LOOK that allows a run-time
switchable *look and feel* of either OPEN LOOK or Motif.  Be careful
here: the programming interface, the widgets, etc., are all OPEN LOOK
like.  The *look and feel* is switchable.  MOOLIT will not accept a
Motif program and let it look like OPEN LOOK, only the other way around.
MOOLIT is shipped with SVR4.2 (and hence UnixWare).

Of course, (because of COSE) Motif is now both the defacto and dejur 
standard, rendering this point more or less irrelevant.

<END-OF-FAQ>

