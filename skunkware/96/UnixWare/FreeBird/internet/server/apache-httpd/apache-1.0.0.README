Apache httpd version 1.0.0
---------------------------

This is the Apache httpd. The package contains a compiled up
binary suitable for UnixWare 2.x (FYI - it was compiled 
up on a UnixWare 2.03 machine).

This package will install a http daemon onto a UnixWare machine.  This
will give the machine the ability to act as a http server (see the Mosaic
package for a suitable client).

A test page is also installed. The support binaries (htpasswd etc) are in 
	apache-1.0.0.supp.bins.tar.Z

The package will install the httpd as a daemon by installing
and starting /etc/rc2.d/S81httpd.

To install the package
----------------------

i)	tar -xvf apache*.tar
ii)	pkgadd -d`pwd` apache


To remove the package
---------------------

i)	pkgrm apache


Configuration Details
---------------------

Here is some info to help you set up the httpd daemon.

After install, the httpd executable is placed in /opt/bin.

The config files are placed in /opt/lib/httpd/conf

IMPORTANT NOTE:

The config files need to be modified for your site, minimally
the file /opt/lib/httpd/conf/httpd.conf needs to have a suitable
entries added for:

ServerAdmin	webmaster@your.domain
ServerName 	your.server.domain

Common Gateway Interface (CGI) scripts can be set up
including imagemaps.

The html documents are put into /opt/lib/httpd/htdocs
When a user specifies your site they get the index.html file
from the directory they specify.

To setup a default home page insert a file index.html into
the top level directory of /opt/lib/httpd/htdocs. Note if
you want to relocate the htdocs directory change DocumentRoot in
srm.conf.


Do install some simple demo docs, take the WWWdemopages.tar.Z
and unwind the archive in the htdocs directory.
---------------------------------------------------------------------

(This part of this doc taken from www.uux.org - with some supplemental
notes added ...)

The Apache HTTPD server, which is derived from the NCSA HTTPD 1.3
server, has a feature which allows you to have web pages for more than
one domain on your system. For example, this server is actually running
on sailor.dpcsys.com even though the URL says it is  www.uux.org. Each
domain can have their own home page, so http://www.dpcsys.com and
http://www.uux.org while both pointing at the same physical machine will
return different documents.

This is actually quite easy to configure with UnixWare, it just isn't
documented anywhere. Until now.

The first step is picking up a copy of the Apache server. This compiled
cleanly for me on UW 2.01.  Set it up per the documentation for NCSA
HTTPD 1.3. Then refer back to the Apache feature list for details on
enabling virtual hosts.

Aside from compiling with -DVIRTUAL_HOST all you really need to do is
add an appropriate < Virtual Host> section to your httpd.conf. Here is
ours:

(AJ - Note as of apache-0.8 the -DVIRTUAL host seems to be defined by
default)

< VirtualHost www.uux.org>
ServerAdmin     < webmaster@uux.org>
DocumentRoot    /home/www/uux
ServerName      www.uux.org
ErrorLog        logs/uux/error_log
TransferLog     logs/uux/access_log


All of your pages for a given virtual host need to be placed under it's
DocumentRoot, most other directories such as cgi-bin/ and icons/ are
shared.

Now comes the harder (but not hard) part. The virtual host must have an
entry in the DNS with a valid IP number under your site's control. And
you need an interface that responds to this IP address. The trick is to
fool a PPP interface into routing packets aimed at it back to your
ethernet card.

(note the following is for UnixWare 1.x and 2.0x - see later for 2.1)

First, to create a spare PPP interface, add a line like this to
/etc/confnet.d/inet/interface:

www:0:165.90.143.56:/dev/ppp:165.90.143.3 netmask 255.255.255.0:add_ppp:

The interface prefix isn't particularily important, I named it www since
we're going to be using this as web hosts. The second field is the unit
number, from 0-9. The third field is the IP address assigned to this
interface. The fourth field says this interface uses /dev/ppp and the
fifth field includes the paramaters we want to pass to ifconfig. The
second IP address is the address of your  real interface to the 'Net.

[Note- to restart the interface as root, do:
	sh /etc/inet/rc.restart
To see if the interface came up then do:
	ifconfig -a
You should see a line for www0 
SMC8K0: flags=23<UP,BROADCAST,NOTRAILERS>
        inet 164.99.11.176 netmask ffffffc0 broadcast 164.99.11.191
www0: flags=11<UP,POINTOPOINT>
        inet 164.99.11.177 --> 164.99.11.176 netmask ffffffc0
lo0: flags=49<UP,LOOPBACK,RUNNING>
        inet 127.0.0.1 netmask ff000000     ]

After adding lines for all of your virtual hosts, you will need to get
the world to recognize them. To do this we will preload the arp cache
with entries that point from the virtual interfaces to your ethernet
card's hardware address.

I added an entry to /etc/inet/config that looks like this: 

2:/usr/sbin/arp::y:/etc/inet/arptable:-f /etc/inet/arptable:

Note that I'm running it early. You want this entry in place before the
PPP interfaces are brought up. You will need to create the file
/etc/inet/arptable which consists of entries listing the hostname or IP
address you are faking followed by the hardware address of your ethernet
card.  Here's ours:

www.uux.org 0:0:c0:21:9e:27 pub

[Note; to found out your macaddr look in /etc/inet/macaddr,
You can try this by hand initially by creating the file
/etc/inet/arptable and then:
	arp -f /etc/inet/arptable ;
doing an arp -a should so the permanent published (in this example
i added lechlade.ukb.novell.com
# arp -a
yeti.ukb.novell.com (164.99.11.168) at 0:80:5f:48:52:5b
lechlade.ukb.novell.com (164.99.11.177) at 0:0:c0:fb:b6:68 permanent published
usg.ukb.novell.com (164.99.11.131) at 0:0:1b:50:ce:55  
]

Make sure you include the "pub" our your system won't announce the entry. 

That's it. Reboot and you will have a working virtual interface.

(for 2.01)

UnixWare 2.1 Configuration
=============================
In 2.1 either use the loopback devices or use
a new feature of ifconfig - the alias
command, and use this as

        ifconfig interface alias ip-addr

        ifconfig SMC8K0 alias 193.82.115.24

With this ifconfig alias I don't think that the above arp is needed.

To use the loopback devices edit /etc/confnet.d/inet/interface and
add devices as follows (example 3 added)

lo:1:193.99.11.1:/dev/loop::add_loop:
lo:2:193.99.11.2:/dev/loop::add_loop:
lo:3:193.99.11.3:/dev/loop::add_loop: 

[ Note, no need to reboot if you use the Notes above ]

Dan Busarow
dan@dpcsys.com 

--
Andrew Josey	 			#include <std/disclaimer.h>
"If you want truly to understand something, try to change it." - Kurt Lewin
