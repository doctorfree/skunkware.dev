
This file contains a article on how to setup bootp on UnixWare2.

ALSO SEE internet/systools/bootptest.tar.Z for a tool to test bootp on UnixWare.

ALSO SEE internet/server/bootpd for syslogd instrumented versions of in.bootpd

For setting up syslogd see systools/syslog*

One thing to note is that the bootptab format has changed between 
UnixWare 1.x and UnixWare 2.x - see the man page for bootptab and
also see the Dynatext in UW2.x which has a good section on setting
up a bootp server.


-------------------------------------------------------

The bootp server comes as standard with UnixWare.

Just edit the file /etc/bootptab - the database for the bootp server.
This contains an example.


Check your /etc/inet/inetd.conf file:

bootps	dgram	udp	wait	root	/usr/sbin/in.bootpd		in.bootpd

Check you have entries in /etc/services (should be there by default)
/etc/inet/services:bootps		67/udp		bootp


If you're TCP is wrapped, 

Edit /etc/inet/hosts.allow
in.bootpd: ALL

Edit /etc/inet/inetd.conf
bootps	dgram	udp	wait	root	/usr/sbin/wrapd		in.bootpd

Remember to restart inetd ;
	ps -ef|grep inetd
	kill -HUP {PID}
where {PID} is replaced with the process id of the inetd process


# /etc/inet/bootptab (sample for UW2)
#  
# For UW2 ; cd /etc; ln -s /etc/inet/bootptab /etc/bootptab
#
# /etc/bootptab: database for bootp server (/etc/bootpd)
# Blank lines and lines beginning with '#' are ignored.
#
# Legend:
#
#	first field -- hostname
#			(may be full domain name and probably should be)
#
#	hd -- home directory
#	bf -- bootfile
#	cs -- cookie servers
#	ds -- domain name servers
#	gw -- gateways
#	ha -- hardware address
#	ht -- hardware type
#	im -- impress servers
#	ip -- host IP address
#	lg -- log servers
#	lp -- LPR servers
#	ns -- IEN-116 name servers
#	rl -- resource location protocol servers
#	sm -- subnet mask
#	tc -- template host (points to similar host entry)
#	to -- time offset (seconds)
#	ts -- time servers
#	sa -- network install server (UW2 extension)


# First, we define a global entry which specifies the 
# stuff every host uses.

.global.def:\
	:sm=255.255.255.192:\
	:hd=/usr/boot:bf=null:\
	:ts=192.9.11.131:\
	:sa=192.9.11.168:\
	:to=auto:ht=ethernet:

# Next, we can define different master entries for each subnet. . .
# setup gateways for each subnet

.subnet1:tc=.global.def:ds=192.9.11.131:gw=192.9.11.60:
..subnet1.def:tc=.subnet1:ip=192.9.11.0:

.subnet2:tc=.global.def:ds=192.9.11.131:gw=192.9.11.126:
..subnet2.def:tc=.subnet2:ip=192.9.11.64:

.subnet3:tc=.global.def:ds=192.9.11.131 192.9.11.132:gw=192.9.11.190:
..subnet3.def:tc=.subnet3:ip=192.9.11.128:

.subnet4:tc=.global.def:ds=192.9.11.131 192.9.11.132:gw=192.9.11.254:
..subnet4.def:tc=.subnet4:ip=192.9.11.192:


#
# We should be able to use as many levels of indirection as desired.  Use
# your imagination. . .
#


# entries have the following format:

#hostname:tc=xxx:ht=xxx:ha=xxx:ip=xxx:
#for example
#carnegie:tc=.subnet13.dummy:ha=7FF8100000AF:ip=128.2.11.1:

## --------------Subnet 1
alpha:tc=.subnet1:ha=0080c7b4737b:ip=192.9.11.24:
beta:tc=.subnet1:ha=00001b276b17:ip=192.9.11.1:
gamma:tc=.subnet1:ha=00001b278cd2:ip=192.9.11.2:

## --------------Subnet 2
epsilon:tc=.subnet2:ha=0080c7113200:ip=192.9.11.66:
theta:tc=.subnet2:ha=00001b27daa5:ip=192.9.11.69:


## --------------Subnet 3
apollo:tc=.subnet3:ha=00001b27f9ea:ip=192.9.11.182:
mars:tc=.subnet3:ha=00805FF8EE85:ip=192.9.11.183:
zeus:tc=.subnet3:ha=00001b19a599:ip=192.9.11.184:

## --------------Subnet 4
voyager:tc=.subnet4:ha=00001b19a005:ip=192.9.11.184:

