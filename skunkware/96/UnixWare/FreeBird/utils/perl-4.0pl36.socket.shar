#--------------------------------CUT HERE-------------------------------------
#! /bin/sh
#
# This is a shell archive.  Save this into a file, edit it
# and delete all lines above this comment.  Then give this
# file to sh by executing the command "sh file".  The files
# will be extracted into the current directory owned by
# you with default permissions.
#
# The files contained herein are:
#
# -rw-r--r--   1 root     sys         1401 Dec  5 10:44 netconfig.ph
# -rw-r--r--   1 root     sys         4158 Dec  5 10:44 socket.ph
# -rw-r--r--   1 root     sys         1130 Dec  5 10:44 sock.client
# -rw-r--r--   1 root     sys          928 Dec  5 10:44 sock.server
#
echo 'x - netconfig.ph'
if test -f netconfig.ph; then echo 'shar: not overwriting netconfig.ph'; else
sed 's/^X//' << '________This_Is_The_END________' > netconfig.ph
Xif (!defined &_NET_NETCONFIG_H) {
X    eval 'sub _NET_NETCONFIG_H {1;}';
X    eval 'sub NETCONFIG {"/etc/netconfig";}';
X    eval 'sub NETPATH {"NETPATH";}';
X    eval 'sub NC_TPI_CLTS {1;}';
X    eval 'sub NC_TPI_COTS {2;}';
X    eval 'sub NC_TPI_COTS_ORD {3;}';
X    eval 'sub NC_TPI_RAW {4;}';
X    eval 'sub NC_NOFLAG {00;}';
X    eval 'sub NC_VISIBLE {01;}';
X    eval 'sub NC_BROADCAST {02;}';
X    eval 'sub NC_NOPROTOFMLY {"-";}';
X    eval 'sub NC_LOOPBACK {"loopback";}';
X    eval 'sub NC_INET {"inet";}';
X    eval 'sub NC_IMPLINK {"implink";}';
X    eval 'sub NC_PUP {"pup";}';
X    eval 'sub NC_CHAOS {"chaos";}';
X    eval 'sub NC_NS {"ns";}';
X    eval 'sub NC_NBS {"nbs";}';
X    eval 'sub NC_ECMA {"ecma";}';
X    eval 'sub NC_DATAKIT {"datakit";}';
X    eval 'sub NC_CCITT {"ccitt";}';
X    eval 'sub NC_SNA {"sna";}';
X    eval 'sub NC_DECNET {"decnet";}';
X    eval 'sub NC_DLI {"dli";}';
X    eval 'sub NC_LAT {"lat";}';
X    eval 'sub NC_HYLINK {"hylink";}';
X    eval 'sub NC_APPLETALK {"appletalk";}';
X    eval 'sub NC_NIT {"nit";}';
X    eval 'sub NC_IEEE802 {"ieee802";}';
X    eval 'sub NC_OSI {"osi";}';
X    eval 'sub NC_X25 {"x25";}';
X    eval 'sub NC_OSINET {"osinet";}';
X    eval 'sub NC_GOSIP {"gosip";}';
X    eval 'sub NC_NOPROTO {"-";}';
X    eval 'sub NC_TCP {"tcp";}';
X    eval 'sub NC_UDP {"udp";}';
X    eval 'sub NC_ICMP {"icmp";}';
X    if (defined( &__STDC__)) {
X    }
X    else {
X    }
X}
X1;
________This_Is_The_END________
if test `wc -l < netconfig.ph` -ne 44 ; then
	echo 'shar: netconfig.ph was damaged during transit (should have been 44  bytes)'
fi
fi		; : end of overwriting check
echo 'x - socket.ph'
if test -f socket.ph; then echo 'shar: not overwriting socket.ph'; else
sed 's/^X//' << '________This_Is_The_END________' > socket.ph
Xif (!defined &_NET_TRANSPORT_SOCKET_H) {
X    eval 'sub _NET_TRANSPORT_SOCKET_H {1;}';
X    if (defined &_KERNEL_HEADERS) {
X	if (!defined &_UTIL_TYPES_H) {
X	    require 'util/types.ph';
X	}
X    }
X    elsif (defined( &_KERNEL)) {
X	require 'sys/types.ph';
X    }
X    else {
X	require 'sys/netconfig.ph';
X    }
X    if (!defined &NC_TPI_CLTS) {
X	eval 'sub NC_TPI_CLTS {1;}';
X	eval 'sub NC_TPI_COTS {2;}';
X	eval 'sub NC_TPI_COTS_ORD {3;}';
X	eval 'sub NC_TPI_RAW {4;}';
X    }
X    eval 'sub SOCK_STREAM { &NC_TPI_COTS;}';
X    eval 'sub SOCK_DGRAM { &NC_TPI_CLTS;}';
X    eval 'sub SOCK_RAW { &NC_TPI_RAW;}';
X    eval 'sub SOCK_RDM {5;}';
X    eval 'sub SOCK_SEQPACKET {6;}';
X    eval 'sub SO_DEBUG {0x0001;}';
X    eval 'sub SO_ACCEPTCONN {0x0002;}';
X    eval 'sub SO_REUSEADDR {0x0004;}';
X    eval 'sub SO_KEEPALIVE {0x0008;}';
X    eval 'sub SO_DONTROUTE {0x0010;}';
X    eval 'sub SO_BROADCAST {0x0020;}';
X    eval 'sub SO_USELOOPBACK {0x0040;}';
X    eval 'sub SO_LINGER {0x0080;}';
X    eval 'sub SO_OOBINLINE {0x0100;}';
X    eval 'sub SO_ORDREL {0x0200;}';
X    eval 'sub SO_IMASOCKET {0x0400;}';
X    eval 'sub SO_DONTLINGER {(~ &SO_LINGER);}';
X    eval 'sub SO_SNDBUF {0x1001;}';
X    eval 'sub SO_RCVBUF {0x1002;}';
X    eval 'sub SO_SNDLOWAT {0x1003;}';
X    eval 'sub SO_RCVLOWAT {0x1004;}';
X    eval 'sub SO_SNDTIMEO {0x1005;}';
X    eval 'sub SO_RCVTIMEO {0x1006;}';
X    eval 'sub SO_ERROR {0x1007;}';
X    eval 'sub SO_TYPE {0x1008;}';
X    eval 'sub SO_PROTOTYPE {0x1009;}';
X    eval 'sub SOL_SOCKET {0xffff;}';
X    eval 'sub AF_UNSPEC {0;}';
X    eval 'sub AF_UNIX {1;}';
X    eval 'sub AF_INET {2;}';
X    eval 'sub AF_IMPLINK {3;}';
X    eval 'sub AF_PUP {4;}';
X    eval 'sub AF_CHAOS {5;}';
X    eval 'sub AF_NS {6;}';
X    eval 'sub AF_NBS {7;}';
X    eval 'sub AF_ECMA {8;}';
X    eval 'sub AF_DATAKIT {9;}';
X    eval 'sub AF_CCITT {10;}';
X    eval 'sub AF_SNA {11;}';
X    eval 'sub AF_DECnet {12;}';
X    eval 'sub AF_DLI {13;}';
X    eval 'sub AF_LAT {14;}';
X    eval 'sub AF_HYLINK {15;}';
X    eval 'sub AF_APPLETALK {16;}';
X    eval 'sub AF_NIT {17;}';
X    eval 'sub AF_802 {18;}';
X    eval 'sub AF_OSI {19;}';
X    eval 'sub AF_X25 {20;}';
X    eval 'sub AF_OSINET {21;}';
X    eval 'sub AF_GOSIP {22;}';
X    eval 'sub AF_MAX {22;}';
X    eval 'sub PF_UNSPEC { &AF_UNSPEC;}';
X    eval 'sub PF_UNIX { &AF_UNIX;}';
X    eval 'sub PF_INET { &AF_INET;}';
X    eval 'sub PF_IMPLINK { &AF_IMPLINK;}';
X    eval 'sub PF_PUP { &AF_PUP;}';
X    eval 'sub PF_CHAOS { &AF_CHAOS;}';
X    eval 'sub PF_NS { &AF_NS;}';
X    eval 'sub PF_NBS { &AF_NBS;}';
X    eval 'sub PF_ECMA { &AF_ECMA;}';
X    eval 'sub PF_DATAKIT { &AF_DATAKIT;}';
X    eval 'sub PF_CCITT { &AF_CCITT;}';
X    eval 'sub PF_SNA { &AF_SNA;}';
X    eval 'sub PF_DECnet { &AF_DECnet;}';
X    eval 'sub PF_DLI { &AF_DLI;}';
X    eval 'sub PF_LAT { &AF_LAT;}';
X    eval 'sub PF_HYLINK { &AF_HYLINK;}';
X    eval 'sub PF_APPLETALK { &AF_APPLETALK;}';
X    eval 'sub PF_NIT { &AF_NIT;}';
X    eval 'sub PF_802 { &AF_802;}';
X    eval 'sub PF_OSI { &AF_OSI;}';
X    eval 'sub PF_X25 { &AF_X25;}';
X    eval 'sub PF_OSINET { &AF_OSINET;}';
X    eval 'sub PF_GOSIP { &AF_GOSIP;}';
X    eval 'sub PF_MAX { &AF_MAX;}';
X    eval 'sub SOMAXCONN {5;}';
X    eval 'sub MSG_OOB {0x1;}';
X    eval 'sub MSG_PEEK {0x2;}';
X    eval 'sub MSG_DONTROUTE {0x4;}';
X    eval 'sub MSG_MAXIOVLEN {16;}';
X    eval 'sub OPTLEN {
X        local($x) = @_;
X        eval "(((($x) + $sizeof{\'long\'} - 1) / $sizeof{\'long\'}) * $sizeof{\'long\'})";
X    }';
X    eval 'sub OPTVAL {
X        local($opt) = @_;
X        eval "(($opt + 1))";
X    }';
X	eval 'sub SOCKETSYS {88;}';
X    eval 'sub SO_ACCEPT {1;}';
X    eval 'sub SO_BIND {2;}';
X    eval 'sub SO_CONNECT {3;}';
X    eval 'sub SO_GETPEERNAME {4;}';
X    eval 'sub SO_GETSOCKNAME {5;}';
X    eval 'sub SO_GETSOCKOPT {6;}';
X    eval 'sub SO_LISTEN {7;}';
X    eval 'sub SO_RECV {8;}';
X    eval 'sub SO_RECVFROM {9;}';
X    eval 'sub SO_SEND {10;}';
X    eval 'sub SO_SENDTO {11;}';
X    eval 'sub SO_SETSOCKOPT {12;}';
X    eval 'sub SO_SHUTDOWN {13;}';
X    eval 'sub SO_SOCKET {14;}';
X    eval 'sub SO_SOCKPOLL {15;}';
X    eval 'sub SO_GETIPDOMAIN {16;}';
X    eval 'sub SO_SETIPDOMAIN {17;}';
X    eval 'sub SO_ADJTIME {18;}';
X}
X1;
________This_Is_The_END________
if test `wc -l < socket.ph` -ne 128 ; then
	echo 'shar: socket.ph was damaged during transit (should have been 128  bytes)'
fi
fi		; : end of overwriting check
echo 'x - sock.client'
if test -f sock.client; then echo 'shar: not overwriting sock.client'; else
sed 's/^X//' << '________This_Is_The_END________' > sock.client
X#!/usr/bin/perl
X	       ($them,$port) = @ARGV;
X	       $port = 2345 unless $port;
X	       $them = 'localhost' unless $them;
X
X	       $SIG{'INT'} = 'dokill';
X	       sub dokill { kill 9,$child if $child; }
X
X	       require 'sys/socket.ph';
X
X	       $sockaddr = 'S n	a4 x8';
X	       chop($hostname =	`hostname`);
X
X	       ($name, $aliases, $proto) = getprotobyname('tcp');
X	       ($name, $aliases, $port)	= getservbyname($port, 'tcp')
X		    unless $port =~ /^\d+$/;
X	       ($name, $aliases, $type,	$len, $thisaddr) =
X				   gethostbyname($hostname);
X	       ($name, $aliases, $type,	$len, $thataddr) = gethostbyname($them);
X
X	       $this = pack($sockaddr, &AF_INET, 0, $thisaddr);
X	       $that = pack($sockaddr, &AF_INET, $port,	$thataddr);
X
X	       socket(S, &PF_INET, &SOCK_STREAM, $proto) || die	"socket: $!";
X	       bind(S, $this) || die "bind: $!";
X	       connect(S, $that) || die	"connect: $!";
X
X	       select(S); $| = 1; select(stdout);
X
X	       if ($child = fork) {
X		    while (<>) {
X			 print S;
X		    }
X		    sleep 3;
X
X
X		    do dokill();
X	       }
X	       else {
X		    while (<S>)	{
X			 print;
X		    }
X	       }
X
________This_Is_The_END________
if test `wc -l < sock.client` -ne 44 ; then
	echo 'shar: sock.client was damaged during transit (should have been 44  bytes)'
fi
fi		; : end of overwriting check
echo 'x - sock.server'
if test -f sock.server; then echo 'shar: not overwriting sock.server'; else
sed 's/^X//' << '________This_Is_The_END________' > sock.server
X#!/usr/bin/perl
X	       ($port) = @ARGV;
X	       $port = 2345 unless $port;
X
X	       require 'sys/socket.ph';
X
X	       $sockaddr = 'S n	a4 x8';
X
X	       ($name, $aliases, $proto) = getprotobyname('tcp');
X	       ($name, $aliases, $port)	= getservbyname($port, 'tcp')
X		    unless $port =~ /^\d+$/;
X
X	       $this = pack($sockaddr, &AF_INET, $port,	"\0\0\0\0");
X
X	       select(NS); $| =	1; select(stdout);
X
X	       socket(S, &PF_INET, &SOCK_STREAM, $proto) || die	"socket: $!";
X	       bind(S, $this) || die "bind: $!";
X	       listen(S, 5) || die "connect: $!";
X
X	       select(S); $| = 1; select(stdout);
X
X	       for (;;)	{
X		    print "Listening again\n";
X		    ($addr = accept(NS,S)) || die $!;
X		    print "accept ok\n";
X
X		    ($af,$port,$inetaddr) = unpack($sockaddr,$addr);
X		    @inetaddr =	unpack('C4',$inetaddr);
X		    print "$af $port @inetaddr\n";
X
X		    while (<NS>) {
X			 print;
X			 print NS;
X		    }
X	       }
X
________This_Is_The_END________
if test `wc -l < sock.server` -ne 37 ; then
	echo 'shar: sock.server was damaged during transit (should have been 37  bytes)'
fi
fi		; : end of overwriting check
exit 0
