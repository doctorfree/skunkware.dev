uemacs 3.7.1 - MicroEMACS

Version for UnixWare 1.x


MicroEMACS is a text editor.

This package was obtained from an ftp archive server.
Please observe the copyright notice displayed upon installation.

To install the package the simplest way follows:

1. Extract the tar archive. 

$ cd /tmp
$ su
# tar xvf uemacs-3.7.1.pkg.tar


2. Install the package 

# pkgadd -d `pwd`


3. Removing the package

# pkgrm uemacs


This software package follows the ABI conventions for add-on
packages and is  installed in /opt. It is wise to
change the default PATH setting to include /opt/bin in /etc/profile.

If you do not have a /opt, you can create it with the subdirectories
/opt/bin, /opt/lib, /opt/man -- you could also use a symbolic link
to some other part of disk if you like.

To make the manual pages accessible to the /usr/ucb/man command
set the MANPATH environment variable to include /opt/man,
a typical MANPATH might be:

	MANPATH=/usr/share/man:/opt/man
	export MANPATH




----------------------------------------------------------------------


=>		MicroEMACS 3.7.1 Help screens

	M-  means to use the <ESC> key prior to using another key
	^A  means to use the control key at the same time as the A key

^V or [Pg Dn]     Scroll down		M-< or <HOME>	Begining of file
^Z or [Pg Up]     Scroll up		M-> or <END>	End of file

-----------------------------------------------------------------------
=>		(1) MOVING THE CURSOR

^F  Forward character   M-F    Forward word		Keypad arrows
^B  Backward character  M-B    Backward word		are active!
^A  Front of line	M-G    Goto a line
^E  End of line		
^N  Next line		M-N    Front of paragraph
^P  Previous line	M-P    End of paragraph
-----------------------------------------------------------------------
=>		(2) DELETING & INSERTING

<--             Delete previous character
^D or <DELETE>  Delete next character
^C or <INSERT>  Insert a space
M-<--           Delete previous word
M-D             Delete next word
^K              Close (delete) to end of line
-----------------------------------------------------------------------
=>		(2a) MORE DELETING & INSERTING

<RETURN>   Insert a newline             <TAB>  Advance to next tab stop
^J         Insert a newline and indent  M-^W   Delete paragraph
^O         Open (insert) line
^W         Delete region between mark (set using M-<spacebar>) and cursor
M-W        Copy region to kill buffer
^X ^O      Delete blank lines around cursor
-----------------------------------------------------------------------
=>		(3) SEARCHING

^S	Search forward from cursor position.
^R	Reverse search from cursor position.
^X S	Forward incremental search
^X R	Reverse incremental search
-----------------------------------------------------------------------
=>		(4) REPLACING

M-R   Replace all instances of first typed-in string with second
          typed-in string.  End each string with ESC.
M-^R  Replace with query.  Answer with:
	^G  cancel			.   exit to entry point
	!   replace the rest		Y    replace & continue
	?   Get a list of options	N   no replacement & continue
-----------------------------------------------------------------------
=>		(5) CAPITALIZING & TRANSPOSING

M-U	UPPERCASE word
M-C	Capitalize word		^T	Transpose characters
M-L	lowercase word
^X ^L	lowercase region
^X ^U	uppercase region
^Q	Quote next entry, so that control codes may be entered into text
-----------------------------------------------------------------------
=>		(6) REGIONS & THE KILL BUFFER

M-<spacebar>	set MARK at current position
^X ^X		eXchange mark and cursor

A REGION will then be continuously-defined as the area between the mark and
the current cursor position.  The KILL BUFFER is the text which has been
most recently saved or deleted.
-----------------------------------------------------------------------
=>		(7) COPYING AND MOVING

^W  Delete (Wipe) region		M-W	copy region to KILL buffer
^Y  Yankback save buffer at cursor
Generally, the procedure for copying or moving text is:
    1)  Mark a REGION using M-<spacebar> at beginning and cursor at end.
    2)  Delete it (with ^W) or copy it (with M-W) into the KILL buffer.
    3)  Move the cursor to the desired location and yank it back (with ^Y).
-----------------------------------------------------------------------
=>		(8) MODES OF OPERATION
^X M	Add mode in buffer              M-M    Add global mode
^X ^M   Delete mode in buffer           M-^M   Delete global mode
OVER		Replaces (overwrites) rather than inserts characters
WRAP		Turns on word wrap (automatic carraige return).
VIEW		Allows viewing file without insertion and deletion.
CMODE		Automatic indenting for C program entry
EXACT/MAGIC	Changes how search and replace commands work (see next page)
-----------------------------------------------------------------------
=>		(9) SEARCH AND REPLACE MODES

EXACT	Uppper/lower case is not ignored in searches
MAGIC   Regular pattern matching characters are active
    .   Matches any one character
    *   Matches any any number of the preceding character
    ^   Beginning of line        [ ]   Character class enclosure
    $   End of line              \     Quote next character
-----------------------------------------------------------------------
=>		(10) ON-SCREEN FORMATTING

^X F		Set fill column
Mn-<tab>	Set tab spacing to n charecters between tabs stops
M-Q		Format paragraph so that text lies between margins
^X =		Position report -- displays line number, char count,
                                   file size and character under cursor
M-^C		Count words/lines/chars in marked region
-----------------------------------------------------------------------
=>		(11) MULTIPLE WINDOWS

Many WINDOWS may be active at once on the screen.  All windows may show
different parts of the same buffer, or each may display a different one.
^X 2	Split the current window in two	^X O	Change to next window
^X 0    delete current window           ^X P    Change to previous window
^X 1	delete all other windows        M-^V    Page down next window
                                  	M-^Z	Page up other window
-----------------------------------------------------------------------
=>		(12) CONTROLLING WINDOWS AND THE SCREEN

^X ^    Enlarge current window   M-<n> ^X W   Resize window to <n> lines
^X ^Z   Shrink current window    M-<n> M-S    Change screen to <n> lines
^X ^N   Move window down         M-<n> M-T    Change screen to <n> columns
^X ^P   Move window up
M-^L    Reposition window
^L      Refresh the screen
-----------------------------------------------------------------------
=>		(13) MULTIPLE BUFFERS
A BUFFER is a named area containing a document being edited.  Many buffers
may be activated at once.
^X B	Switch to another buffer.  <CR> = use just-previous buffer
^X X	Switch to next buffer in buffer list
M-^N    Change name of current buffer
^X K	Delete a non-displayed buffer.
^X ^B	Display buffer directory in a window
-----------------------------------------------------------------------
=>		(14) READING FROM DISK

^X ^F	Find file; read into a new buffer created from filename.
	(This is the usual way to begin editing a new file.)
^X ^R	Read file into current buffer, erasing its previous contents.
	No new buffer will be created.
^X ^I	Insert file into current buffer at cursor's location.
^X ^V	Find a file to make current in VIEW mode
-----------------------------------------------------------------------
=>		(15) SAVING TO DISK

^X ^S	Save current buffer to disk
^X ^W	Write current buffer to disk
^X N    Change file name of current buffer
M-Z	Write out all changed buffers and exit MicroEMACS


-----------------------------------------------------------------------
=>		(16) ACCESSING THE OPERATING SYSTEM

^X !	Send one command to the operating system and return
^X C	Start a new command processor under MicroEMACS
^X D	Suspend MicroEMACS into the background (UNIX BSD4.2 only)
^X ^C	Exit MicroEMACS
-----------------------------------------------------------------------
=>		(17) KEY BINDINGS AND COMMANDS

M-K	Bind a key to a command        M-A  Describe a class of commands
M-^K	Unbind a key from a command
^X ?	Describe command bound to a key
M-X	Execute a named (and possibly unbound) command
{Describe-bindings}
	Display a list of all commands and key bindings to a buffer
-----------------------------------------------------------------------
=>		(18) COMMAND EXECUTION
Commands can be specified as command lines in the form:
	<optional repeat count> {command-name} <optional arguments>
{Execute-command-line}	execute a typed in command line
{Execute-buffer}	executes commands lines in a buffer
{Execute-file}		executes command lines from a file
{clear-message-line}	clears the message line during execution
   M-~			clears the change flag for a buffer
-----------------------------------------------------------------------
=>		(19) MACRO EXECUTION

^X (	Start recording keyboard macro
^X )	Stop recording keyboard macro
^X E	Execute keyboard macro
M-<n> {store-macro}	Start recording named macro
      !endm		Stop recording named macro
{execute-macro-n}	Execute macro n (where n is from 1 to 20)
-----------------------------------------------------------------------
=>		(20) SPECIAL KEYS

^G		Cancel current command and return to top level of processing.
^U or		Universal repeat.  May be followed by an integer (default = 4)
M-<digit>	and repeats the next command that many times.
M-X		Execute a named (and possibly unbound) command



		Default Key Bindings for MicroEmacs 3.7.1
		========================================

 ^A   Move to start of line           ESC A   Apropos (list some commands)
 ^B   Move backward by characters     ESC B   Backup by words
 ^C   Insert space                    ESC C   Initial capitalize word
 ^D   Forward delete                  ESC D   Delete forward word
 ^E   Goto end of line
 ^F   Move forward by characters      ESC F   Advance by words
 ^G   Abort out of things             ESC G   Go to a line
 ^H   Backward delete
 ^I   Insert tab/Set tab stops
 ^J   Insert CR-LF, then indent                     
 ^K   Kill forward                    ESC K   Bind Key to function
 ^L   Refresh the screen              ESC L   Lower case word
 ^M   Insert CR-LF                    ESC M   Add global mode
 ^N   Move forward by lines           ESC N   Goto End paragraph
 ^O   Open up a blank line            
 ^P   Move backward by lines          ESC P   Goto Begining of paragraph
 ^Q   Insert literal                  ESC Q   Fill current paragraph
 ^R   Search backwards                ESC R   Search and replace
 ^S   Search forward                  ESC S   Suspend MicroEMACS (BSD4.2 only)
 ^T   Transpose characters
 ^U   Repeat command four times       ESC U   Upper case word
 ^V   Move forward by pages           ESC V   Move backward by pages
 ^W   Kill region                     ESC W   Copy region to kill buffer
 ^Y   Yank back from killbuffer       ESC X   Execute named command
 ^Z   Move backward by pages          ESC Z   Save all buffers and exit

 ESC ^C   Count words in region       ESC ~   Unmark current buffer
 ESC ^F   Goto matching fence         ESC !   Reposition window
 ESC ^H   Delete backward word        ESC <   Move to start of buffer
 ESC ^K   Unbind Key from function    ESC >   Move to end of buffer
 ESC ^L   Reposition window           ESC .   Set mark
 ESC ^M   Delete global mode          ESC ?   Fetch HELP file to buffer
 ESC ^N   Rename current buffer       ESC space    Set mark
 ESC ^R   Search & replace w/query    ESC rubout   Delete backward word
 ESC ^S   Change screen rows              rubout   Backward delete
 ESC ^T   Change screen columns
 ESC ^V   Scroll next window down
 ESC ^W   Delete Paragraph
 ESC ^Z   Scroll next window up

 ^X ?   Describe a key             ^X !   Run 1 command in a subjob
 ^X =   Show the cursor position
 ^X ^   Enlarge display window
 ^X 0   Delete current window      ^X (   Begin macro
 ^X 1   Delete other windows       ^X )   End macro
 ^X 2   Split current window
                                   ^X A   Set variable value
 ^X ^B   Display buffer list       ^X B   Switch a window to a buffer
 ^X ^C   Exit MicroEMACS           ^X C   Start a new command processer
                                   ^X D   Suspend MicroEMACS (BSD4.2 only)
                                   ^X E   Execute macro
 ^X ^F   Find file                 ^X F   Set fill column
 ^X ^I   Insert file
                                   ^X K   Delete buffer
 ^X ^L   Lower case region
 ^X ^M   Delete Mode               ^X M   Add a mode
 ^X ^N   Move window down          ^X N   Rename current filename
 ^X ^O   Delete blank lines        ^X O   Move to the next window
 ^X ^P   Move window up            ^X P   Move to the previous window
 ^X ^R   Get a file from disk      ^X R   Incremental reverse search
 ^X ^S   Save current file         ^X S   Incremental forward search
 ^X ^U   Upper case region
 ^X ^V   View file
 ^X ^W   Write a file to disk      ^X W   resize Window
 ^X ^X   Swap "." and mark         ^X X   Use next buffer
 ^X ^Z   Shrink window             ^X Z   Enlarge display window


Some unbound commands:
======================
execute-buffer		execute a buffer od command lines
execute-command-line	execute a command line (n <command> <args>)
execute-file		execute a file of command lines
execute-named-command	execute a command by name (w/command completion)
execute-macro-[1-40]	execute macroes 1 thru 40
describe-bindings	pull the list of current bindings into a window
hunt-forward		find next occurance of search string
hunt-backward		find last occurance of search string


Usable Modes
============
WRAP     Lines going past right margin "wrap" to a new line
VIEW     Read-Only mode where no modifications are allowed
CMODE    Change behavior of some commands to work with C better
EXACT    Exact case matching on search strings
OVER     Overwrite typed characters instead of inserting them
MAGIC    Use regular expresion matching in searches


MAGIC MODE special characters
=============================
^	Anchor search at beginning of line
$	Anchor search at end of line
.	Match any character except <NL>
*	Match zero or more of the preceeding character
[]	Match a class of characters ([a-z] would be all alphabetics)
\	Take next literally


***	Path Searching

	If the OS of the operating system MicroEMACS is running under
has environmental variables, MicroEMACS will read in the PATH variable
as a list of directories in which to look for its startup and help
files, in place of the list in the epath.h file.

***	Bindable Prefixes

	All the prefix keys can now be rebound. This includes:

		meta-prefix		<ESC>
		ctlx-prefix		^X
		universal-argument	^U
		quote-character		^Q

***	New Help Function

	The APROPOS (M-A) function prompts for a string, and then
prepares a list of all named functions that contain the string. This is
usefull for finding all comands that deal with one topic.

***	Keyboard Macros rewritten

	The code for processing keyboard macros now records the responses
to all prompts as well as just the command keystrokes.

***	Restrictive Mode

	The -r command line switch prevents EMACS from executing many of
its commands which would allow you to break out of it, or edit files
other then the ones named on the command line.  This is useful for
products that need to restrict access to the OS from inside the editor
(for example, BBS systems).

***	Word wrap made more flexible

	When emacs determined it is time to word wrap (when in wrap
mode) it calls the function which is bound to the illegal keystroke,
M-FNW. This keystroke is normally bound to wrap-word (M-FNW), but can be
rebound by the user so EMACS can do different things at wrap time (like
auto indention in different languages).

***	Fence Matching

	The goto-matching-fence (M-^F) command jumps the cursor to the
matching fence, or beeps if there is none.

***	Dynamic Screen Re-sizing

	The size that EMACS uses for editing can be changed with the
change-screen-size (M-^S) and change-screen-width (M-^T) commands. These
can then be usefull in integrating EMACS on window based machines.

***	EXTENTION LANGUAGE

	MicroEMACS is now equipped with a fully functional extention
language in which to write macros.  These macros can be saved, recalled
and bound to keystrokes, thus allowing a high degree of customization. 
What follows is an exerpt from what will become the new MicroEMACS
reference manual. 

Chapter x:		MicroEMACS Macros

	Macros are programs that are used to customize the editor and to
perform complicated editing tasks.  They may be stored in files or
buffers and may be executed using an appropriate command, or bound to a
particular keystroke.  Portions of the standard start-up file are
impliment via macros, as well as the example menu system.  The
execute-macro-<n> editor commands cause the macros, numbered from 1 to
40, to be executed.  Macros are stored by executing files that contain
the store-macro command.

	There are many different aspects to the macro langage within
MicroEMACS.  Editor commands are the various commands that manipulate
text, buffers, windows, etc, within the editor.  Directives are commands
which control what lines get executed within a macro.  Also there are
various types of variables.  Environmental variables both control and
report on different aspects of the editor.  User variables hold string
values which may be changed and inspected.  Buffer variables allow text
to be placed into variables.  Interactive variable allow the program to
prompt the user for information.  Functions can be used to manipulate
all these variables. 

x.00	Variables

	Variables in MicroEMACS can be used to return values within
expressions, as repeat counts to editing commands, or as text to be
inserted into buffers and messages.  The value of these variables is set
using the set (^X-A) command.  For example, to set the current fill
column to 64 characters, the following macro line would be used:

	set $fillcol 64

	or to have the contents of %NAME inserted at the point in the
current buffer, the command to use would be:

	insert-string %name


x.01	Environmental Variables

	"What good is a quote if you can't change it?"

	These variables are used to change different aspects of the way
the editor works.  Also they will return the current settings if used as
part of an expresion.  All environmental variable names begin with a
dollar sign ($). 

	$fillcol	Current fill column
	$pagelen	Number of screen lines used currently
	$curwidth	Number of columns used currently
	$curcol		Current column of point in current buffer
	$curline	Current line of point in current buffer
	$flicker	Flicker Flag
				set to TRUE if IBM CGA
				set to FALSE for most others
	$cbufname	Name of the current buffer
	$cfname		File name of the current buffer
	$sres		Current screen resolution
			(CGA or MONO on the IBM-PC driver...
			 EGA on the EGA driver
			 LOW MEDIUM or HIGH on the Atari ST1040
			 NORMAL on all others)
	$debug		Flag to trigger macro debugging (try it...
				you'll like it!)
	$status		return status of the success of the last command
			(TRUE or FALSE) usually used with !force

	Obviously, many more of these variables will be available in
future releases of MicroEMACS. (Yes, send a vote for your favorite new
environmental variables today).

x.02	User variables

	User variables allow you, the user, to store strings and
manipulate them.  These strings can be pieces of text, numbers (in text
form), or the logical values TRUE and FALSE.  These variables can be
combined, tested, inserted into buffers, and otherwise used to control
the way your macros execute. At the moment, up to 100 user variables may
be in use in one editing session.  All users variable names must begin
with a percent sign (%) and may contain any printing characters.  Only
the first 10 characters are significant (ie differences beyond the tenth
character are ignored). Most operators will truncate strings to a length
of 128 characters.

x.03	Buffer Variables

	Buffer variables are special in that they can only be queried
and cannot be set.  What buffer variables are is a way to take text from
a buffer and place it in a variable. For example, if I have a buffer by
the name of RIGEL2, and it contains the text:

	Richmond
	Lafayette
	<*>Bloomington		(where <*> is the current point)
	Indianapolis
	Gary
	=* MicroEMACS 3.7.1 (WRAP) == rigel2 == File: /data/rigel2.txt =====

	and within a command I reference #rigel2, like:

	insert-string #rigel2

	MicroEMACS would start at the current point in the RIGEL2
buffer and grab all the text up to the end of that line and pass that
back.  Then it would advance the point to the beginning of the next line.
Thus, after our last command executes, the string "Bloomington" gets
inserted into the current buffer, and the buffer RIGEL2 now looks like
this:

	Richmond
	Lafayette
	Bloomington
	<*>Indianapolis		(where <*> is the current point)
	Gary
	=* MicroEMACS 3.7.1 (WRAP) == rigel2 == File: /data/rigel2.txt =====

	as you have probably noticed, a buffer variable consists of the
buffer name, preceded by a pound sign (#).

x.04	Interactive variables

	Interactive variables are actually a method to prompt the user
for a string.  This is done by using an at sign (@) followed either with
a quoted string, or a variable containing a string.  The string is the
placed on the bottom line, and the editor waits for the user to type in
a string.  Then the string typed in by the users is returned as the
value of the interactive variable.  For example:

	set %quest "What file? "
	find-file @%quest

	will ask the user for a file name, and then attempt to find it.


x.10	Functions

	Functions can be used to manipulate variables in various ways. 
Functions can have one, two, or three arguments.  These arguments will
always be placed after the function on the current command line.  For
example, if we wanted to increase the current fill column by two, using
emacs's set (^X-A) command, we would write:

	set $fillcol &add $fillcol 2
         \      \      \      \     \____second operand
           \      \      \      \________first operand
             \      \      \_____________function to execute
               \      \__________________variable to set
                 \_______________________set (^X-A) command

	Function names always begin with the ampresand (&) character,
and are only significant to the first three characters after the
ampresand.  Functions will normal expect one of three types of
arguments, and will automatically convert types when needed.

	<num>	an ascii string of digits which is interpeted as a
		numeric value.  Any string which does not start with a
		digit or a minus sign (-) will be considered zero.

	<str>	An arbitrary string of characters.  At the moment,
		strings are limited to 128 characters in length.

	<log>	A logical value consisting of the string "TRUE" or
		"FALSE". Numeric strings will also evaluate to "FALSE"
		if they are equal to zero, and "TRUE" if they are
		non-zero. Arbitrary text strings will have the value of
		"FALSE".

	A list of the currently availible functions follows: (Once
again, send in those votes on what kind of functions you would like to
see added!)

Numeric Functions:	(returns <num>)

&ADD		<num> <num>	Add two numbers
&SUB		<num> <num>	Subtract the second number from the first
&TIMes		<num> <num>	Multiply two numbers
&DIVide		<num> <num>	Divide the first number by the second
				giving an integer result
&MOD		<num> <num>	Return the reminder of dividing the
				first number by the second
&NEGate		<neg>		Multiply the arg by -1


String manipulation functions:	(returns <str>)

&CAT		<str> <str>	Concatinate the two strings to form one
&LEFt		<str> <num>	return the <num> leftmost characters
				from <str>
&RIGht		<str> <num>	return the <num> rightmost characters
				from <str>
&MID		<str> <num1> <num2>
				Starting from <num1> position in <str>,
				return <num2> characters.

Logical Testing functions:	(returns <log>)

&NOT		<log>		Return the opposite logical value
&EQUal		<num> <num>	If <num> and <num> are numerically
				equal, return TRUE
&LESs		<num1> <num2>	If <num1> is less than <num2>, return
				TRUE.
&GREater	<num1> <num2>	If <num1> is greater than, or equal to
				<num2>, return TRUE.
&SEQual		<str1> <str2>	If the two strings are the same, return
				TRUE.
&SLEss		<str1> <str2>	If <str1> is less alphabetically than
				<str2>, return TRUE.
&SGReater	<str1> <str2>	If <str1> is alphabetically greater than
				or equal to <str2>, return TRUE.

Special Functions:

&INDirect	<str>		Evaluate <str> as a variable.

	This last function deserves more explaination. The &IND function
evaluates its argument, takes the resulting string, and then uses it as
a variable name.  For example, given the following code sequence:

	; set up reference table

	set %one	"elephant"
	set %two 	"giraffe"
	set %three 	"donkey"

	set %index "two"
	insert-string &ind %index

	the string "giraffe" would have been inserted at the point in
the current buffer.  This indirection can be safely nested up to about
10 levels.

x.20	Directives

	Directives are commands which only operate within an executing
macro, ie they do not make sense as a single command. As such, they
cannot be called up singly or bound to keystroke. Used within macros,
they control what lines are executed and in what order.

	Directives always start with the exlaimation mark (!) character
and must be the first thing placed on a line. Directives executed singly
(via the execute-command-line command) interactively will be ignored.

x.21	!ENDM Directive

	This directive is used to terminate a macro being stored. For
example, if a file is being executed contains the text:

	;	Read in a file in view mode, and make the window red
	26	store-macro
		find-file @"File to view: "
		add-mode "view"
		add-mode "red"
	!endm

	write-message "[Consult macro has been loaded]"

	only the lines between the store-macro command and the !ENDM
directive are stored in macro 26.

x.22	!FORCE Directive

	When MicroEMACS executes a macro, if any command fails, the
macro is terminated at that point. If a line is preceeded by a !FORCE
directive, execution continues weather the command succeeds or not. For
example:

	;	Merge the top two windows

	save-window		;remember what window we are at
	1 next-window		;go to the top window
	delete-window		;merge it with the second window
	!force restore-window	;This will continue irregardless
	add-mode "red"

x.23	!IF, !ELSE, and !ENDIF Directives

	This directive allows statements only to be executed if a
condition specified in the directive is met.  Every line following the
!IF directive, until the first !ELSE or !ENDIF directive, is only
executed if the expresion following the !IF directive evaluates to a
TRUE value.  For example, the following macro segment creates the
portion of a text file automatically.  (yes believe me, this will be
easier to understand then that last explaination....)

	!if &sequal %curplace "timespace vortex"
		insert-string "First, rematerialize~n"
	!endif
	!if &sequal %planet "earth"	;If we have landed on earth...
		!if &sequal %time "late 20th century"  ;and we are then
			write-message "Contact U.N.I.T."
		!else
			insert-string "Investigate the situation....~n"
			insert-string "(SAY 'stay here Sara')~n"
		!endif
	!else
		set %conditions @"Atmosphere conditions outside? "
		!if &sequal %conditions "safe"
			insert-string &cat "Go outside......" "~n"
			insert-string "lock the door~n"
		!else
			insert-string "Dematerialize..try somewhen else"
			newline
		!endif
	!endif

x.24	!GOTO Directive

	Flow can be controlled within a MicroEMACS macro using the !GOTO
directive. It takes as an argument a label. A label consists of a line
starting with an asterick (*) and then an alphanumeric label.  Only
labels in the currently executing macro can be jumped to, and trying to
jump to a non-existing label terminates execution of a macro.  For
example..

	;Create a block of DATA statements for a BASIC program

		insert-string "1000 DATA "
		set %linenum 1000

	*nxtin
		update-screen		;make sure we see the changes
		set %data @"Next number: "
		!if &equal %data 0
			!goto finish
		!endif

		!if &greater $curcol 60
			2 delete-previous-character
			newline
			set %linenum &add %linenum 10
			insert-string &cat %linenum " DATA "
		!endif

		insert-string &cat %data ", "
		!goto nxtin

	*finish

		2 delete-previous-character
		newline

x.25	!RETURN Directive

	The !RETURN Directive causes the current macro to exit, either
returning to the caller (if any) or to interactive mode.  For example:

	;	Check the monitor type and set %mtyp

	!if &sres "CGA"
		set %mtyp 1
		!return
	!else
		set %mtyp 2
	!endif

	insert-string "You are on a MONOCHROME machine!~n"

<<<END OF MANUAL EXCERPT>>>
