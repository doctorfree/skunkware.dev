


     RRRRAAAA((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((22227777 DDDDeeeecccceeeemmmmbbbbeeeerrrr 1111999999994444))))            RRRRAAAA((((1111))))



     NNNNAAAAMMMMEEEE
          rrrraaaa - read aaaarrrrgggguuuussss((((8888)))) data.

     SSSSYYYYNNNNOOOOPPPPSSSSIIIISSSS
          rrrraaaa [ -bchmnEIMNORTWX ] [ ----CCCC _a_c_c_e_s_s-_f_i_l_e ] [ ----dddd _d_e_b_u_g-_l_e_v_e_l ]
             [ ----rrrr _a_r_g_u_s-_f_i_l_e ] [ ----wwww _o_u_t_p_u_t-_f_i_l_e ] [ ----PPPP _p_o_r_t ]
             [ ----FFFF _f_i_l_e ] [ ----SSSS _a_r_g_u_s-_s_e_r_v_e_r ] _e_x_p_r_e_s_s_i_o_n

     DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
          RRRRaaaa reads aaaarrrrgggguuuussss data from either _s_t_d_i_n, an _a_r_g_u_s-_f_i_l_e, or
          from a remote host running as an _a_r_g_u_s-_s_e_r_v_e_r.  RRRRaaaa prints
          out the contents of aaaarrrrgggguuuussss transaction reports that match the
          policy described in the _a_c_c_e_s_s-_f_i_l_e and/or the boolean
          _e_x_p_r_e_s_s_i_o_n.

     OOOOPPPPTTTTIIIIOOOONNNNSSSS
          ----bbbb   Dump the compiled transaction-matching code to standard
               output and stop.

          ----cccc   Print the transaction source byte and packet _c_o_u_n_t, and
               the destination byte and packet _c_o_u_n_t.

          ----CCCC   Match entries against a Cisco access control list that
               is contained in _a_c_c_e_s_s-_f_i_l_e.  AAAArrrrgggguuuussss transaction reports
               corresponding to network traffic that should be blocked
               by the Cisco access control definition, are reported.
               The file format is that of a single Cisco extended
               access-list definition.

          ----dddd   Print debug information relating to ----CCCC option
               transaction reporting.  When _d_e_b_u_g-_l_e_v_e_l is 1, rrrraaaa
               prints the access control list definition that would
               cause the argus datum to be rejected.  With a _d_e_b_u_g-
               _l_e_v_e_l of 2, rrrraaaa also prints the access control list
               definition that permits argus data.

          ----EEEE   Print transactions that have been established.

          ----FFFF   Use _f_i_l_e as input for the filter expression.  An
               additional expression given on the command line is
               ignored.

          ----hhhh   Print an explanation of all the arguments.

          ----IIII   Print extended ICMP status reports.

          ----mmmm   Print ethernet or fddi (MAC) addresses.

          ----MMMM   Print transactions with multiple routes involved with
               the transaction.  This condition exists when a
               transaction involves more than a single source and
               destination MAC address pair.



     Page 1                                           (printed 3/5/96)






     RRRRAAAA((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((22227777 DDDDeeeecccceeeemmmmbbbbeeeerrrr 1111999999994444))))            RRRRAAAA((((1111))))



          ----nnnn   No not translate host and service numbers to names. ----nnnnnnnn
               will suppress translation of protocol numbers, as well.

          ----NNNN   Print TCP transactions that closed normally.

          ----OOOO   Print transactions that involved the use of IP options.

          ----PPPP   Use alternate _p_o_r_t when accessing remote aaaarrrrgggguuuussss server.
               The default is port 561/tcp.

          ----rrrr   Read from the specified _a_r_g_u_s-_f_i_l_e.

          ----RRRR   Print TCP transactions that encountered a RESET
               indication.

          ----SSSS   Specify a remote _a_r_g_u_s-_s_e_r_v_e_r.

          ----TTTT   Print transactions that reported because of a TIMED_OUT
               condition.

          ----wwww   Write out matching data to _o_u_t_p_u_t-_f_i_l_e, in aaaarrrrgggguuuussss file
               format. An _o_u_t_p_u_t-_f_i_l_e of '-' directs rrrraaaa to write the
               '_a_r_g_u_s-_f_i_l_e to stdout, allowing for "chaining" rrrraaaa
               commands together.

          ----WWWW   Print TCP transactions where the source or destination
               window was set to zero at some time during the
               transaction.

          ----XXXX   Print TCP transactions that involved packet
               retransmissions.

          _e_x_p_r_e_s_s_i_o_n
               This ttttccccppppdddduuuummmmpppp((((1111)))) expression specifies which transactions
               will be selected.  If no _e_x_p_r_e_s_s_i_o_n is given, all
               transactions are selected.  Otherwise, only
               transactions for which _e_x_p_r_e_s_s_i_o_n is `true' will be
               printed.  The syntax is identical to the expression
               syntax for ttttccccppppdddduuuummmmpppp, however, the semantics for
               ttttccccppppdddduuuummmmpppp''''ssss packet filter expression may be slightly
               different when applied to transaction selection.  In
               particular, transaction selection based on the source
               or destination host may not always give the expected
               results, since argus cannot guarantee correct
               determination of the source host from the available
               datagrams (especially for non-TCP protocols with
               dropped or missing datagrams).  For a complete
               _e_x_p_r_e_s_s_i_o_n format description, please refer to the
               ttttccccppppdddduuuummmmpppp((((1111)))) man page.

     EEEEXXXXAAAAMMMMPPPPLLLLEEEESSSS
          To report all TCP transactions from and to host wave,



     Page 2                                           (printed 3/5/96)






     RRRRAAAA((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((22227777 DDDDeeeecccceeeemmmmbbbbeeeerrrr 1111999999994444))))            RRRRAAAA((((1111))))



          reading transaction data from _a_r_g_u_s-_f_i_l_e argus.data:
               rrrraaaa ----rrrr aaaarrrrgggguuuussss....ddddaaaattttaaaa ttttccccpppp aaaannnndddd hhhhoooosssstttt wwwwaaaavvvveeee

          Create the _a_r_g_u_s-_f_i_l_e icmp.log with all ICMP events
          involving the host nimrod, using data from _a_r_g_u_s-_f_i_l_e, but
          reading the transaction data from _s_t_d_i_n:
               ccccaaaatttt _a_r_g_u_s-_f_i_l_e |||| rrrraaaa ----LLLL iiiiccccmmmmpppp....lllloooogggg iiiiccccmmmmpppp aaaannnndddd hhhhoooosssstttt nnnniiiimmmmrrrroooodddd

          To review, in real-time, all the transactions to the network
          198.2.3.0, that violate the Cisco access control list
          specified in _a_c_c_e_s_s-_l_i_s_t, using the remote aaaarrrrgggguuuussss server
          _a_r_g_u_s-_h_o_s_t.
               rrrraaaa ----SSSS _a_r_g_u_s-_h_o_s_t ----CCCC _a_c_c_e_s_s-_l_i_s_t ddddsssstttt nnnneeeetttt 111199998888....2222....3333....0000


     OOOOUUUUTTTTPPPPUUUUTTTT FFFFOOOORRRRMMMMAAAATTTT
          The following is a brief description of the output format of
          rrrraaaa which reports transaction data in various levels of
          detail.  The general format is:
            _t_i_m_e  [_m_a_c._a_d_d_r]  _p_r_o_t_o  _h_o_s_t  _d_i_r  _h_o_s_t  [_c_o_u_n_t] _s_t_a_t_u_s

          ttttiiiimmmmeeee
              _t_i_m_e is printed as, day of the week, month/day and
              hr:min:sec, using llllooooccccaaaallllttttiiiimmmmeeee((((3333VVVV)))).... AAAArrrrgggguuuussss transaction data
              contains both starting and ending transaction times,
              with precision to the microsecond. However, rrrraaaa prints
              out only one of these dates depending on the status of
              the aaaarrrrgggguuuussss server.  When the aaaarrrrgggguuuussss server is running in
              default mode, rrrraaaa reports the transaction starting time.
              When the server is in DETAIL mode, the transaction
              ending time is reported.

          mmmmaaaacccc....aaaaddddddddrrrr
               _m_a_c._a_d_d_r is an optional field, specified using the ----mmmm
               flag.  _m_a_c._a_d_d_r represents the first source and
               destination MAC addresses seen for a particular
               transaction.  These addresses are paired with the
               _h_o_s_t._p_o_r_t fields, so the direction indicator is needed
               to distinguish between the source and destination MAC
               addresses.

          pppprrrroooottttoooo [[[[ooooppppttttiiiioooonnnnssss pppprrrroooottttooooccccoooollll]]]]
               The _p_r_o_t_o indicator consists of two fields. The first
               is protocol specific and the designations are:
9                  *   -  TCP packet retransmissions
                   M  -  Multiple physical layer paths
                    S -  IP option Strict Source Route
                    L -  IP option Loose Source Route
                    T -  IP option Time Stamp
                    + -  IP option Security
                    R -  IP option Record Route
                    N -  IP option SATNET


9     Page 3                                           (printed 3/5/96)






     RRRRAAAA((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((22227777 DDDDeeeecccceeeemmmmbbbbeeeerrrr 1111999999994444))))            RRRRAAAA((((1111))))



                    ? -  multiple IP options set

               The second field indicates the upper protocol used in
               the transaction.  This field will contain the first 4
               characters of the official name for the protocol used,
               as defined in RFC-1700.  Use of the ----nnnn option, twice
               (-nn), will cause the actual protocol number to be
               displayed.

          hhhhoooosssstttt
              The _h_o_s_t field is protocol dependent, and for all
              protocols will contain the IP address/name.  For TCP and
              UDP, the field will also contain the port number/name,
              separated by a period.

          ddddiiiirrrr
             The _d_i_r field will have the direction of the transaction,
             as can be best determined from the datum, and is used to
             indicate which hosts are transmitting. For TCP, the dir
             field indicates the actual source of the TCP connection,
             and the center character indicating the state of the
             transaction.
9                  -  - transaction was NORMAL
                  |  - transaction was RESET
                  o  - transaction TIMED OUT.

          ccccoooouuuunnnntttt
               _c_o_u_n_t is an optional field, specified using the ----cccc
               option.  There are 4 fields that are produced.  The
               first 2 are the packet counts and the last 2 are the
               byte counts for the specific transaction.  The fields
               are paired with the previous host fields, and represent
               the packets transmitted by the respective host.

          ssssttttaaaattttuuuussss
               The _s_t_a_t_u_s field indicates the principle status for the
               transaction report, and is protocol dependent.  For all
               the protocols, except ICMP, this field reports on the
               basic state of a transaction.

            RRRREEEEQQQQ IIIINNNNTTTT  ((((rrrreeeeqqqquuuueeeesssstttteeeedddd  iiiinnnniiiittttiiiiaaaallll))))
               This indicates that this is the _i_n_i_t_i_a_l status report
               for a transaction and is seen only when the _a_r_g_u_s-
               _s_e_r_v_e_r is in DETAIL mode.  For TCP connections this is
               RRRREEEEQQQQ, indicating that a connection is being requested.
               For the connectionless protocols, such as UDP, this is
               IIIINNNNTTTT.

            AAAACCCCCCCC  ((((aaaacccccccceeeepppptttteeeedddd))))
               This indicates that a request/response condition has
               occurred, and that a transaction has been detected
               between two hosts.  For TCP, this indicates that a


9     Page 4                                           (printed 3/5/96)






     RRRRAAAA((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((22227777 DDDDeeeecccceeeemmmmbbbbeeeerrrr 1111999999994444))))            RRRRAAAA((((1111))))



               connection request has been answered, and the
               connection will be accepted.  This is only seen when
               the _a_r_g_u_s-_s_e_r_v_e_r is in DETAIL mode.  For the
               connectionless protocols, this state indicates that
               there has been a single packet exchange between two
               hosts, and could qualify as a request/response
               transaction.

            EEEESSSSTTTT CCCCOOOONNNN  ((((eeeessssttttaaaabbbblllliiiisssshhhheeeedddd  ccccoooonnnnnnnneeeecccctttteeeedddd))))
               This record type indicates that the reported
               transaction is active, and has been established or is
               continuing.  This should be interpreted as a status
               report of a currently active transaction.  For TCP, the
               EST status is only seen in DETAIL mode, and indicates
               that the three way handshake has been completed for a
               connection.

            CCCCLLLLOOOO  ((((cccclllloooosssseeeedddd))))
               TCP specific, this record type indicates that the TCP
               connection has closed normally.

            TTTTIIIIMMMM  ((((ttttiiiimmmmeeeeoooouuuutttt))))
               Activity was not seen relating to this transaction,
               during the aaaarrrrgggguuuussss server's timeout period for this
               protocol.  This status is seen only when there were
               packets recorded since the last report for this
               transaction.

               For the ICMP protocol, the _s_t_a_t_u_s field displays
               various aspects of the ICMP data.  With the ----IIII option,
               extended ICMP protocol data information is given.  ICMP
               status can have the values (----IIII option info):

               EEEECCCCOOOO echo request
               EEEECCCCRRRR echo reply
               UUUURRRRFFFF unreachable need fragmentation
               UUUURRRRHHHH unreachable host (_h_o_s_t_a_d_d_r)
               UUUURRRRNNNN unreachable network (_n_e_t_a_d_d_r)
               UUUURRRROOOO unreachable protocol (_p_r_o_t_o_n_u_m)
               UUUURRRRPPPP unreachable port (_p_r_o_t_o_n_u_m _p_o_r_t_n_u_m)
               UUUURRRRSSSS unreachable source failed
               SSSSRRRRCCCC source quench
               RRRREEEEDDDD redirect
               TTTTIIIIMMMM time exceeded
               PPPPAAAARRRR parameter problem
               TTTTSSSSTTTT timestamp request
               TTTTSSSSRRRR timestamp reply
               IIIIRRRRQQQQ information request
               IIIIRRRRRRRR information reply
               MMMMAAAASSSS mask request
               MMMMSSSSRRRR mask reply (_m_a_s_k_a_d_d_r)




     Page 5                                           (printed 3/5/96)






     RRRRAAAA((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((22227777 DDDDeeeecccceeeemmmmbbbbeeeerrrr 1111999999994444))))            RRRRAAAA((((1111))))



     OOOOUUUUTTTTPPPPUUUUTTTT EEEEXXXXAAAAMMMMPPPPLLLLEEEESSSS
          These examples show typical rrrraaaa output, and demonstrates a
          number of variations seen in aaaarrrrgggguuuussss data.  This rrrraaaa output was
          generated using the ----nnnn option to suppress number
          translation.

          TTTThhhhuuuu 11112222////22229999 00006666::::44440000::::33332222   SSSS ttttccccpppp  111133332222....3333....33331111....11115555....6666444433339999   ---->>>> 11112222....22223333....11114444....77777777....22223333   CCCCLLLLOOOO
                This is a normal tcp transaction to the telnet port
                on host 12.23.14.77.  The IP Option strict source
                route was seen.

          TTTThhhhuuuu 11112222////22229999 00006666::::44440000::::33332222     ttttccccpppp  111133332222....3333....33331111....11115555....6666222200000000  <<<<||||>>>> 11112222....22223333....11114444....77777777....22225555   RRRRSSSSTTTT
                This tcp transaction from the smtp port of host
                12.23.14.77 was RRRREEEESSSSEEEETTTT, suggesting that the
                transaction was denied.

          TTTThhhhuuuu 11112222////22229999 00003333::::33339999::::00005555  MMMM  iiiiggggmmmmpppp 11112222....88888888....11114444....11110000       <<<<---->>>> 111122228888....2222....2222....11110000       CCCCOOOONNNN
                This is an igmp transaction status report, usually
                seen with MBONE traffic.  There was more than one
                source and destination MAC address pair used to
                support the transaction, suggesting a possible
                routing loop.

          TTTThhhhuuuu 11112222////22229999 00006666::::44440000::::00005555 ****   ttttccccpppp  11112222....22223333....11114444....22223333....1111000044443333  <<<<---->>>> 11112222....22223333....11114444....22227777....6666000000000000 TTTTIIIIMMMM
                This is an X-windows transaction, that has TTTTIIIIMMMMEEEEDDDDOOOOUUUUTTTT.
                Packets were retransmitted during the connection.

          TTTThhhhuuuu 11112222////22229999 00007777::::44442222::::00009999     uuuuddddpppp   11112222....9999....1111....111111115555....2222222266662222   ---->>>> 22228888....11112222....111144441111....6666....111133339999  IIIINNNNTTTT
                This is an initial netbios UDP transaction status
                report, indicating that this is the first datagram
                encountered for this transaction. This status can
                only be seen when the _a_r_g_u_s-_s_e_r_v_e_r is in ddddeeeettttaaaaiiiillll mode.

          TTTThhhhuuuu 11112222////22229999 00006666::::44442222::::00009999     iiiiccccmmmmpppp  11112222....9999....1111....111111115555       <<<<----  11112222....66668888....5555....111122227777      EEEECCCCOOOO
          TTTThhhhuuuu 11112222////22229999 00006666::::44442222::::00009999     iiiiccccmmmmpppp  11112222....9999....1111....111111115555        ---->>>> 11112222....66668888....5555....111122227777      EEEECCCCRRRR
                This example represents a "ping" of host 12.9.1.115,
                and its response.

          This next example shows the rrrraaaa output of a complete TCP
          transaction, while reading from a remote _a_r_g_u_s-_s_e_r_v_e_r in
          ddddeeeettttaaaaiiiillll mode.  The '*' in the CLO report indicates that at
          least one TCP packet was retransmitted during the
          transaction.

          %%%% rrrraaaa ----SSSS _a_r_g_u_s-_s_e_r_v_e_r ttttccccpppp aaaannnndddd hhhhoooosssstttt sssseeeeiiii....ccccmmmmuuuu....eeeedddduuuu aaaannnndddd ppppoooorrrrtttt ssssmmmmttttpppp
          rrrraaaa:::: TTTTrrrryyyyiiiinnnngggg aaaarrrrgggguuuussss----sssseeeerrrrvvvveeeerrrr ppppoooorrrrtttt 555566661111
          rrrraaaa:::: ccccoooonnnnnnnneeeecccctttteeeedddd AAAArrrrgggguuuussss VVVVeeeerrrrssssiiiioooonnnn 1111....4444 ddddeeeettttaaaaiiiillll mmmmooooddddeeee
          SSSSaaaatttt 11112222////00003333 11115555::::22229999::::33339999     ttttccccpppp  iiii....sssseeeeiiii....ccccmmmmuuuu....eeee....1111555544443333   ---->>>> sssseeeeiiii....ccccmmmmuuuu....eeeedddduuuu....ssssmmmmttttpppp RRRREEEEQQQQ
          SSSSaaaatttt 11112222////00003333 11115555::::22229999::::33339999     ttttccccpppp  iiii....sssseeeeiiii....ccccmmmmuuuu....eeee....1111555544443333  <<<<----  sssseeeeiiii....ccccmmmmuuuu....eeeedddduuuu....ssssmmmmttttpppp AAAACCCCCCCC
          SSSSaaaatttt 11112222////00003333 11115555::::22229999::::33339999     ttttccccpppp  iiii....sssseeeeiiii....ccccmmmmuuuu....eeee....1111555544443333  <<<<---->>>> sssseeeeiiii....ccccmmmmuuuu....eeeedddduuuu....ssssmmmmttttpppp EEEESSSSTTTT
          SSSSaaaatttt 11112222////00003333 11115555::::22229999::::33339999 ****   ttttccccpppp  iiii....sssseeeeiiii....ccccmmmmuuuu....eeee....1111555544443333   ---->>>> sssseeeeiiii....ccccmmmmuuuu....eeeedddduuuu....ssssmmmmttttpppp CCCCLLLLOOOO




     Page 6                                           (printed 3/5/96)






     RRRRAAAA((((1111))))           UUUUNNNNIIIIXXXX SSSSyyyysssstttteeeemmmm VVVV ((((22227777 DDDDeeeecccceeeemmmmbbbbeeeerrrr 1111999999994444))))            RRRRAAAA((((1111))))



     AAAAUUUUTTTTHHHHOOOORRRRSSSS
          Carter Bullard (wcb@fore.com).
          Chas DiFatta (cd@sei.cmu.edu).
          Special thanks to Mark Poepping (poepping@sei.cmu.edu).

     SSSSEEEEEEEE AAAALLLLSSSSOOOO
          ttttccccppppdddduuuummmmpppp(1), aaaarrrrgggguuuussss(8)

          Postel, Jon, _I_n_t_e_r_n_e_t _P_r_o_t_o_c_o_l, RFC 791, Network Information
          Center, SRI International, Menlo Park, Calif., May 1981.

          Postel, Jon, _I_n_t_e_r_n_e_t _C_o_n_t_r_o_l _M_e_s_s_a_g_e _P_r_o_t_o_c_o_l, RFC 792,
          Network Information Center, SRI International, Menlo Park,
          Calif., May 1981.

          Postel, Jon, _T_r_a_n_s_m_i_s_s_i_o_n _C_o_n_t_r_o_l _P_r_o_t_o_c_o_l, RFC 793, Network
          Information Center, SRI International, Menlo Park, Calif.,
          May 1981.

          Postel, Jon, _U_s_e_r _D_a_t_a_g_r_a_m _P_r_o_t_o_c_o_l, RFC 768, Network
          Information Center, SRI International, Menlo Park, Calif.,
          May 1980.

          McCanne, Steven, and Van Jacobson, _T_h_e _B_S_D _P_a_c_k_e_t _F_i_l_t_e_r: _A
          _N_e_w _A_r_c_h_i_t_e_c_t_u_r_e _f_o_r _U_s_e_r-_l_e_v_e_l _C_a_p_t_u_r_e, Lawrwnce Berkeley
          Laboratory, One Cyclotron Road, Berkeley, Calif., 94720,
          December 1992.




























     Page 7                                           (printed 3/5/96)



