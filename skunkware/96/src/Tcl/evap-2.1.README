
			     Introduction

You can find complete documentation for the C, Perl and Tcl implementations
of evaluate_parameters in the man pages evap(2), evap.c(2), evap.pl(2),
evap.tcl(2) and evap_pac(2), as well as the source files in the "src"
directory.

To install you need an ANSI C compiler.  Inspect the Makefile variables and
then:

	make; make install

For VX/VE try the script SOL/install_evap_vxve.

There are several sample programs that can be run from the installation
directory - three for C and two for Perl and Tcl.  To get the feel of things
try:

	sample_c                            C    #1
	sample_pl                           Perl #1
	sample_tcl                          Tcl  #1
	sample_c -mui 123
	sample_pl -mui 123
	sample1_pl -mui 123                 Perl #2
	sample1_tcl -mui 123                Tcl  #2
	sample1 -usage_help                 C    #2
	sample1 -?
	sample1 -full_help
	sample1 -mui 123
	sample2 -mui 123	            C    #3

To try evaluate_parameters embedded in an application try:

	sama_c -?                           sample_application C
	samc_c
	sama_pl -?                          sample_application Perl
	samc_pl
	sama_tcl -?                         sample_application Tcl
	samc_tcl


		      What's New In Version 2.1?

 . evaluate_parameters for Tcl.
 . evaluate_parameters is now embeddable in your C, Perl and Tcl programs.
   The new entry point `evap_pac' (Process Application Commands) can
   handle all user input - you simply supply the command processors.
   `evap_pac' has two builtin command processors:
	
	!			     - bang, execute shell commands
	display_application_commands - list all valid commands

 . Help Hooks to customize evaluate_parameters' help output.


	Incompatabilities Between Version 2.1 and Version 2.0

 . The help alias -disci has been changed to -?.
 . Usage for `display_command_information' has changed; use -full_help
   to see the changes.
 . All help information is paged using MANPAGER (or PAGER).  There are
   environment variables you can define to revert to the old behavior.


			    Acknowledgment

Many thanks to these kind folks who spent a good amount of their time
finding bugs, reading man pages and making helpful suggestions:

	Mark Borges		mdb@noaacdc.Colorado.EDU
	Edward Hartnett		ejh@larry.gsfc.nasa.gov


Stephen O. Lidie, Lehigh University Computing Center, 94/05/01

lusol@Lehigh.EDU
