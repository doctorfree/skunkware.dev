timer: Print newlines at intervals, for use in script programs.
Usage: timer [-hi] [-s<string>] [-r<num>] [<interval> ...]
where <interval> is a time to wait between printing newlines.
Intervals are given in milliseconds by default.  An 's' may be appended
to an interval to give a time in seconds instead of milliseconds.
If one interval is given, a newline is printed each time the
interval expires.  This continues until the program is interrupted.
If more than one interval is given, a newline is printed after each.
After the last interval's newline is printed, the program exits.
To give a single one-shot interval, use -r1 (see the -r option below).
If no intervals are given, wait times are read from the standard input.
In this mode, timer waits until an interval and newline have been read,
waits for the specied interval, writes a newline, and then reads again.
Multiple intervals can be given on a line, separated by newlines.
If a bad interval is read or the standard input is closed, timer exits.
Note that on most systems, the clock period is at least 10 milliseconds.
Interval requests are silently rounded up to the next highest clock period.
Options:
-h: Print this help.
-i: Print an initial newline.  timer normally waits until after the first
    interval before printing anything.  In some cases it may be useful for
    the first iteration of a loop that reads from timer to execute
    immediately; -i can be used in this case.  This is not counted against
    the value given with -r.
-r<num>: Repeat all intervals <num> times.  If intervals are given on the
    command line, timer exits after the last interval is processed, even
    if only one interval is given.
-s<string>: Change the string printed after each interval (and before the
    first interval, if -i is given) from a single newline to whatever
    string is given with -s.  A newline is not automatically printed after
    the string.
-S<string>: Like -s, except that the string is followed by a newline.
