


     GGGGAAAAWWWWKKKK((((1111))))      FFFFrrrreeeeeeee SSSSooooffffttttwwwwaaaarrrreeee FFFFoooouuuunnnnddddaaaattttiiiioooonnnn ((((NNNNoooovvvv 22224444 1111999999994444))))       GGGGAAAAWWWWKKKK((((1111))))



     NNNNAAAAMMMMEEEE
          gawk - pattern scanning and processing language

     SSSSYYYYNNNNOOOOPPPPSSSSIIIISSSS
          ggggaaaawwwwkkkk [ POSIX or GNU style options ] ----ffff _p_r_o_g_r_a_m-_f_i_l_e [ -------- ]
          file ...
          ggggaaaawwwwkkkk [ POSIX or GNU style options ] [ -------- ] _p_r_o_g_r_a_m-_t_e_x_t file
          ...

     DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
          _G_a_w_k is the GNU Project's implementation of the AWK
          programming language.  It conforms to the definition of the
          language in the POSIX 1003.2 Command Language And Utilities
          Standard.  This version in turn is based on the description
          in _T_h_e _A_W_K _P_r_o_g_r_a_m_m_i_n_g _L_a_n_g_u_a_g_e, by Aho, Kernighan, and
          Weinberger, with the additional features defined in the
          System V Release 4 version of UNIX _a_w_k.  _G_a_w_k also provides
          some GNU-specific extensions.

          The command line consists of options to _g_a_w_k itself, the AWK
          program text (if not supplied via the ----ffff or --------ffffiiiilllleeee options),
          and values to be made available in the AAAARRRRGGGGCCCC and AAAARRRRGGGGVVVV pre-
          defined AWK variables.

     OOOOPPPPTTTTIIIIOOOONNNNSSSS
          _G_a_w_k options may be either the traditional POSIX one letter
          options, or the GNU style long options.  POSIX style options
          start with a single ``-'', while GNU long options start with
          ``--''.  GNU style long options are provided for both GNU-
          specific features and for POSIX mandated features.  Other
          implementations of the AWK language are likely to only
          accept the traditional one letter options.

          Following the POSIX standard, _g_a_w_k-specific options are
          supplied via arguments to the ----WWWW option.  Multiple ----WWWW
          options may be supplied, or multiple arguments may be
          supplied together if they are separated by commas, or
          enclosed in quotes and separated by white space.  Case is
          ignored in arguments to the ----WWWW option.  Each ----WWWW option has a
          corresponding GNU style long option, as detailed below.
          Arguments to GNU style long options are either joined with
          the option by an ==== sign, with no intervening spaces, or they
          may be provided in the next command line argument.

          _G_a_w_k accepts the following options.

          ----FFFF _f_s
          --------ffffiiiieeeelllldddd----sssseeeeppppaaaarrrraaaattttoooorrrr====_f_s
               Use _f_s for the input field separator (the value of the
               FFFFSSSS predefined variable).

          ----vvvv _v_a_r====_v_a_l



     Page 1                                          (printed 7/10/96)






     GGGGAAAAWWWWKKKK((((1111))))      FFFFrrrreeeeeeee SSSSooooffffttttwwwwaaaarrrreeee FFFFoooouuuunnnnddddaaaattttiiiioooonnnn ((((NNNNoooovvvv 22224444 1111999999994444))))       GGGGAAAAWWWWKKKK((((1111))))



          --------aaaassssssssiiiiggggnnnn====_v_a_r====_v_a_l
               Assign the value _v_a_l, to the variable _v_a_r, before
               execution of the program begins.  Such variable values
               are available to the BBBBEEEEGGGGIIIINNNN block of an AWK program.

          ----ffff _p_r_o_g_r_a_m-_f_i_l_e
          --------ffffiiiilllleeee====_p_r_o_g_r_a_m-_f_i_l_e
               Read the AWK program source from the file _p_r_o_g_r_a_m-_f_i_l_e,
               instead of from the first command line argument.
               Multiple ----ffff (or --------ffffiiiilllleeee) options may be used.

          ----mmmmffff====_N_N_N
          ----mmmmrrrr====_N_N_N
               Set various memory limits to the value _N_N_N.  The ffff flag
               sets the maximum number of fields, and the rrrr flag sets
               the maximum record size.  These two flags and the ----mmmm
               option are from the AT&T Bell Labs research version of
               UNIX _a_w_k.  They are ignored by _g_a_w_k, since _g_a_w_k has no
               pre-defined limits.
          ----WWWW ccccoooommmmppppaaaatttt
          --------ccccoooommmmppppaaaatttt    Run in _c_o_m_p_a_t_i_b_i_l_i_t_y mode.  In compatibility
                      mode, _g_a_w_k behaves identically to UNIX _a_w_k; none
                      of the GNU-specific extensions are recognized.
                      See GGGGNNNNUUUU EEEEXXXXTTTTEEEENNNNSSSSIIIIOOOONNNNSSSS, below, for more information.

          ----WWWW ccccooooppppyyyylllleeeefffftttt
          ----WWWW ccccooooppppyyyyrrrriiiigggghhhhtttt
          --------ccccooooppppyyyylllleeeefffftttt
          --------ccccooooppppyyyyrrrriiiigggghhhhtttt Print the short version of the GNU copyright
                      information message on the error output.

          ----WWWW hhhheeeellllpppp
          ----WWWW uuuussssaaaaggggeeee
          --------hhhheeeellllpppp
          --------uuuussssaaaaggggeeee     Print a relatively short summary of the
                      available options on the error output.  Per the
                      GNU Coding Standards, these options cause an
                      immediate, successful exit.

          ----WWWW lllliiiinnnntttt
          --------lllliiiinnnntttt      Provide warnings about constructs that are
                      dubious or non-portable to other AWK
                      implementations.
          ----WWWW ppppoooossssiiiixxxx
          --------ppppoooossssiiiixxxx     This turns on _c_o_m_p_a_t_i_b_i_l_i_t_y mode, with the
                      following additional restrictions:

                      o+ \\\\xxxx escape sequences are not recognized.

                      o+ The synonym ffffuuuunnnncccc for the keyword ffffuuuunnnnccccttttiiiioooonnnn is
                        not recognized.




     Page 2                                          (printed 7/10/96)






     GGGGAAAAWWWWKKKK((((1111))))      FFFFrrrreeeeeeee SSSSooooffffttttwwwwaaaarrrreeee FFFFoooouuuunnnnddddaaaattttiiiioooonnnn ((((NNNNoooovvvv 22224444 1111999999994444))))       GGGGAAAAWWWWKKKK((((1111))))



                      o+ The operators ******** and ********==== cannot be used in
                        place of ^^^^ and ^^^^====.

          ----WWWW ssssoooouuuurrrrcccceeee====_p_r_o_g_r_a_m-_t_e_x_t
          --------ssssoooouuuurrrrcccceeee====_p_r_o_g_r_a_m-_t_e_x_t
                      Use _p_r_o_g_r_a_m-_t_e_x_t as AWK program source code.
                      This option allows the easy intermixing of
                      library functions (used via the ----ffff and --------ffffiiiilllleeee
                      options) with source code entered on the command
                      line.  It is intended primarily for medium to
                      large size AWK programs used in shell scripts.
9                      The ----WWWW ssssoooouuuurrrrcccceeee==== form of this option uses the rest
                      of the command line argument for _p_r_o_g_r_a_m-_t_e_x_t;
                      no other options to ----WWWW will be recognized in the
                      same argument.

          ----WWWW vvvveeeerrrrssssiiiioooonnnn
          --------vvvveeeerrrrssssiiiioooonnnn   Print version information for this particular
                      copy of _g_a_w_k on the error output.  This is
                      useful mainly for knowing if the current copy of
                      _g_a_w_k on your system is up to date with respect
                      to whatever the Free Software Foundation is
                      distributing.  Per the GNU Coding Standards,
                      these options cause an immediate, successful
                      exit.

          --------          Signal the end of options. This is useful to
                      allow further arguments to the AWK program
                      itself to start with a ``-''.  This is mainly
                      for consistency with the argument parsing
                      convention used by most other POSIX programs.

          In compatibility mode, any other options are flagged as
          illegal, but are otherwise ignored.  In normal operation, as
          long as program text has been supplied, unknown options are
          passed on to the AWK program in the AAAARRRRGGGGVVVV array for
          processing.  This is particularly useful for running AWK
          programs via the ``#!'' executable interpreter mechanism.

     AAAAWWWWKKKK PPPPRRRROOOOGGGGRRRRAAAAMMMM EEEEXXXXEEEECCCCUUUUTTTTIIIIOOOONNNN
          An AWK program consists of a sequence of pattern-action
          statements and optional function definitions.

               _p_a_t_t_e_r_n   {{{{ _a_c_t_i_o_n _s_t_a_t_e_m_e_n_t_s }}}}
               ffffuuuunnnnccccttttiiiioooonnnn _n_a_m_e((((_p_a_r_a_m_e_t_e_r _l_i_s_t)))) {{{{ _s_t_a_t_e_m_e_n_t_s }}}}

          _G_a_w_k first reads the program source from the _p_r_o_g_r_a_m-_f_i_l_e(s)
          if specified, from arguments to ----WWWW ssssoooouuuurrrrcccceeee====, or from the
          first non-option argument on the command line.  The ----ffff and
          ----WWWW ssssoooouuuurrrrcccceeee==== options may be used multiple times on the command
          line.  _G_a_w_k will read the program text as if all the
          _p_r_o_g_r_a_m-_f_i_l_es and command line source texts had been


9     Page 3                                          (printed 7/10/96)






     GGGGAAAAWWWWKKKK((((1111))))      FFFFrrrreeeeeeee SSSSooooffffttttwwwwaaaarrrreeee FFFFoooouuuunnnnddddaaaattttiiiioooonnnn ((((NNNNoooovvvv 22224444 1111999999994444))))       GGGGAAAAWWWWKKKK((((1111))))



          concatenated together.  This is useful for building
          libraries of AWK functions, without having to include them
          in each new AWK program that uses them.  It also provides
          the ability to mix library functions with command line
          programs.

          The environment variable AAAAWWWWKKKKPPPPAAAATTTTHHHH specifies a search path to
          use when finding source files named with the ----ffff option.  If
          this variable does not exist, the default path is
          """"....::::////uuuussssrrrr////lllliiiibbbb////aaaawwwwkkkk::::////uuuussssrrrr////llllooooccccaaaallll////lllliiiibbbb////aaaawwwwkkkk"""".  If a file name given
          to the ----ffff option contains a ``/'' character, no path search
          is performed.

          _G_a_w_k executes AWK programs in the following order.  First,
          all variable assignments specified via the ----vvvv option are
          performed.  Next, _g_a_w_k compiles the program into an internal
          form.  Then, _g_a_w_k executes the code in the BBBBEEEEGGGGIIIINNNN block(s)
          (if any), and then proceeds to read each file named in the
          AAAARRRRGGGGVVVV array.  If there are no files named on the command
          line, _g_a_w_k reads the standard input.

          If a filename on the command line has the form _v_a_r====_v_a_l it is
          treated as a variable assignment. The variable _v_a_r will be
          assigned the value _v_a_l.  (This happens after any BBBBEEEEGGGGIIIINNNN
          block(s) have been run.) Command line variable assignment is
          most useful for dynamically assigning values to the
          variables AWK uses to control how input is broken into
          fields and records. It is also useful for controlling state
          if multiple passes are needed over a single data file.

          If the value of a particular element of AAAARRRRGGGGVVVV is empty (""""""""),
          _g_a_w_k skips over it.

          For each line in the input, _g_a_w_k tests to see if it matches
          any _p_a_t_t_e_r_n in the AWK program.  For each pattern that the
          line matches, the associated _a_c_t_i_o_n is executed.  The
          patterns are tested in the order they occur in the program.

          Finally, after all the input is exhausted, _g_a_w_k executes the
          code in the EEEENNNNDDDD block(s) (if any).

     VVVVAAAARRRRIIIIAAAABBBBLLLLEEEESSSS AAAANNNNDDDD FFFFIIIIEEEELLLLDDDDSSSS
          AWK variables are dynamic; they come into existence when
          they are first used. Their values are either floating-point
          numbers or strings, or both, depending upon how they are
          used. AWK also has one dimensional arrays; arrays with
          multiple dimensions may be simulated.  Several pre-defined
          variables are set as a program runs; these will be described
          as needed and summarized below.

        FFFFiiiieeeellllddddssss
          As each input line is read, _g_a_w_k splits the line into



     Page 4                                          (printed 7/10/96)






     GGGGAAAAWWWWKKKK((((1111))))      FFFFrrrreeeeeeee SSSSooooffffttttwwwwaaaarrrreeee FFFFoooouuuunnnnddddaaaattttiiiioooonnnn ((((NNNNoooovvvv 22224444 1111999999994444))))       GGGGAAAAWWWWKKKK((((1111))))



          _f_i_e_l_d_s, using the value of the FFFFSSSS variable as the field
          separator.  If FFFFSSSS is a single character, fields are
          separated by that character.  Otherwise, FFFFSSSS is expected to
          be a full regular expression.  In the special case that FFFFSSSS
          is a single blank, fields are separated by runs of blanks
          and/or tabs.  Note that the value of IIIIGGGGNNNNOOOORRRREEEECCCCAAAASSSSEEEE (see below)
          will also affect how fields are split when FFFFSSSS is a regular
          expression.

          If the FFFFIIIIEEEELLLLDDDDWWWWIIIIDDDDTTTTHHHHSSSS variable is set to a space separated list
          of numbers, each field is expected to have fixed width, and
          _g_a_w_k will split up the record using the specified widths.
          The value of FFFFSSSS is ignored.  Assigning a new value to FFFFSSSS
          overrides the use of FFFFIIIIEEEELLLLDDDDWWWWIIIIDDDDTTTTHHHHSSSS, and restores the default
          behavior.

          Each field in the input line may be referenced by its
          position, $$$$1111, $$$$2222, and so on.  $$$$0000 is the whole line. The
          value of a field may be assigned to as well.  Fields need
          not be referenced by constants:

               nnnn ==== 5555
               pppprrrriiiinnnntttt $$$$nnnn

          prints the fifth field in the input line.  The variable NNNNFFFF
          is set to the total number of fields in the input line.

          References to non-existent fields (i.e. fields after $$$$NNNNFFFF)
          produce the null-string. However, assigning to a non-
          existent field (e.g., $$$$((((NNNNFFFF++++2222)))) ==== 5555) will increase the value
          of NNNNFFFF, create any intervening fields with the null string as
          their value, and cause the value of $$$$0000 to be recomputed,
          with the fields being separated by the value of OOOOFFFFSSSS.
          References to negative numbered fields cause a fatal error.

        BBBBuuuuiiiilllltttt----iiiinnnn VVVVaaaarrrriiiiaaaabbbblllleeeessss
          AWK's built-in variables are:

          AAAARRRRGGGGCCCC        The number of command line arguments (does not
                      include options to _g_a_w_k, or the program source).

          AAAARRRRGGGGIIIINNNNDDDD      The index in AAAARRRRGGGGVVVV of the current file being
                      processed.

          AAAARRRRGGGGVVVV        Array of command line arguments. The array is
                      indexed from 0 to AAAARRRRGGGGCCCC - 1.  Dynamically
                      changing the contents of AAAARRRRGGGGVVVV can control the
                      files used for data.

          CCCCOOOONNNNVVVVFFFFMMMMTTTT     The conversion format for numbers, """"%%%%....6666gggg"""", by
                      default.




     Page 5                                          (printed 7/10/96)






     GGGGAAAAWWWWKKKK((((1111))))      FFFFrrrreeeeeeee SSSSooooffffttttwwwwaaaarrrreeee FFFFoooouuuunnnnddddaaaattttiiiioooonnnn ((((NNNNoooovvvv 22224444 1111999999994444))))       GGGGAAAAWWWWKKKK((((1111))))



          EEEENNNNVVVVIIIIRRRROOOONNNN     An array containing the values of the current
                      environment.  The array is indexed by the
                      environment variables, each element being the
                      value of that variable (e.g., EEEENNNNVVVVIIIIRRRROOOONNNN[[[[""""HHHHOOOOMMMMEEEE""""]]]]
                      might be ////uuuu////aaaarrrrnnnnoooolllldddd).  Changing this array does
                      not affect the environment seen by programs
                      which _g_a_w_k spawns via redirection or the
                      ssssyyyysssstttteeeemmmm(((()))) function.  (This may change in a future
                      version of _g_a_w_k.)

          EEEERRRRRRRRNNNNOOOO       If a system error occurs either doing a
                      redirection for ggggeeeettttlllliiiinnnneeee, during a read for
                      ggggeeeettttlllliiiinnnneeee, or during a cccclllloooosssseeee(((()))), then EEEERRRRRRRRNNNNOOOO will
                      contain a string describing the error.

          FFFFIIIIEEEELLLLDDDDWWWWIIIIDDDDTTTTHHHHSSSS A white-space separated list of fieldwidths.
                      When set, _g_a_w_k parses the input into fields of
                      fixed width, instead of using the value of the
                      FFFFSSSS variable as the field separator.  The fixed
                      field width facility is still experimental;
                      expect the semantics to change as _g_a_w_k evolves
                      over time.

          FFFFIIIILLLLEEEENNNNAAAAMMMMEEEE    The name of the current input file.  If no files
                      are specified on the command line, the value of
                      FFFFIIIILLLLEEEENNNNAAAAMMMMEEEE is ``-''.  However, FFFFIIIILLLLEEEENNNNAAAAMMMMEEEE is
                      undefined inside the BBBBEEEEGGGGIIIINNNN block.

          FFFFNNNNRRRR         The input record number in the current input
                      file.

          FFFFSSSS          The input field separator, a blank by default.

          IIIIGGGGNNNNOOOORRRREEEECCCCAAAASSSSEEEE  Controls the case-sensitivity of all regular
                      expression operations. If IIIIGGGGNNNNOOOORRRREEEECCCCAAAASSSSEEEE has a non-
                      zero value, then pattern matching in rules,
                      field splitting with FFFFSSSS, regular expression
                      matching with ~~~~ and !!!!~~~~, and the ggggssssuuuubbbb(((()))), iiiinnnnddddeeeexxxx(((()))),
                      mmmmaaaattttcccchhhh(((()))), sssspppplllliiiitttt(((()))), and ssssuuuubbbb(((()))) pre-defined
                      functions will all ignore case when doing
                      regular expression operations.  Thus, if
                      IIIIGGGGNNNNOOOORRRREEEECCCCAAAASSSSEEEE is not equal to zero, ////aaaaBBBB//// matches
                      all of the strings """"aaaabbbb"""", """"aaaaBBBB"""", """"AAAAbbbb"""", and """"AAAABBBB"""".
                      As with all AWK variables, the initial value of
                      IIIIGGGGNNNNOOOORRRREEEECCCCAAAASSSSEEEE is zero, so all regular expression
                      operations are normally case-sensitive.

          NNNNFFFF          The number of fields in the current input
                      record.

          NNNNRRRR          The total number of input records seen so far.




     Page 6                                          (printed 7/10/96)






     GGGGAAAAWWWWKKKK((((1111))))      FFFFrrrreeeeeeee SSSSooooffffttttwwwwaaaarrrreeee FFFFoooouuuunnnnddddaaaattttiiiioooonnnn ((((NNNNoooovvvv 22224444 1111999999994444))))       GGGGAAAAWWWWKKKK((((1111))))



          OOOOFFFFMMMMTTTT        The output format for numbers, """"%%%%....6666gggg"""", by
                      default.

          OOOOFFFFSSSS         The output field separator, a blank by default.

          OOOORRRRSSSS         The output record separator, by default a
                      newline.

          RRRRSSSS          The input record separator, by default a
                      newline.  RRRRSSSS is exceptional in that only the
                      first character of its string value is used for
                      separating records.  (This will probably change
                      in a future release of _g_a_w_k.) If RRRRSSSS is set to
                      the null string, then records are separated by
                      blank lines.  When RRRRSSSS is set to the null string,
                      then the newline character always acts as a
                      field separator, in addition to whatever value
                      FFFFSSSS may have.

          RRRRSSSSTTTTAAAARRRRTTTT      The index of the first character matched by
                      mmmmaaaattttcccchhhh(((()))); 0 if no match.

          RRRRLLLLEEEENNNNGGGGTTTTHHHH     The length of the string matched by mmmmaaaattttcccchhhh(((()))); -1
                      if no match.

          SSSSUUUUBBBBSSSSEEEEPPPP      The character used to separate multiple
                      subscripts in array elements, by default """"\\\\000033334444"""".

        AAAArrrrrrrraaaayyyyssss
          Arrays are subscripted with an expression between square
          brackets ([[[[ and ]]]]).  If the expression is an expression list
          (_e_x_p_r, _e_x_p_r ...) then the array subscript is a string
          consisting of the concatenation of the (string) value of
          each expression, separated by the value of the SSSSUUUUBBBBSSSSEEEEPPPP
          variable.  This facility is used to simulate multiply
          dimensioned arrays. For example:

               iiii ==== """"AAAA"""" ;;;; jjjj ==== """"BBBB"""" ;;;; kkkk ==== """"CCCC""""
               xxxx[[[[iiii,,,, jjjj,,,, kkkk]]]] ==== """"hhhheeeelllllllloooo,,,, wwwwoooorrrrlllldddd\\\\nnnn""""

          assigns the string """"hhhheeeelllllllloooo,,,, wwwwoooorrrrlllldddd\\\\nnnn"""" to the element of the
          array xxxx which is indexed by the string """"AAAA\\\\000033334444BBBB\\\\000033334444CCCC"""". All
          arrays in AWK are associative, i.e. indexed by string
          values.

          The special operator iiiinnnn may be used in an iiiiffff or wwwwhhhhiiiilllleeee
          statement to see if an array has an index consisting of a
          particular value.

               iiiiffff ((((vvvvaaaallll iiiinnnn aaaarrrrrrrraaaayyyy))))
                    pppprrrriiiinnnntttt aaaarrrrrrrraaaayyyy[[[[vvvvaaaallll]]]]




     Page 7                                          (printed 7/10/96)






     GGGGAAAAWWWWKKKK((((1111))))      FFFFrrrreeeeeeee SSSSooooffffttttwwwwaaaarrrreeee FFFFoooouuuunnnnddddaaaattttiiiioooonnnn ((((NNNNoooovvvv 22224444 1111999999994444))))       GGGGAAAAWWWWKKKK((((1111))))



          If the array has multiple subscripts, use ((((iiii,,,, jjjj)))) iiiinnnn aaaarrrrrrrraaaayyyy.

          The iiiinnnn construct may also be used in a ffffoooorrrr loop to iterate
          over all the elements of an array.

          An element may be deleted from an array using the ddddeeeelllleeeetttteeee
          statement.  The ddddeeeelllleeeetttteeee statement may also be used to delete
          the entire contents of an array.

        VVVVaaaarrrriiiiaaaabbbblllleeee TTTTyyyyppppiiiinnnngggg AAAAnnnndddd CCCCoooonnnnvvvveeeerrrrssssiiiioooonnnn
          Variables and fields may be (floating point) numbers, or
          strings, or both. How the value of a variable is interpreted
          depends upon its context. If used in a numeric expression,
          it will be treated as a number, if used as a string it will
          be treated as a string.

          To force a variable to be treated as a number, add 0 to it;
          to force it to be treated as a string, concatenate it with
          the null string.

          When a string must be converted to a number, the conversion
          is accomplished using _a_t_o_f(3).  A number is converted to a
          string by using the value of CCCCOOOONNNNVVVVFFFFMMMMTTTT as a format string for
          _s_p_r_i_n_t_f(3), with the numeric value of the variable as the
          argument.  However, even though all numbers in AWK are
          floating-point, integral values are _a_l_w_a_y_s converted as
          integers.  Thus, given

               CCCCOOOONNNNVVVVFFFFMMMMTTTT ==== """"%%%%2222....2222ffff""""
               aaaa ==== 11112222
               bbbb ==== aaaa """"""""

          the variable bbbb has a string value of """"11112222"""" and not """"11112222....00000000"""".

          _G_a_w_k performs comparisons as follows: If two variables are
          numeric, they are compared numerically.  If one value is
          numeric and the other has a string value that is a ``numeric
          string,'' then comparisons are also done numerically.
          Otherwise, the numeric value is converted to a string and a
          string comparison is performed.  Two strings are compared,
          of course, as strings.  According to the POSIX standard,
          even if two strings are numeric strings, a numeric
          comparison is performed.  However, this is clearly
          incorrect, and _g_a_w_k does not do this.

          Uninitialized variables have the numeric value 0 and the
          string value "" (the null, or empty, string).

     PPPPAAAATTTTTTTTEEEERRRRNNNNSSSS AAAANNNNDDDD AAAACCCCTTTTIIIIOOOONNNNSSSS
          AWK is a line oriented language. The pattern comes first,
          and then the action. Action statements are enclosed in {{{{ and
          }}}}.  Either the pattern may be missing, or the action may be



     Page 8                                          (printed 7/10/96)






     GGGGAAAAWWWWKKKK((((1111))))      FFFFrrrreeeeeeee SSSSooooffffttttwwwwaaaarrrreeee FFFFoooouuuunnnnddddaaaattttiiiioooonnnn ((((NNNNoooovvvv 22224444 1111999999994444))))       GGGGAAAAWWWWKKKK((((1111))))



          missing, but, of course, not both. If the pattern is
          missing, the action will be executed for every single line
          of input.  A missing action is equivalent to

               {{{{ pppprrrriiiinnnntttt }}}}

          which prints the entire line.

          Comments begin with the ``#'' character, and continue until
          the end of the line.  Blank lines may be used to separate
          statements.  Normally, a statement ends with a newline,
          however, this is not the case for lines ending in a ``,'',
          ``{'', ``?'', ``:'', ``&&'', or ``||''.  Lines ending in ddddoooo
          or eeeellllsssseeee also have their statements automatically continued
          on the following line.  In other cases, a line can be
          continued by ending it with a ``\'', in which case the
          newline will be ignored.

          Multiple statements may be put on one line by separating
          them with a ``;''.  This applies to both the statements
          within the action part of a pattern-action pair (the usual
          case), and to the pattern-action statements themselves.

        PPPPaaaatttttttteeeerrrrnnnnssss
          AWK patterns may be one of the following:

               BBBBEEEEGGGGIIIINNNN
               EEEENNNNDDDD
               ////_r_e_g_u_l_a_r _e_x_p_r_e_s_s_i_o_n////
               _r_e_l_a_t_i_o_n_a_l _e_x_p_r_e_s_s_i_o_n
               _p_a_t_t_e_r_n &&&&&&&& _p_a_t_t_e_r_n
               _p_a_t_t_e_r_n |||||||| _p_a_t_t_e_r_n
               _p_a_t_t_e_r_n ???? _p_a_t_t_e_r_n :::: _p_a_t_t_e_r_n
               ((((_p_a_t_t_e_r_n))))
               !!!! _p_a_t_t_e_r_n
               _p_a_t_t_e_r_n_1,,,, _p_a_t_t_e_r_n_2

          BBBBEEEEGGGGIIIINNNN and EEEENNNNDDDD are two special kinds of patterns which are
          not tested against the input.  The action parts of all BBBBEEEEGGGGIIIINNNN
          patterns are merged as if all the statements had been
          written in a single BBBBEEEEGGGGIIIINNNN block. They are executed before
          any of the input is read. Similarly, all the EEEENNNNDDDD blocks are
          merged, and executed when all the input is exhausted (or
          when an eeeexxxxiiiitttt statement is executed).  BBBBEEEEGGGGIIIINNNN and EEEENNNNDDDD patterns
          cannot be combined with other patterns in pattern
          expressions.  BBBBEEEEGGGGIIIINNNN and EEEENNNNDDDD patterns cannot have missing
          action parts.

          For ////_r_e_g_u_l_a_r _e_x_p_r_e_s_s_i_o_n//// patterns, the associated statement
          is executed for each input line that matches the regular
          expression.  Regular expressions are the same as those in
          _e_g_r_e_p(1), and are summarized below.



     Page 9                                          (printed 7/10/96)






     GGGGAAAAWWWWKKKK((((1111))))      FFFFrrrreeeeeeee SSSSooooffffttttwwwwaaaarrrreeee FFFFoooouuuunnnnddddaaaattttiiiioooonnnn ((((NNNNoooovvvv 22224444 1111999999994444))))       GGGGAAAAWWWWKKKK((((1111))))



          A _r_e_l_a_t_i_o_n_a_l _e_x_p_r_e_s_s_i_o_n may use any of the operators defined
          below in the section on actions.  These generally test
          whether certain fields match certain regular expressions.

          The &&&&&&&&, ||||||||, and !!!! operators are logical AND, logical OR, and
          logical NOT, respectively, as in C.  They do short-circuit
          evaluation, also as in C, and are used for combining more
          primitive pattern expressions. As in most languages,
          parentheses may be used to change the order of evaluation.

          The ????:::: operator is like the same operator in C. If the first
          pattern is true then the pattern used for testing is the
          second pattern, otherwise it is the third. Only one of the
          second and third patterns is evaluated.

          The _p_a_t_t_e_r_n_1,,,, _p_a_t_t_e_r_n_2 form of an expression is called a
          _r_a_n_g_e _p_a_t_t_e_r_n.  It matches all input records starting with a
          line that matches _p_a_t_t_e_r_n_1, and continuing until a record
          that matches _p_a_t_t_e_r_n_2, inclusive. It does not combine with
          any other sort of pattern expression.

        RRRReeeegggguuuullllaaaarrrr EEEExxxxpppprrrreeeessssssssiiiioooonnnnssss
          Regular expressions are the extended kind found in _e_g_r_e_p.
          They are composed of characters as follows:

          _c          matches the non-metacharacter _c.

          _\_c         matches the literal character _c.

          ....          matches any character except newline.

          ^^^^          matches the beginning of a line or a string.

          $$$$          matches the end of a line or a string.

          [[[[_a_b_c...]]]]   character class, matches any of the characters
                     _a_b_c....

          [[[[^^^^_a_b_c...]]]]  negated character class, matches any character
                     except _a_b_c... and newline.

          _r_1||||_r_2      alternation: matches either _r_1 or _r_2.

          _r_1_r_2       concatenation: matches _r_1, and then _r_2.

          _r++++         matches one or more _r's.

          _r****         matches zero or more _r's.

          _r????         matches zero or one _r's.

          ((((_r))))        grouping: matches _r.



     Page 10                                         (printed 7/10/96)






     GGGGAAAAWWWWKKKK((((1111))))      FFFFrrrreeeeeeee SSSSooooffffttttwwwwaaaarrrreeee FFFFoooouuuunnnnddddaaaattttiiiioooonnnn ((((NNNNoooovvvv 22224444 1111999999994444))))       GGGGAAAAWWWWKKKK((((1111))))



          The escape sequences that are valid in string constants (see
          below) are also legal in regular expressions.

        AAAAccccttttiiiioooonnnnssss
          Action statements are enclosed in braces, {{{{ and }}}}.  Action
          statements consist of the usual assignment, conditional, and
          looping statements found in most languages. The operators,
          control statements, and input/output statements available
          are patterned after those in C.

        OOOOppppeeeerrrraaaattttoooorrrrssss
          The operators in AWK, in order of increasing precedence, are

          ==== ++++==== ----====
          ****==== ////==== %%%%==== ^^^^==== Assignment. Both absolute assignment ((((_v_a_r ====
                      _v_a_l_u_e)))) and operator-assignment (the other forms)
                      are supported.

          ????::::          The C conditional expression. This has the form
                      _e_x_p_r_1 ???? _e_x_p_r_2 :::: _e_x_p_r_3. If _e_x_p_r_1 is true, the
                      value of the expression is _e_x_p_r_2, otherwise it
                      is _e_x_p_r_3.  Only one of _e_x_p_r_2 and _e_x_p_r_3 is
                      evaluated.

          ||||||||          Logical OR.

          &&&&&&&&          Logical AND.

          ~~~~ !!!!~~~~        Regular expression match, negated match.  NNNNOOOOTTTTEEEE::::
                      Do not use a constant regular expression (////ffffoooooooo////)
                      on the left-hand side of a ~~~~ or !!!!~~~~.  Only use
                      one on the right-hand side.  The expression
                      ////ffffoooooooo//// ~~~~ _e_x_p has the same meaning as (((((((($$$$0000 ~~~~
                      ////ffffoooooooo////)))) ~~~~ _e_x_p)))).  This is usually _n_o_t what was
                      intended.

          <<<< >>>>
          <<<<==== >>>>====
          !!!!==== ========       The regular relational operators.

          _b_l_a_n_k       String concatenation.

          ++++ ----         Addition and subtraction.

          **** //// %%%%       Multiplication, division, and modulus.

          ++++ ---- !!!!       Unary plus, unary minus, and logical negation.

          ^^^^           Exponentiation (******** may also be used, and ********==== for
                      the assignment operator).

          ++++++++ --------       Increment and decrement, both prefix and



     Page 11                                         (printed 7/10/96)






     GGGGAAAAWWWWKKKK((((1111))))      FFFFrrrreeeeeeee SSSSooooffffttttwwwwaaaarrrreeee FFFFoooouuuunnnnddddaaaattttiiiioooonnnn ((((NNNNoooovvvv 22224444 1111999999994444))))       GGGGAAAAWWWWKKKK((((1111))))



                      postfix.

          $$$$           Field reference.

        CCCCoooonnnnttttrrrroooollll SSSSttttaaaatttteeeemmmmeeeennnnttttssss
          The control statements are as follows:

               iiiiffff ((((_c_o_n_d_i_t_i_o_n)))) _s_t_a_t_e_m_e_n_t [ eeeellllsssseeee _s_t_a_t_e_m_e_n_t ]
               wwwwhhhhiiiilllleeee ((((_c_o_n_d_i_t_i_o_n)))) _s_t_a_t_e_m_e_n_t
               ddddoooo _s_t_a_t_e_m_e_n_t wwwwhhhhiiiilllleeee ((((_c_o_n_d_i_t_i_o_n))))
               ffffoooorrrr ((((_e_x_p_r_1;;;; _e_x_p_r_2;;;; _e_x_p_r_3)))) _s_t_a_t_e_m_e_n_t
               ffffoooorrrr ((((_v_a_r iiiinnnn _a_r_r_a_y)))) _s_t_a_t_e_m_e_n_t
               bbbbrrrreeeeaaaakkkk
               ccccoooonnnnttttiiiinnnnuuuueeee
               ddddeeeelllleeeetttteeee _a_r_r_a_y[[[[_i_n_d_e_x]]]]
               ddddeeeelllleeeetttteeee _a_r_r_a_y
               eeeexxxxiiiitttt [ _e_x_p_r_e_s_s_i_o_n ]
               {{{{ _s_t_a_t_e_m_e_n_t_s }}}}

        IIII////OOOO SSSSttttaaaatttteeeemmmmeeeennnnttttssss
          The input/output statements are as follows:

          cccclllloooosssseeee((((_f_i_l_e_n_a_m_e))))       Close file (or pipe, see below).

          ggggeeeettttlllliiiinnnneeee               Set $$$$0000 from next input record; set NNNNFFFF,
                                NNNNRRRR, FFFFNNNNRRRR.

          ggggeeeettttlllliiiinnnneeee <<<<_f_i_l_e         Set $$$$0000 from next record of _f_i_l_e; set
                                NNNNFFFF.

          ggggeeeettttlllliiiinnnneeee _v_a_r           Set _v_a_r from next input record; set
                                NNNNFFFF, FFFFNNNNRRRR.

          ggggeeeettttlllliiiinnnneeee _v_a_r <<<<_f_i_l_e     Set _v_a_r from next record of _f_i_l_e.

          nnnneeeexxxxtttt                  Stop processing the current input
                                record. The next input record is read
                                and processing starts over with the
                                first pattern in the AWK program. If
                                the end of the input data is reached,
                                the EEEENNNNDDDD block(s), if any, are
                                executed.

          nnnneeeexxxxtttt ffffiiiilllleeee             Stop processing the current input
                                file.  The next input record read
                                comes from the next input file.
                                FFFFIIIILLLLEEEENNNNAAAAMMMMEEEE is updated, FFFFNNNNRRRR is reset to
                                1, and processing starts over with the
                                first pattern in the AWK program. If
                                the end of the input data is reached,
                                the EEEENNNNDDDD block(s), if any, are
                                executed.



     Page 12                                         (printed 7/10/96)






     GGGGAAAAWWWWKKKK((((1111))))      FFFFrrrreeeeeeee SSSSooooffffttttwwwwaaaarrrreeee FFFFoooouuuunnnnddddaaaattttiiiioooonnnn ((((NNNNoooovvvv 22224444 1111999999994444))))       GGGGAAAAWWWWKKKK((((1111))))



          pppprrrriiiinnnntttt                 Prints the current record.

          pppprrrriiiinnnntttt _e_x_p_r-_l_i_s_t       Prints expressions.  Each expression
                                is separated by the value of the OOOOFFFFSSSS
                                variable. The output record is
                                terminated with the value of the OOOORRRRSSSS
                                variable.

          pppprrrriiiinnnntttt _e_x_p_r-_l_i_s_t >>>>_f_i_l_e Prints expressions on _f_i_l_e.  Each
                                expression is separated by the value
                                of the OOOOFFFFSSSS variable. The output record
                                is terminated with the value of the
                                OOOORRRRSSSS variable.

          pppprrrriiiinnnnttttffff _f_m_t, _e_x_p_r-_l_i_s_t Format and print.

          pppprrrriiiinnnnttttffff _f_m_t, _e_x_p_r-_l_i_s_t >>>>_f_i_l_e
                                Format and print on _f_i_l_e.

          ssssyyyysssstttteeeemmmm((((_c_m_d-_l_i_n_e))))      Execute the command _c_m_d-_l_i_n_e, and
                                return the exit status.  (This may not
                                be available on non-POSIX systems.)

          Other input/output redirections are also allowed. For pppprrrriiiinnnntttt
          and pppprrrriiiinnnnttttffff, >>>>>>>>_f_i_l_e appends output to the _f_i_l_e, while ||||
          _c_o_m_m_a_n_d writes on a pipe.  In a similar fashion, _c_o_m_m_a_n_d ||||
          ggggeeeettttlllliiiinnnneeee pipes into ggggeeeettttlllliiiinnnneeee.  The ggggeeeettttlllliiiinnnneeee command will return
          0 on end of file, and -1 on an error.

        TTTThhhheeee _p_r_i_n_t_f SSSSttttaaaatttteeeemmmmeeeennnntttt
          The AWK versions of the pppprrrriiiinnnnttttffff statement and sssspppprrrriiiinnnnttttffff(((())))
          function (see below) accept the following conversion
          specification formats:

          %%%%cccc   An ASCII character.  If the argument used for %%%%cccc is
               numeric, it is treated as a character and printed.
               Otherwise, the argument is assumed to be a string, and
               the only first character of that string is printed.

          %%%%dddd   A decimal number (the integer part).

          %%%%iiii   Just like %%%%dddd.

          %%%%eeee   A floating point number of the form [[[[----]]]]dddd....ddddddddddddddddddddddddEEEE[[[[++++----]]]]dddddddd.

          %%%%ffff   A floating point number of the form [[[[----]]]]dddddddddddd....dddddddddddddddddddddddd.

          %%%%gggg   Use eeee or ffff conversion, whichever is shorter, with
               nonsignificant zeros suppressed.

          %%%%oooo   An unsigned octal number (again, an integer).




     Page 13                                         (printed 7/10/96)






     GGGGAAAAWWWWKKKK((((1111))))      FFFFrrrreeeeeeee SSSSooooffffttttwwwwaaaarrrreeee FFFFoooouuuunnnnddddaaaattttiiiioooonnnn ((((NNNNoooovvvv 22224444 1111999999994444))))       GGGGAAAAWWWWKKKK((((1111))))



          %%%%ssss   A character string.

          %%%%xxxx   An unsigned hexadecimal number (an integer).

          %%%%XXXX   Like %%%%xxxx, but using AAAABBBBCCCCDDDDEEEEFFFF instead of aaaabbbbccccddddeeeeffff.

          %%%%%%%%   A single %%%% character; no argument is converted.

          There are optional, additional parameters that may lie
          between the %%%% and the control letter:

          ----    The expression should be left-justified within its
               field.

          _w_i_d_t_h
               The field should be padded to this width. If the number
               has a leading zero, then the field will be padded with
               zeros.  Otherwise it is padded with blanks.  This
               applies even to the non-numeric output formats.

          ...._p_r_e_c
               A number indicating the maximum width of strings or
               digits to the right of the decimal point.

          The dynamic _w_i_d_t_h and _p_r_e_c capabilities of the ANSI C
          pppprrrriiiinnnnttttffff(((()))) routines are supported.  A **** in place of either the
          wwwwiiiiddddtttthhhh or pppprrrreeeecccc specifications will cause their values to be
          taken from the argument list to pppprrrriiiinnnnttttffff or sssspppprrrriiiinnnnttttffff(((()))).

        SSSSppppeeeecccciiiiaaaallll FFFFiiiilllleeee NNNNaaaammmmeeeessss
          When doing I/O redirection from either pppprrrriiiinnnntttt or pppprrrriiiinnnnttttffff into
          a file, or via ggggeeeettttlllliiiinnnneeee from a file, _g_a_w_k recognizes certain
          special filenames internally.  These filenames allow access
          to open file descriptors inherited from _g_a_w_k's parent
          process (usually the shell).  Other special filenames
          provide access information about the running ggggaaaawwwwkkkk process.
          The filenames are:

          ////ddddeeeevvvv////ppppiiiidddd    Reading this file returns the process ID of the
                      current process, in decimal, terminated with a
                      newline.

          ////ddddeeeevvvv////ppppppppiiiidddd   Reading this file returns the parent process ID
                      of the current process, in decimal, terminated
                      with a newline.

          ////ddddeeeevvvv////ppppggggrrrrppppiiiidddd Reading this file returns the process group ID
                      of the current process, in decimal, terminated
                      with a newline.

          ////ddddeeeevvvv////uuuusssseeeerrrr   Reading this file returns a single record
                      terminated with a newline.  The fields are



     Page 14                                         (printed 7/10/96)






     GGGGAAAAWWWWKKKK((((1111))))      FFFFrrrreeeeeeee SSSSooooffffttttwwwwaaaarrrreeee FFFFoooouuuunnnnddddaaaattttiiiioooonnnn ((((NNNNoooovvvv 22224444 1111999999994444))))       GGGGAAAAWWWWKKKK((((1111))))



                      separated with blanks.  $$$$1111 is the value of the
                      _g_e_t_u_i_d(2) system call, $$$$2222 is the value of the
                      _g_e_t_e_u_i_d(2) system call, $$$$3333 is the value of the
                      _g_e_t_g_i_d(2) system call, and $$$$4444 is the value of
                      the _g_e_t_e_g_i_d(2) system call.  If there are any
                      additional fields, they are the group IDs
                      returned by _g_e_t_g_r_o_u_p_s(2).  Multiple groups may
                      not be supported on all systems.

          ////ddddeeeevvvv////ssssttttddddiiiinnnn  The standard input.

          ////ddddeeeevvvv////ssssttttddddoooouuuutttt The standard output.

          ////ddddeeeevvvv////ssssttttddddeeeerrrrrrrr The standard error output.

          ////ddddeeeevvvv////ffffdddd////_n   The file associated with the open file
                      descriptor _n.

          These are particularly useful for error messages. For
          example:

               pppprrrriiiinnnntttt """"YYYYoooouuuu bbbblllleeeewwww iiiitttt!!!!"""" >>>> """"////ddddeeeevvvv////ssssttttddddeeeerrrrrrrr""""

          whereas you would otherwise have to use

               pppprrrriiiinnnntttt """"YYYYoooouuuu bbbblllleeeewwww iiiitttt!!!!"""" |||| """"ccccaaaatttt 1111>>>>&&&&2222""""

          These file names may also be used on the command line to
          name data files.

        NNNNuuuummmmeeeerrrriiiicccc FFFFuuuunnnnccccttttiiiioooonnnnssss
          AWK has the following pre-defined arithmetic functions:

          aaaattttaaaannnn2222((((_y,,,, _x)))) returns the arctangent of _y/_x in radians.

          ccccoooossss((((_e_x_p_r))))   returns the cosine in radians.

          eeeexxxxpppp((((_e_x_p_r))))   the exponential function.

          iiiinnnntttt((((_e_x_p_r))))   truncates to integer.

          lllloooogggg((((_e_x_p_r))))   the natural logarithm function.

          rrrraaaannnndddd(((())))      returns a random number between 0 and 1.

          ssssiiiinnnn((((_e_x_p_r))))   returns the sine in radians.

          ssssqqqqrrrrtttt((((_e_x_p_r))))  the square root function.

          ssssrrrraaaannnndddd((((_e_x_p_r)))) use _e_x_p_r as a new seed for the random number
                      generator. If no _e_x_p_r is provided, the time of
                      day will be used.  The return value is the



     Page 15                                         (printed 7/10/96)






     GGGGAAAAWWWWKKKK((((1111))))      FFFFrrrreeeeeeee SSSSooooffffttttwwwwaaaarrrreeee FFFFoooouuuunnnnddddaaaattttiiiioooonnnn ((((NNNNoooovvvv 22224444 1111999999994444))))       GGGGAAAAWWWWKKKK((((1111))))



                      previous seed for the random number generator.

        SSSSttttrrrriiiinnnngggg FFFFuuuunnnnccccttttiiiioooonnnnssss
          AWK has the following pre-defined string functions:

          ggggssssuuuubbbb((((_r,,,, _s,,,, _t))))           for each substring matching the
                                  regular expression _r in the string
                                  _t, substitute the string _s, and
                                  return the number of substitutions.
                                  If _t is not supplied, use $$$$0000.

          iiiinnnnddddeeeexxxx((((_s,,,, _t))))             returns the index of the string _t in
                                  the string _s, or 0 if _t is not
                                  present.

          lllleeeennnnggggtttthhhh((((_s))))               returns the length of the string _s,
                                  or the length of $$$$0000 if _s is not
                                  supplied.

          mmmmaaaattttcccchhhh((((_s,,,, _r))))             returns the position in _s where the
                                  regular expression _r occurs, or 0 if
                                  _r is not present, and sets the
                                  values of RRRRSSSSTTTTAAAARRRRTTTT and RRRRLLLLEEEENNNNGGGGTTTTHHHH.

          sssspppplllliiiitttt((((_s,,,, _a,,,, _r))))          splits the string _s into the array _a
                                  on the regular expression _r, and
                                  returns the number of fields. If _r
                                  is omitted, FFFFSSSS is used instead.  The
                                  array _a is cleared first.

          sssspppprrrriiiinnnnttttffff((((_f_m_t,,,, _e_x_p_r-_l_i_s_t)))) prints _e_x_p_r-_l_i_s_t according to _f_m_t,
                                  and returns the resulting string.

          ssssuuuubbbb((((_r,,,, _s,,,, _t))))            just like ggggssssuuuubbbb(((()))), but only the first
                                  matching substring is replaced.

          ssssuuuubbbbssssttttrrrr((((_s,,,, _i,,,, _n))))         returns the _n-character substring of
                                  _s starting at _i.  If _n is omitted,
                                  the rest of _s is used.

          ttttoooolllloooowwwweeeerrrr((((_s_t_r))))            returns a copy of the string _s_t_r,
                                  with all the upper-case characters
                                  in _s_t_r translated to their
                                  corresponding lower-case
                                  counterparts.  Non-alphabetic
                                  characters are left unchanged.

          ttttoooouuuuppppppppeeeerrrr((((_s_t_r))))            returns a copy of the string _s_t_r,
                                  with all the lower-case characters
                                  in _s_t_r translated to their
                                  corresponding upper-case
                                  counterparts.  Non-alphabetic



     Page 16                                         (printed 7/10/96)






     GGGGAAAAWWWWKKKK((((1111))))      FFFFrrrreeeeeeee SSSSooooffffttttwwwwaaaarrrreeee FFFFoooouuuunnnnddddaaaattttiiiioooonnnn ((((NNNNoooovvvv 22224444 1111999999994444))))       GGGGAAAAWWWWKKKK((((1111))))



                                  characters are left unchanged.

        TTTTiiiimmmmeeee FFFFuuuunnnnccccttttiiiioooonnnnssss
          Since one of the primary uses of AWK programs is processing
          log files that contain time stamp information, _g_a_w_k provides
          the following two functions for obtaining time stamps and
          formatting them.

          ssssyyyyssssttttiiiimmmmeeee(((()))) returns the current time of day as the number of
                    seconds since the Epoch (Midnight UTC, January 1,
                    1970 on POSIX systems).

          ssssttttrrrrffffttttiiiimmmmeeee((((_f_o_r_m_a_t, _t_i_m_e_s_t_a_m_p))))
                    formats _t_i_m_e_s_t_a_m_p according to the specification
                    in _f_o_r_m_a_t.  The _t_i_m_e_s_t_a_m_p should be of the same
                    form as returned by ssssyyyyssssttttiiiimmmmeeee(((()))).  If _t_i_m_e_s_t_a_m_p is
                    missing, the current time of day is used.  See the
                    specification for the ssssttttrrrrffffttttiiiimmmmeeee(((()))) function in ANSI
                    C for the format conversions that are guaranteed
                    to be available.  A public-domain version of
                    _s_t_r_f_t_i_m_e(3) and a man page for it are shipped with
                    _g_a_w_k; if that version was used to build _g_a_w_k, then
                    all of the conversions described in that man page
                    are available to _g_a_w_k.

        SSSSttttrrrriiiinnnngggg CCCCoooonnnnssssttttaaaannnnttttssss
          String constants in AWK are sequences of characters enclosed
          between double quotes (""""). Within strings, certain _e_s_c_a_p_e
          _s_e_q_u_e_n_c_e_s are recognized, as in C. These are:

          \\\\\\\\   A literal backslash.

          \\\\aaaa   The ``alert'' character; usually the ASCII BEL
               character.

          \\\\bbbb   backspace.

          \\\\ffff   form-feed.

          \\\\nnnn   new line.

          \\\\rrrr   carriage return.

          \\\\tttt   horizontal tab.

          \\\\vvvv   vertical tab.

          \\\\xxxx_h_e_x _d_i_g_i_t_s
               The character represented by the string of hexadecimal
               digits following the \\\\xxxx.  As in ANSI C, all following
               hexadecimal digits are considered part of the escape
               sequence.  (This feature should tell us something about



     Page 17                                         (printed 7/10/96)






     GGGGAAAAWWWWKKKK((((1111))))      FFFFrrrreeeeeeee SSSSooooffffttttwwwwaaaarrrreeee FFFFoooouuuunnnnddddaaaattttiiiioooonnnn ((((NNNNoooovvvv 22224444 1111999999994444))))       GGGGAAAAWWWWKKKK((((1111))))



               language design by committee.) E.g., """"\\\\xxxx1111BBBB"""" is the
               ASCII ESC (escape) character.

          \\\\_d_d_d The character represented by the 1-, 2-, or 3-digit
               sequence of octal digits. E.g. """"\\\\000033333333"""" is the ASCII ESC
               (escape) character.

          \\\\_c   The literal character _c.

          The escape sequences may also be used inside constant
          regular expressions (e.g., ////[[[[ \\\\tttt\\\\ffff\\\\nnnn\\\\rrrr\\\\vvvv]]]]//// matches
          whitespace characters).

     FFFFUUUUNNNNCCCCTTTTIIIIOOOONNNNSSSS
          Functions in AWK are defined as follows:

               ffffuuuunnnnccccttttiiiioooonnnn _n_a_m_e((((_p_a_r_a_m_e_t_e_r _l_i_s_t)))) {{{{ _s_t_a_t_e_m_e_n_t_s }}}}

          Functions are executed when called from within the action
          parts of regular pattern-action statements. Actual
          parameters supplied in the function call are used to
          instantiate the formal parameters declared in the function.
          Arrays are passed by reference, other variables are passed
          by value.

          Since functions were not originally part of the AWK
          language, the provision for local variables is rather
          clumsy: They are declared as extra parameters in the
          parameter list. The convention is to separate local
          variables from real parameters by extra spaces in the
          parameter list. For example:

               ffffuuuunnnnccccttttiiiioooonnnn  ffff((((pppp,,,, qqqq,,,,     aaaa,,,, bbbb)))) {{{{ #### aaaa &&&& bbbb aaaarrrreeee llllooooccccaaaallll
                              .................... }}}}

               ////aaaabbbbcccc////     {{{{ ............ ;;;; ffff((((1111,,,, 2222)))) ;;;; ............ }}}}

          The left parenthesis in a function call is required to
          immediately follow the function name, without any
          intervening white space.  This is to avoid a syntactic
          ambiguity with the concatenation operator.  This restriction
          does not apply to the built-in functions listed above.

          Functions may call each other and may be recursive.
          Function parameters used as local variables are initialized
          to the null string and the number zero upon function
          invocation.

          The word ffffuuuunnnncccc may be used in place of ffffuuuunnnnccccttttiiiioooonnnn.

     EEEEXXXXAAAAMMMMPPPPLLLLEEEESSSS
          Print and sort the login names of all users:



     Page 18                                         (printed 7/10/96)






     GGGGAAAAWWWWKKKK((((1111))))      FFFFrrrreeeeeeee SSSSooooffffttttwwwwaaaarrrreeee FFFFoooouuuunnnnddddaaaattttiiiioooonnnn ((((NNNNoooovvvv 22224444 1111999999994444))))       GGGGAAAAWWWWKKKK((((1111))))



               BBBBEEEEGGGGIIIINNNN     {{{{ FFFFSSSS ==== """"::::"""" }}}}
                    {{{{ pppprrrriiiinnnntttt $$$$1111 |||| """"ssssoooorrrrtttt"""" }}}}

          Count lines in a file:

                    {{{{ nnnnlllliiiinnnneeeessss++++++++ }}}}
               EEEENNNNDDDD  {{{{ pppprrrriiiinnnntttt nnnnlllliiiinnnneeeessss }}}}

          Precede each line by its number in the file:

               {{{{ pppprrrriiiinnnntttt FFFFNNNNRRRR,,,, $$$$0000 }}}}

          Concatenate and line number (a variation on a theme):

               {{{{ pppprrrriiiinnnntttt NNNNRRRR,,,, $$$$0000 }}}}

     SSSSEEEEEEEE AAAALLLLSSSSOOOO
          _e_g_r_e_p(1), _g_e_t_p_i_d(2), _g_e_t_p_p_i_d(2), _g_e_t_p_g_r_p(2), _g_e_t_u_i_d(2),
          _g_e_t_e_u_i_d(2), _g_e_t_g_i_d(2), _g_e_t_e_g_i_d(2), _g_e_t_g_r_o_u_p_s(2)

          _T_h_e _A_W_K _P_r_o_g_r_a_m_m_i_n_g _L_a_n_g_u_a_g_e, Alfred V. Aho, Brian W.
          Kernighan, Peter J. Weinberger, Addison-Wesley, 1988. ISBN
          0-201-07981-X.

          _T_h_e _G_A_W_K _M_a_n_u_a_l, Edition 0.15, published by the Free
          Software Foundation, 1993.

     PPPPOOOOSSSSIIIIXXXX CCCCOOOOMMMMPPPPAAAATTTTIIIIBBBBIIIILLLLIIIITTTTYYYY
          A primary goal for _g_a_w_k is compatibility with the POSIX
          standard, as well as with the latest version of UNIX _a_w_k.
          To this end, _g_a_w_k incorporates the following user visible
          features which are not described in the AWK book, but are
          part of _a_w_k in System V Release 4, and are in the POSIX
          standard.

          The ----vvvv option for assigning variables before program
          execution starts is new.  The book indicates that command
          line variable assignment happens when _a_w_k would otherwise
          open the argument as a file, which is after the BBBBEEEEGGGGIIIINNNN block
          is executed.  However, in earlier implementations, when such
          an assignment appeared before any file names, the assignment
          would happen _b_e_f_o_r_e the BBBBEEEEGGGGIIIINNNN block was run.  Applications
          came to depend on this ``feature.'' When _a_w_k was changed to
          match its documentation, this option was added to
          accommodate applications that depended upon the old
          behavior.  (This feature was agreed upon by both the AT&T
          and GNU developers.)

          The ----WWWW option for implementation specific features is from
          the POSIX standard.

          When processing arguments, _g_a_w_k uses the special option



     Page 19                                         (printed 7/10/96)






     GGGGAAAAWWWWKKKK((((1111))))      FFFFrrrreeeeeeee SSSSooooffffttttwwwwaaaarrrreeee FFFFoooouuuunnnnddddaaaattttiiiioooonnnn ((((NNNNoooovvvv 22224444 1111999999994444))))       GGGGAAAAWWWWKKKK((((1111))))



          ``--------'' to signal the end of arguments.  In compatibility
          mode, it will warn about, but otherwise ignore, undefined
          options.  In normal operation, such arguments are passed on
          to the AWK program for it to process.

          The AWK book does not define the return value of ssssrrrraaaannnndddd(((()))).
          The System V Release 4 version of UNIX _a_w_k (and the POSIX
          standard) has it return the seed it was using, to allow
          keeping track of random number sequences. Therefore ssssrrrraaaannnndddd(((())))
          in _g_a_w_k also returns its current seed.

          Other new features are: The use of multiple ----ffff options (from
          MKS _a_w_k); the EEEENNNNVVVVIIIIRRRROOOONNNN array; the \\\\aaaa, and \\\\vvvv escape sequences
          (done originally in _g_a_w_k and fed back into AT&T's); the
          ttttoooolllloooowwwweeeerrrr(((()))) and ttttoooouuuuppppppppeeeerrrr(((()))) built-in functions (from AT&T); and
          the ANSI C conversion specifications in pppprrrriiiinnnnttttffff (done first
          in AT&T's version).

     GGGGNNNNUUUU EEEEXXXXTTTTEEEENNNNSSSSIIIIOOOONNNNSSSS
          _G_a_w_k has some extensions to POSIX _a_w_k.  They are described
          in this section.  All the extensions described here can be
          disabled by invoking _g_a_w_k with the ----WWWW ccccoooommmmppppaaaatttt option.

          The following features of _g_a_w_k are not available in POSIX
          _a_w_k.

               o+ The \\\\xxxx escape sequence.

               o+ The ssssyyyyssssttttiiiimmmmeeee(((()))) and ssssttttrrrrffffttttiiiimmmmeeee(((()))) functions.

               o+ The special file names available for I/O redirection
                 are not recognized.

               o+ The AAAARRRRGGGGIIIINNNNDDDD and EEEERRRRRRRRNNNNOOOO variables are not special.

               o+ The IIIIGGGGNNNNOOOORRRREEEECCCCAAAASSSSEEEE variable and its side-effects are not
                 available.

               o+ The FFFFIIIIEEEELLLLDDDDWWWWIIIIDDDDTTTTHHHHSSSS variable and fixed width field
                 splitting.

               o+ No path search is performed for files named via the
                 ----ffff option.  Therefore the AAAAWWWWKKKKPPPPAAAATTTTHHHH environment
                 variable is not special.

               o+ The use of nnnneeeexxxxtttt ffffiiiilllleeee to abandon processing of the
                 current input file.

               o+ The use of ddddeeeelllleeeetttteeee _a_r_r_a_y to delete the entire contents
                 of an array.

          The AWK book does not define the return value of the cccclllloooosssseeee(((())))



     Page 20                                         (printed 7/10/96)






     GGGGAAAAWWWWKKKK((((1111))))      FFFFrrrreeeeeeee SSSSooooffffttttwwwwaaaarrrreeee FFFFoooouuuunnnnddddaaaattttiiiioooonnnn ((((NNNNoooovvvv 22224444 1111999999994444))))       GGGGAAAAWWWWKKKK((((1111))))



          function.  _G_a_w_k's cccclllloooosssseeee(((()))) returns the value from _f_c_l_o_s_e(3),
          or _p_c_l_o_s_e(3), when closing a file or pipe, respectively.

          When _g_a_w_k is invoked with the ----WWWW ccccoooommmmppppaaaatttt option, if the _f_s
          argument to the ----FFFF option is ``t'', then FFFFSSSS will be set to
          the tab character.  Since this is a rather ugly special
          case, it is not the default behavior.  This behavior also
          does not occur if ----WWWW ppppoooossssiiiixxxx has been specified.

     HHHHIIIISSSSTTTTOOOORRRRIIIICCCCAAAALLLL FFFFEEEEAAAATTTTUUUURRRREEEESSSS
          There are two features of historical AWK implementations
          that _g_a_w_k supports.  First, it is possible to call the
          lllleeeennnnggggtttthhhh(((()))) built-in function not only with no argument, but
          even without parentheses!  Thus,

               aaaa ==== lllleeeennnnggggtttthhhh

          is the same as either of

               aaaa ==== lllleeeennnnggggtttthhhh(((())))
               aaaa ==== lllleeeennnnggggtttthhhh(((($$$$0000))))

          This feature is marked as ``deprecated'' in the POSIX
          standard, and _g_a_w_k will issue a warning about its use if ----WWWW
          lllliiiinnnntttt is specified on the command line.

          The other feature is the use of either the ccccoooonnnnttttiiiinnnnuuuueeee or the
          bbbbrrrreeeeaaaakkkk statements outside the body of a wwwwhhhhiiiilllleeee, ffffoooorrrr, or ddddoooo
          loop.  Traditional AWK implementations have treated such
          usage as equivalent to the nnnneeeexxxxtttt statement.  _G_a_w_k will
          support this usage if ----WWWW ccccoooommmmppppaaaatttt has been specified.

     EEEENNNNVVVVIIIIRRRROOOONNNNMMMMEEEENNNNTTTT VVVVAAAARRRRIIIIAAAABBBBLLLLEEEESSSS
          If PPPPOOOOSSSSIIIIXXXXLLLLYYYY____CCCCOOOORRRRRRRREEEECCCCTTTT exists in the environment, then _g_a_w_k
          behaves exactly as if --------ppppoooossssiiiixxxx had been specified on the
          command line.  If --------lllliiiinnnntttt has been specified, _g_a_w_k will issue
          a warning message to this effect.

     BBBBUUUUGGGGSSSS
          The ----FFFF option is not necessary given the command line
          variable assignment feature; it remains only for backwards
          compatibility.

          If your system actually has support for ////ddddeeeevvvv////ffffdddd and the
          associated ////ddddeeeevvvv////ssssttttddddiiiinnnn, ////ddddeeeevvvv////ssssttttddddoooouuuutttt, and ////ddddeeeevvvv////ssssttttddddeeeerrrrrrrr files,
          you may get different output from _g_a_w_k than you would get on
          a system without those files.  When _g_a_w_k interprets these
          files internally, it synchronizes output to the standard
          output with output to ////ddddeeeevvvv////ssssttttddddoooouuuutttt, while on a system with
          those files, the output is actually to different open files.
          Caveat Emptor.




     Page 21                                         (printed 7/10/96)






     GGGGAAAAWWWWKKKK((((1111))))      FFFFrrrreeeeeeee SSSSooooffffttttwwwwaaaarrrreeee FFFFoooouuuunnnnddddaaaattttiiiioooonnnn ((((NNNNoooovvvv 22224444 1111999999994444))))       GGGGAAAAWWWWKKKK((((1111))))



     VVVVEEEERRRRSSSSIIIIOOOONNNN IIIINNNNFFFFOOOORRRRMMMMAAAATTTTIIIIOOOONNNN
          This man page documents _g_a_w_k, version 2.15.

          Starting with the 2.15 version of _g_a_w_k, the ----cccc, ----VVVV, ----CCCC, ----aaaa,
          and ----eeee options of the 2.11 version are no longer recognized.
          This fact will not even be documented in the manual page for
          the next major version.

     AAAAUUUUTTTTHHHHOOOORRRRSSSS
          The original version of UNIX _a_w_k was designed and
          implemented by Alfred Aho, Peter Weinberger, and Brian
          Kernighan of AT&T Bell Labs. Brian Kernighan continues to
          maintain and enhance it.

          Paul Rubin and Jay Fenlason, of the Free Software
          Foundation, wrote _g_a_w_k, to be compatible with the original
          version of _a_w_k distributed in Seventh Edition UNIX.  John
          Woods contributed a number of bug fixes.  David Trueman,
          with contributions from Arnold Robbins, made _g_a_w_k compatible
          with the new version of UNIX _a_w_k.  Arnold Robbins is the
          current maintainer.

          The initial DOS port was done by Conrad Kwok and Scott
          Garfinkle.  Scott Deifik is the current DOS maintainer.  Pat
          Rankin did the port to VMS, and Michal Jaegermann did the
          port to the Atari ST.  The port to OS/2 was done by Kai Uwe
          Rommel, with contributions and help from Darrel Hankerson.

     BBBBUUUUGGGG RRRREEEEPPPPOOOORRRRTTTTSSSS
          If you find a bug in _g_a_w_k, please send electronic mail to
          bbbbuuuugggg----ggggnnnnuuuu----uuuuttttiiiillllssss@@@@pppprrrreeeepppp....aaaaiiii....mmmmiiiitttt....eeeedddduuuu, _w_i_t_h a carbon copy to
          aaaarrrrnnnnoooolllldddd@@@@ggggnnnnuuuu....aaaaiiii....mmmmiiiitttt....eeeedddduuuu.  Please include your operating system
          and its revision, the version of _g_a_w_k, what C compiler you
          used to compile it, and a test program and data that are as
          small as possible for reproducing the problem.

          Before sending a bug report, please do two things. First,
          verify that you have the latest version of _g_a_w_k.  Many bugs
          (usually subtle ones) are fixed at each release, and if
          your's is out of date, the problem may already have been
          solved.  Second, please read this man page and the reference
          manual carefully to be sure that what you think is a bug
          really is, instead of just a quirk in the language.

     AAAACCCCKKKKNNNNOOOOWWWWLLLLEEEEDDDDGGGGEEEEMMMMEEEENNNNTTTTSSSS
          Brian Kernighan of Bell Labs provided valuable assistance
          during testing and debugging.  We thank him.








     Page 22                                         (printed 7/10/96)



