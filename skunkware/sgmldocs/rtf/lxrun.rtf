{\rtf1\ansi
{\fonttbl
{\f0\fswiss Helvetica;}
{\f1\fmodern Courier;}
{\f2\froman Times;}
{\f3\froman Symbol;}
}
{\info{\comment Translated from SGML to RTF w/ Linuxdoc-SGML}}
+{\footnote browse}

{\pard\plain\f0\sb200\fs36\b\tx576{Linux Emulation for SCO}}
{}K{\footnote Linux Emulation for SCO}\par\pard\plain\li500\sb200\fi0

\par\pard\plain
\li500{}
\sb200\fi0
{\b Ronald Joe Record 
{\f1 \url{(rr@sco.com)}}, {\b SCO}\\  
Michael Hopkirk 
{\f1 \url{(hops@sco.com)}}, {\b SCO}\\  
Steve Ginzburg 
{\f1 \url{(steven@ugcs.caltech.edu)}}, {\b California Institute of Technology}}
\par\pard\plain
\li500{}
\sb200\fi0
{ May 8, 1998}
\par\par
This paper describes some of the rationale and implementation 
decisions for lxrun, an Intel Linux emulator, plus how to get, build, configure and run it; what some of the current and future development 
issues and enhancements are and the current status of the project. 
There is not much difference between the execution environment required by Linux binaries and binaries for other Intel UNIX platforms, the main one being the way in which system calls are handled. For example, in Linux an "int $0x80" instruction is used, which jumps to the system-call-handling portion of the Linux kernel. On SCO systems, "int $0x80" is an unused vector and therefore causes a general protection trap resulting in a SIGSEGV signal. Lxrun intercepts these signals and calls the SCO equivalent of the system call that the Linux program attempted. It also remaps some ioctls, flags, return values and error codes. Using lxrun, a Linux binary can be run on a non-Linux platform with little performance penalty. Lxrun can also take advantage of the lower overhead in some Linux libraries, occasionally resulting in improved performance over native binaries. No kernel modifications are necessary.\par\par\pard\plain
\li500\fi-200{\f3\'B7} 1 {\uldb Introduction}{\v TOC_0}\par
\li1000\fi-200{\f3\'B7} 1.1 {\uldb What is lxrun ?}{\v TOC_1}\par
\li1000\fi-200{\f3\'B7} 1.2 {\uldb Why should I use lxrun ?}{\v TOC_2}\par
\li500\fi-200{\f3\'B7} 2 {\uldb Implementation}{\v TOC_3}\par
\li1000\fi-200{\f3\'B7} 2.1 {\uldb Design goals}{\v TOC_4}\par
\li1000\fi-200{\f3\'B7} 2.2 {\uldb Difference in syscall handling}{\v TOC_5}\par
\li1000\fi-200{\f3\'B7} 2.3 {\uldb Pathname for loading Linux libraries }{\v TOC_6}\par
\li1000\fi-200{\f3\'B7} 2.4 {\uldb Device major number mappings}{\v TOC_7}\par
\li1000\fi-200{\f3\'B7} 2.5 {\uldb Differences in kernel tty systems}{\v TOC_8}\par
\li1000\fi-200{\f3\'B7} 2.6 {\uldb Miscellaneous issues}{\v TOC_9}\par
\li500\fi-200{\f3\'B7} 3 {\uldb Development Issues}{\v TOC_10}\par
\li1000\fi-200{\f3\'B7} 3.1 {\uldb Direct execution of Linux ELF binaries}{\v TOC_11}\par
\li1000\fi-200{\f3\'B7} 3.2 {\uldb SIGSEGV vs. software interrupt kernel module}{\v TOC_12}\par
\li1000\fi-200{\f3\'B7} 3.3 {\uldb Performance enhancements}{\v TOC_13}\par
\li500\fi-200{\f3\'B7} 4 {\uldb System Call Mapping}{\v TOC_14}\par
\li1000\fi-200{\f3\'B7} 4.1 {\uldb Directly mapped system calls}{\v TOC_15}\par
\li1000\fi-200{\f3\'B7} 4.2 {\uldb System calls with a non-stub emulation function}{\v TOC_16}\par
\li1000\fi-200{\f3\'B7} 4.3 {\uldb Partial implementations}{\v TOC_17}\par
\li1000\fi-200{\f3\'B7} 4.4 {\uldb Unimplemented system calls}{\v TOC_18}\par
\li500\fi-200{\f3\'B7} 5 {\uldb Getting started}{\v TOC_19}\par
\li1000\fi-200{\f3\'B7} 5.1 {\uldb How do I get lxrun ?}{\v TOC_20}\par
\li1000\fi-200{\f3\'B7} 5.2 {\uldb Building lxrun from source}{\v TOC_21}\par
\li1000\fi-200{\f3\'B7} 5.3 {\uldb Installing the emulation system}{\v TOC_22}\par
\li1000\fi-200{\f3\'B7} 5.4 {\uldb Installing Linux applications}{\v TOC_23}\par
\li1000\fi-200{\f3\'B7} 5.5 {\uldb Error messages}{\v TOC_24}\par
\li1000\fi-200{\f3\'B7} 5.6 {\uldb If you come across an unsupported binary}{\v TOC_25}\par
\li500\fi-200{\f3\'B7} 6 {\uldb Web Presence}{\v TOC_26}\par
\li500\fi-200{\f3\'B7} 7 {\uldb Authors and Contributors}{\v TOC_27}\par
\li500\fi-200{\f3\'B7} 8 {\uldb About This Document}{\v TOC_28}\par

}
