{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;
\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\widctlpar\adjustright 
\fs20\cgrid \snext0 Normal;}{\s1\nowidctlpar\adjustright \sbasedon0 \snext0 heading 1;}{\s2\nowidctlpar\adjustright \sbasedon0 \snext0 heading 2;}{\s3\nowidctlpar\adjustright \sbasedon0 \snext0 heading 3;}{\s4\nowidctlpar\adjustright \sbasedon0 \snext0 
heading 4;}{\s5\nowidctlpar\adjustright \sbasedon0 \snext0 heading 5;}{\s6\nowidctlpar\adjustright \sbasedon0 \snext0 heading 6;}{\s7\nowidctlpar\adjustright \sbasedon0 \snext0 heading 7;}{\s8\nowidctlpar\adjustright \sbasedon0 \snext0 heading 8;}{
\s9\nowidctlpar\adjustright \sbasedon0 \snext0 heading 9;}{\*\cs10 \additive Default Paragraph Font;}}{\info{\title Porting Open Source Software to SCO}{\author Richelle A. Noroyan}{\operator Richelle A. Noroyan}{\creatim\yr1999\mo11\dy1\hr11\min40}
{\revtim\yr1999\mo11\dy1\hr11\min40}{\version2}{\edmins0}{\nofpages8}{\nofwords2141}{\nofchars12206}{\*\company SCO}{\nofcharsws14989}{\vern113}}\margl1440\margr1440\margb1920 
\facingp\widowctrl\ftnbj\aenddoc\notabind\hyphcaps0\hyphauto1\viewkind1\viewscale109 \fet0\sectd \linex0\headery0\footery0\titlepg\sectdefaultcl {\headerl \pard\plain \sb770\sa430\sl-240\slmult0\widctlpar\tqc\tx4680\tqr\tx9360\adjustright \fs20\cgrid {
\i\fs24\lang1024\cgrid0 Porting Open Source Software to SCO}{\fs24\lang1024\cgrid0 \tab \tab 
\par }}{\headerr \pard\plain \sb770\sa430\sl-240\slmult0\widctlpar\tqc\tx4680\tqr\tx9360\adjustright \fs20\cgrid {\fs24\lang1024\cgrid0 \tab \tab }{\i\fs24\lang1024\cgrid0 Porting Open Source Software to SCO}{\fs24\lang1024\cgrid0 
\par }}{\footerl \pard\plain \sb770\sa910\sl-240\slmult0\widctlpar\tqc\tx4680\tqr\tx9360\adjustright \fs20\cgrid {\i\fs24\lang1024\cgrid0 \chpgn }{\fs24\lang1024\cgrid0 \tab \tab 
\par }}{\footerr \pard\plain \sb770\sa910\sl-240\slmult0\widctlpar\tqc\tx4680\tqr\tx9360\adjustright \fs20\cgrid {\fs24\lang1024\cgrid0 \tab \tab }{\i\fs24\lang1024\cgrid0 \chpgn }{\fs24\lang1024\cgrid0 
\par }}{\headerf \pard\plain \sb770\sa430\sl-240\slmult0\widctlpar\tqc\tx4680\tqr\tx9360\adjustright \fs20\cgrid {\fs24\lang1024\cgrid0 \tab \tab 
\par }}{\footerf \pard\plain \sb770\sa910\sl-240\slmult0\widctlpar\tqc\tx4680\tqr\tx9360\adjustright \fs20\cgrid {\fs24\lang1024\cgrid0 \tab \tab }{\i\fs24\lang1024\cgrid0 \chpgn }{\fs24\lang1024\cgrid0 
\par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}
{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \s1\qc\li960\sl-647\slmult0\keepn\widctlpar\hyphpar0\outlinelevel0\adjustright {\b\f1\fs49\lang1024 
Porting Open Source Software to SCO
\par }\pard\plain \qc\li960\sl-312\slmult0\keepn\widctlpar\hyphpar0\adjustright \fs20\cgrid {\i\f1\fs24\lang1024\cgrid0 Dr. Ronald Joe Record
\par }\pard \qc\li960\sl-250\slmult0\keepn\widctlpar\hyphpar0\adjustright {\i\f1\fs19\lang1024\cgrid0 Open Source Program Architect
\par SCO
\par }\pard \li960\sb120\sl-312\slmult0\widctlpar\hyphpar0\adjustright {\fs24\lang1024\cgrid0 
Much of the most useful and popular software today is published and distributed in source form. The Apache web server, KDE, the Mtools DOS utilities and the GNU C compiler are a few examples of what is commonly referred to as Open Source software. This ar
ticle attempts to provide some insight, tips, techniques and methodology for building Open Source software on and for SCO OpenServer 5, UnixWare 7 and in general.
\par }\pard\plain \s5\li960\sb240\sl-312\slmult0\keepn\widctlpar\hyphpar0\outlinelevel4\adjustright {\b\f1\lang1024 Setting Up Your Development Environment
\par }\pard\plain \li960\sb120\sl-312\slmult0\widctlpar\hyphpar0\adjustright \fs20\cgrid {\fs24\lang1024\cgrid0 Perhaps the single most important step in porting }{\i\fs24\lang1024\cgrid0 any}{\fs24\lang1024\cgrid0  
software is the creation of an appropriate build environment. Fortunately, on SCO OpenServer 5 and UnixWare 7, much of the work has already been done for you. On either platform, simply install the base Operating System, native development system, Java De
velopment Kit and the SCO Skunkware CD included in the Operating System media kit.
\par If you are not a licensed Development System user you can still build an appropriate development environment by utilizing the GNU development system along with the native lib
raries and headers. On OpenServer you will need to install the "Linkers and Application Libraries" package of the Development System (no license key is required). On either platform you can simply install the Development System sans license key.
\par After havi
ng installed the Operating System, development system of choice, and SCO Skunkware you will now have access to the standard tools necessary to build most Open Source packages. These tools include the GNU Compiler Collection, Bison, Flex, GNU Make, autocon
f, automake, and a wide variety of header files and libraries.
\par }\pard\plain \s5\li960\sb240\sl-312\slmult0\keepn\widctlpar\hyphpar0\outlinelevel4\adjustright {\b\f1\lang1024 Where and How to Obtain Open Source Software
\par }\pard\plain \li960\sb120\sl-312\slmult0\widctlpar\hyphpar0\adjustright \fs20\cgrid {\fs24\lang1024\cgrid0 
There are a number of excellent Open Source "portals" on the Internet. These are sites which provide links and references to the thousands of Open Source projects. Good starting points include: 
\par }\pard \fi-240\li1200\sb120\sl-312\slmult0\widctlpar\tx1200\hyphpar0\adjustright {\fs19\lang1024\cgrid0 \bullet \tab }{\fs24\lang1024\cgrid0 
The SCO Skunkware web site at http://www.sco.com/skunkware. Each of the Skunkware components described here contains a link to the binary distribution for either OpenServer or UnixWare 7 as well as a link to 
the original source and project home page (if any). Additionally, there's a table of links at http://www.sco.com/skunkware/links.html. 
\par }{\fs19\lang1024\cgrid0 \bullet \tab }{\fs24\lang1024\cgrid0 The Freshmeat web site at http://freshmeat.net. 
\par }{\fs19\lang1024\cgrid0 \bullet \tab }{\fs24\lang1024\cgrid0 The FileWatcher web site at http://filewatcher.org. 
\par }{\fs19\lang1024\cgrid0 \bullet \tab }{\fs24\lang1024\cgrid0 The WebWatcher web site at http://webwatcher.org. 
\par }{\fs19\lang1024\cgrid0 \bullet \tab }{\fs24\lang1024\cgrid0 
Sunsite's Linux archive at ftp://sunsite.unc.edu/pub/Linux/welcome.html. Note that many sites indicate their Open Source projects are for Linux when, in fact, the source is portable across most modern UNIX platforms as well.
\par }{\fs19\lang1024\cgrid0 \bullet \tab }{\fs24\lang1024\cgrid0 The Open Source Who's Who http://support.lcg.org/Whoswho/. 
\par }{\fs19\lang1024\cgrid0 \bullet \tab }{\fs24\lang1024\cgrid0 The Free Software Foundation FTP download area at ftp://ftp.gnu.org/gnu/. 
\par }\pard \li960\sb120\sl-312\slmult0\widctlpar\hyphpar0\adjustright {\fs24\lang1024\cgrid0 Another method for obtaining access to the very latest development sources for many Open Source
 projects is Anonymous CVS. After installing SCO Skunkware you will have the necessary CVS utilities in }{\f2\fs21\lang1024\cgrid0 /usr/local/bin}{\fs24\lang1024\cgrid0 
. To download a project's source tree via CVS, login to the CVS server with the project password, checkout the desired source, and logout.
 The project home page will supply you with the CVS server name and password if they are maintaining an anonymous CVS source repository. I've written a script to automate this procedure for several projects. You can download this script via http://www.sco
.com/skunkware/src/devtools/cvsget.gz
\par }\pard\plain \s5\li960\sb240\sl-312\slmult0\keepn\widctlpar\hyphpar0\outlinelevel4\adjustright {\b\f1\lang1024 Configuring Open Source Software for Compilation
\par }\pard\plain \li960\sb120\sl-312\slmult0\widctlpar\hyphpar0\adjustright \fs20\cgrid {\fs24\lang1024\cgrid0 
After identifying an Open Source package of interest, locating it, and downloading the source archive it is typically the case that the source needs to be unpacked and co
nfigured for your platform. Most source archives downloadable over the Internet are compressed tar archives. To extract on of these, say }{\f2\fs21\lang1024\cgrid0 widget-1.0.tar.gz}{\fs24\lang1024\cgrid0 , issue the command: 
\par }\pard \li960\sb240\sl-312\slmult0\widctlpar\hyphpar0\adjustright {\fs24\lang1024\cgrid0     gzcat widget-1.0.tar.gz | tar xf -
\par It is often prudent to first simply list the contents of the archive to determine if it extracts into it's own subdirectory. If not, create a subdirectory and extract the archive from there.
\par }\pard \li960\sb120\sl-312\slmult0\widctlpar\hyphpar0\adjustright {\fs24\lang1024\cgrid0 Once extracted the source project needs to be configured for your platform. Most modern Open Source projec
ts use GNU Autoconf to provide configuration scripts which attempt to automate the configuration process. In the simplest cases it will only be necessary to run the }{\f2\fs21\lang1024\cgrid0 configure}{\fs24\lang1024\cgrid0  script: 
\par }\pard \li960\sb240\sl-312\slmult0\widctlpar\hyphpar0\adjustright {\fs24\lang1024\cgrid0     cd widget-1.0 ; ./configure
\par Unfortunately, it is often necessary to "help" }{\f2\fs21\lang1024\cgrid0 configure}{\fs24\lang1024\cgrid0  understand your platform. For instance, on UnixWare 7 it is sometimes necessary to: 
\par }\pard \fi-240\li1200\sb120\sl-312\slmult0\widctlpar\tx1200\hyphpar0\adjustright {\fs19\lang1024\cgrid0 \bullet \tab }{\fs24\lang1024\cgrid0 replace configure's "-lnsl" with "-lsocket -lnsl"
\par }{\fs19\lang1024\cgrid0 \bullet \tab }{\fs24\lang1024\cgrid0 replace configure's "-lICE" with "-lSM -lICE"
\par }{\fs19\lang1024\cgrid0 \bullet \tab }{\fs24\lang1024\cgrid0 order "-lSM -lICE" after "-lXt" but prior to "-lX11" on the link line
\par }{\fs19\lang1024\cgrid0 \bullet \tab }{\fs24\lang1024\cgrid0 rearrange the order of certain graphics libraries like JPEG, TIFF, PNG or others
\par }\pard \li960\sb120\sl-312\slmult0\widctlpar\hyphpar0\adjustright {\fs24\lang1024\cgrid0 A typical link line for a graphical application might include: 
\par }\pard \li960\sb240\sl-281\slmult0\widctlpar\hyphpar0\adjustright {\f2\fs21\lang1024\cgrid0 -L/usr/local/lib -lXpm -ltiff -ljpeg -lpng -lz -lXaw -lXmu -lXt -lSM -lICE -lXext -lX11 -lm -lsocket -lnsl -lgen
\par }\pard \li960\sb240\sl-312\slmult0\widctlpar\hyphpar0\adjustright {\fs24\lang1024\cgrid0 Many of these idiosyncracies, due in part to the single-pass nature of the native linker, can be simply accomodated by rerunning autoconf which regenerates the }{
\f2\fs21\lang1024\cgrid0 configure}{\fs24\lang1024\cgrid0  script from the }{\f2\fs21\lang1024\cgrid0 configure.in}{\fs24\lang1024\cgrid0  file for your platform.
\par }\pard \li960\sb120\sl-312\slmult0\widctlpar\hyphpar0\adjustright {\fs24\lang1024\cgrid0 Another configuration area that often causes problems is the building of shared libraries. The }{\f2\fs21\lang1024\cgrid0 ltconfig}{\fs24\lang1024\cgrid0 
 script contains the platform-specific instructions and options for creating shared libraries. In order to build shared libraries on UnixWare 7 it is necessary to modify }{\f2\fs21\lang1024\cgrid0 ltconfig}{\fs24\lang1024\cgrid0 
 and add the following to the appropriate case statements: 
\par }\pard \li960\sb240\sl-281\slmult0\widctlpar\adjustright {\f2\fs21\lang1024\cgrid0 sysv5*)
\par }\pard \li960\sl-281\slmult0\widctlpar\adjustright {\f2\fs21\lang1024\cgrid0   pic_flag='-KPIC'
\par   link_static_flag='-Bstatic'
\par   wl='-Wl,'
\par   ;;
\par 
\par sysv5*)
\par   archive_cmds='$LD -G -h $rpath/$soname -o $lib$libobjs'
\par   runpath_var=LD_RUN_PATH
\par   hardcode_runpath_var=yes
\par   hardcode_shlibpath_var=no
\par   ;;
\par 
\par sysv5*)
\par   version_type=osf
\par   soname_spec='$libname.so.$major'
\par   library_names_spec='$libname.so.$versuffix $libname.so.$major $libname.so'
\par   shlibpath_var=LD_LIBRARY_PATH
\par }\pard \li960\sl-281\slmult0\widctlpar\hyphpar0\adjustright {\f2\fs21\lang1024\cgrid0   ;;
\par }\pard \li960\sb240\sl-312\slmult0\widctlpar\hyphpar0\adjustright {\fs24\lang1024\cgrid0 By default, }{\f2\fs21\lang1024\cgrid0 configure}{\fs24\lang1024\cgrid0 
 will use the GNU C Compiler. If you wish to use an alternate compiler the CC environment variable can be set appropriately. On UnixWare 7 the Skunkware components are built with the native compiler for performance and portability reasons. As a convenien
ce i've constructed simple shell scripts to front-end the }{\f2\fs21\lang1024\cgrid0 configure}{\fs24\lang1024\cgrid0  script. For instance, on UnixWare 7 to use the native C compiler: 
\par }\pard \li960\sb240\sl-281\slmult0\widctlpar\adjustright {\f2\fs21\lang1024\cgrid0 #!/bin/sh
\par }\pard \li960\sl-281\slmult0\widctlpar\adjustright {\f2\fs21\lang1024\cgrid0 HOST=i586-sco-sysv5
\par [ -f mout-config ] && mv mout-config mout-config$$
\par CC="cc"
\par CPP="$CC -E"
\par CFLAGS="-Xa -Dasm=__asm -DANSICPP -O3 -Kthread -Kalloca -I/usr/local/include -L/usr/local/lib"
\par CXX="CC"
\par CXXFLAGS="-O3 -I/usr/local/include/stl -I/usr/local/include -L/usr/local/lib"
\par RANLIB=true
\par MAKE=/usr/local/bin/make
\par export CC CPP CXX RANLIB MAKE CFLAGS CXXFLAGS
\par }\pard \li960\sl-281\slmult0\widctlpar\hyphpar0\adjustright {\f2\fs21\lang1024\cgrid0 ./configure $* $HOST 2>&1 | tee mout-config
\par }\pard \li960\sb240\sl-312\slmult0\widctlpar\hyphpar0\adjustright {\fs24\lang1024\cgrid0 Note the use of "-Kthread -Kalloca". These enable threads and the built-in alloca function. The check for threads support in }{\f2\fs21\lang1024\cgrid0 configure}{
\fs24\lang1024\cgrid0  often fails on UnixWare 7. If you wish to include threads support it may be necessary to modify }{\f2\fs21\lang1024\cgrid0 configure}{\fs24\lang1024\cgrid0  and/or }{\f2\fs21\lang1024\cgrid0 config.h}{\fs24\lang1024\cgrid0 
. On SCO OpenServer the use of threads can be accomplished via the FSU Pthreads package on Skunkware. To use FSU Pthreads the application should include <pthread.h> and link with the "-lgthreads" linker option.
\par }\pard \li960\sb120\sl-312\slmult0\widctlpar\hyphpar0\adjustright {\fs24\lang1024\cgrid0 After running the }{\f2\fs21\lang1024\cgrid0 configure}{\fs24\lang1024\cgrid0 
 script it is a good idea to examine the output which is stored in the file config.log. You may also need to edit the generated }{\f2\fs21\lang1024\cgrid0 config.h}{\fs24\lang1024\cgrid0 , if any. Running }{\f2\fs21\lang1024\cgrid0 configure}{
\fs24\lang1024\cgrid0  with a tee to a log file 
\par }\pard \li960\sb240\sl-312\slmult0\widctlpar\hyphpar0\adjustright {\fs24\lang1024\cgrid0     ./configure | tee mout-config
\par will allow you to examine both the config.log and mout-config for possible errors in the configuration.
\par }\pard \li960\sb120\sl-312\slmult0\widctlpar\hyphpar0\adjustright {\fs24\lang1024\cgrid0 Many programs use the Imake system to configure the source for a particular platform. These will have an }{\f2\fs21\lang1024\cgrid0 Imakefile}{\fs24\lang1024\cgrid0 
 which is used to generate the Makefile. To configure such a source hierarchy for compilation on your system simply run: 
\par }\pard \li960\sb240\sl-312\slmult0\widctlpar\hyphpar0\adjustright {\fs24\lang1024\cgrid0     xmkmf -a
\par }\pard\plain \s5\li960\sb240\sl-312\slmult0\keepn\widctlpar\hyphpar0\outlinelevel4\adjustright {\b\f1\lang1024 Compiling Open Source Software
\par }\pard\plain \li960\sb120\sl-312\slmult0\widctlpar\hyphpar0\adjustright \fs20\cgrid {\fs24\lang1024\cgrid0 Once configured properly most Open Source software can be compiled by simply running "make". I use GNU make almost exclusivel
y due to its widespread use in the Open Source community and the incompatibilities with System V make and different feature set. To be sure you are using GNU make rather than System V make, place }{\f2\fs21\lang1024\cgrid0 /usr/local/bin}{
\fs24\lang1024\cgrid0  prior to }{\f2\fs21\lang1024\cgrid0 /bin}{\fs24\lang1024\cgrid0  or }{\f2\fs21\lang1024\cgrid0 /usr/bin}{\fs24\lang1024\cgrid0  in your execution path. For example: 
\par }\pard \li960\sb240\sl-312\slmult0\widctlpar\adjustright {\fs24\lang1024\cgrid0     PATH=/usr/local/bin:$PATH
\par }\pard \li960\sl-312\slmult0\widctlpar\hyphpar0\adjustright {\fs24\lang1024\cgrid0     export PATH
\par }\pard \li960\sb240\sl-312\slmult0\widctlpar\hyphpar0\adjustright {\fs24\lang1024\cgrid0 To generate a logfile of the output from your compile, make can be piped to a tee as follows: 
\par     make 2>&1 | tee mout
\par After successfully compiling the source files and reviewing the logfiles many Makefiles include a "test" or "check" rule which runs any included automated tests. To run these, issue the command: 
\par }\pard \li960\sb240\sl-312\slmult0\widctlpar\adjustright {\fs24\lang1024\cgrid0     make test 2>&1 | tee mout-test
\par }\pard \li960\sl-312\slmult0\widctlpar\adjustright {\fs24\lang1024\cgrid0 or
\par }\pard \li960\sl-312\slmult0\widctlpar\hyphpar0\adjustright {\fs24\lang1024\cgrid0     make check 2>&1 | tee mout-check
\par }\pard \li960\sb240\sl-312\slmult0\widctlpar\hyphpar0\adjustright {\fs24\lang1024\cgrid0 Finally, after compiling and testing the build, install the software with: 
\par     make install 2>&1 | tee mout-install
\par Forum presentation(s)
\par }\pard\plain \s5\li960\sb240\sl-312\slmult0\keepn\widctlpar\hyphpar0\outlinelevel4\adjustright {\b\f1\lang1024 Modifying Open Source Software
\par }\pard\plain \li960\sb120\sl-312\slmult0\widctlpar\hyphpar0\adjustright \fs20\cgrid {\fs24\lang1024\cgrid0 When modifying Open Source software it is important to keep cross-platform portability
 in mind. The source you modify will in all likelihood be built on a wide variety of platforms. Your modifications cannot break either the build or functionality of the software on any other platform. It's also quite possible that your modifications could
 be useful to another platform. Thus, when possible, avoid platform-specific modifications like: 
\par }\pard \li960\sb240\sl-281\slmult0\widctlpar\adjustright {\f2\fs21\lang1024\cgrid0 #if defined(__USLC__) /* UnixWare */
\par }\pard \li960\sl-281\slmult0\widctlpar\adjustright {\f2\fs21\lang1024\cgrid0 #define FOOBAR 1
\par #elif defined(_SCO_DS) /* OpenServer */
\par #define FOOBAR 0
\par }\pard \li960\sl-281\slmult0\widctlpar\hyphpar0\adjustright {\f2\fs21\lang1024\cgrid0 #endif /* __USLC__ */
\par }\pard \li960\sb240\sl-312\slmult0\widctlpar\hyphpar0\adjustright {\fs24\lang1024\cgrid0 Whenever possible make such a modification based upon defines generated by the }{\f2\fs21\lang1024\cgrid0 configure}{\fs24\lang1024\cgrid0  script. For example, }{
\f2\fs21\lang1024\cgrid0 configure}{\fs24\lang1024\cgrid0  might write out in the }{\f2\fs21\lang1024\cgrid0 config.h}{\fs24\lang1024\cgrid0 
 file a define of something like HAVE_FOOBAR or NEED_FOOBAR. If so, a more portable construct for the same modification might look like: 
\par }\pard \li960\sb240\sl-281\slmult0\widctlpar\adjustright {\f2\fs21\lang1024\cgrid0 #if defined(NEED_FOOBAR)
\par }\pard \li960\sl-281\slmult0\widctlpar\adjustright {\f2\fs21\lang1024\cgrid0 #define FOOBAR 1
\par }\pard \li960\sl-281\slmult0\widctlpar\hyphpar0\adjustright {\f2\fs21\lang1024\cgrid0 #endif /* NEED_FOOBAR */
\par }\pard \li960\sb240\sl-312\slmult0\widctlpar\hyphpar0\adjustright {\fs24\lang1024\cgrid0 
When making platform-specific modifications, the __USLC__ manifest define can be used for UnixWare and the _SCO_DS for OpenServer. If the application has been ported to Sun Solaris then it is often possible to simply change: 
\par }\pard \li960\sb240\sl-281\slmult0\widctlpar\hyphpar0\adjustright {\f2\fs21\lang1024\cgrid0 #if defined(SOLARIS)
\par }\pard \li960\sb240\sl-312\slmult0\widctlpar\hyphpar0\adjustright {\fs24\lang1024\cgrid0 to 
\par }\pard \li960\sb240\sl-281\slmult0\widctlpar\hyphpar0\adjustright {\f2\fs21\lang1024\cgrid0 #if defined(SOLARIS) || defined(__USLC__) || defined(_SCO_DS)
\par }\pard \li960\sb240\sl-312\slmult0\widctlpar\hyphpar0\adjustright {\fs24\lang1024\cgrid0 
SCO OpenServer and UnixWare 7 are POSIX, XPG4, UNIX 95 and mostly UNIX 98 compliant. Often there are defines for these either in config.h or another header file. Most applications which comply with one or more of these standards will simply compile and li
nk. Occasionally trivial modifications are necessary. For example, the location of the declaration of a function might reside in different header files and libraries on different systems. Usually the }{\f2\fs21\lang1024\cgrid0 man}{\fs24\lang1024\cgrid0 
 command will indicate the syntax for inclusion of the declaration and any additional libraries to link against.
\par }\pard \li960\sb120\sl-312\slmult0\widctlpar\hyphpar0\adjustright {\fs24\lang1024\cgrid0 
An excellent document on porting to UnixWare 7 is available at http://www.sco.com/forum1999/conference/develop/d16/. This document goes into these issues in much greater detail than is possible here.
\par }\pard\plain \s5\li960\sb240\sl-312\slmult0\keepn\widctlpar\hyphpar0\outlinelevel4\adjustright {\b\f1\lang1024 Contributing to Open Source Projects
\par }\pard\plain \li960\sb120\sl-312\slmult0\widctlpar\hyphpar0\adjustright \fs20\cgrid {\fs24\lang1024\cgrid0 
The Open Source development model relies upon contributions from vendors, developers, users and the primary development group. If you have successfully ported an Open Source project to a new platform or you have made
 source level modifications to enhance the software or fixed a bug, you can and should return your modifications to the project maintainers. In the case of ports and fixes for SCO platforms you may wish to first submit your modifications to the Skunkware 
development team for review and integration with other modifications to that package. To do so, e-mail your modifications to skunkware@sco.com.
\par Generally, modifications to an Open Source project are returned by e-mailing a context diff of the relevant changes. That is, if you modified source files }{\f2\fs21\lang1024\cgrid0 foo.c}{\fs24\lang1024\cgrid0  and }{\f2\fs21\lang1024\cgrid0 bar.h}{
\fs24\lang1024\cgrid0  of project fubar release 1.0, you would create a context diff of these files: 
\par }\pard \li960\sb240\sl-312\slmult0\widctlpar\adjustright {\fs24\lang1024\cgrid0     diff -c foo.c.00 foo.c > mydiff-fubar-1.0
\par }\pard \li960\sl-312\slmult0\widctlpar\hyphpar0\adjustright {\fs24\lang1024\cgrid0     diff -c bar.h.00 bar.h >> mydiff-fubar-1.0
\par }\pard \li960\sb240\sl-312\slmult0\widctlpar\hyphpar0\adjustright {\fs24\lang1024\cgrid0 This type of file differen
ce is suitable for input to the patch utility. After creating the patch, test it on a fresh fubar 1.0 source tree. To return the modification, simply e-mail either the author of the program or, more commonly, the developer mailing list for the project. Fo
r instance: 
\par     mail fubar-dev@fubar.org
\par These mailing lists are an excellent means of staying abreast of the latest patches, releases, developer discussions, etc. Usually subscription is open or the list is archived for perusal by the public. Note that th
e above example is illustrative only. To determine the available mailing lists for a project, visit the project web site.
\par }\pard\plain \s5\li960\sb240\sl-312\slmult0\keepn\widctlpar\hyphpar0\outlinelevel4\adjustright {\b\f1\lang1024 Contributing to SCO Skunkware Open Souce Software
\par }\pard\plain \li960\sb120\sl-312\slmult0\widctlpar\hyphpar0\adjustright \fs20\cgrid {\fs24\lang1024\cgrid0 If you would like to contribute to the ongoing effort to provide quality Open Source products to SCO customers: 
\par }\pard \fi-240\li1200\sb120\sl-312\slmult0\widctlpar\tx1200\hyphpar0\adjustright {\fs19\lang1024\cgrid0 \bullet \tab }{\fs24\lang1024\cgrid0 Read the Skunkware FAQ at http://www.sco.com/skunkware/faq.html
\par }{\fs19\lang1024\cgrid0 \bullet \tab }{\fs24\lang1024\cgrid0 Read the Skunkware submission guidelines at http://www.sco.com/skunkware/submission.html
\par }{\fs19\lang1024\cgrid0 \bullet \tab }{\fs24\lang1024\cgrid0 Join the polecats mailing list by sending an e-mail message to polecats-request@scofolks.ocston.org with any subject line and a single line in the body of the message: 
\par }\pard \li1200\sb120\sl-312\slmult0\widctlpar\hyphpar0\adjustright {\fs24\lang1024\cgrid0       subscribe
\par }\pard \li960\sb120\sl-312\slmult0\widctlpar\hyphpar0\adjustright {\fs24\lang1024\cgrid0 The software on the Skunkware CD-ROM is licensed under a variety of terms. Much of it is licensed under the terms of the GNU General Public
 License. Some is licensed under the GNU Library General Public License. Other components are licensed under the Artistic License. Many of the components are "Freeware" with no restrictions on their redistribution while a few components are "Shareware" me
a
ning the author would like you to try the software and, if you wish to use it, send her some money. A few components are commercial products which can be used freely for non-commercial purposes. Some components simply restrict their use to non-commercial 
purposes.
\par The Santa Cruz Operation, Inc. and SCO Skunkware are not related to, affiliated with or licensed by the famous Lockheed Martin Skunk Works (R), the creator of the F-117 Stealth Fighter, SR-71, U-2, Venturestar(tm), Darkstar(tm), and other pioneering air a
nd spacecraft.
\par }\pard\plain \s5\li960\sb240\sl-312\slmult0\keepn\widctlpar\hyphpar0\outlinelevel4\adjustright {\b\f1\lang1024 Author and Contributors
\par }\pard\plain \li960\sb120\sl-312\slmult0\widctlpar\hyphpar0\adjustright \fs20\cgrid {\fs24\lang1024\cgrid0 Ronald Joe Record has worked for The Santa Cruz Operation for over 16 years.
\par Record holds a Ph.D. in Mathematics from the University of California.
\par David Eyes (davidey@sco.com) contributed to this document in design, review and editorial matters.
\par }\pard\plain \s5\li960\sb240\sl-312\slmult0\keepn\widctlpar\hyphpar0\outlinelevel4\adjustright {\b\f1\lang1024 About This Document
\par }\pard\plain \li960\sb120\sl-312\slmult0\widctlpar\hyphpar0\adjustright \fs20\cgrid {\fs24\lang1024\cgrid0 This document was created using SGML-Tools 2.0.2, Jade 1.2.1 and teTeX 0.9 running on UnixWare 7.
\par The source to this document is maintained at http://www.sco.com/skunkware/sgmldocs/scoworld-two.sgml. A Makef
ile and formatted varieties of this document are also available at http://www.sco.com/skunkware/sgmldocs/. For instance, you will find a postscript version at http://www.sco.com/skunkware/sgmldocs/ps/scoworld-two.ps. Finally, an HTML version of this and o
ther porting documents will be available at http://www.sco.com/skunkware/porting/.
\par }}