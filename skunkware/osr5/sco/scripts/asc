#!/usr/local/bin/gawk -f
#!/usr/bin/awk -f
# @(#) asc.gawk 1.3 97/06/27
# asc: print ascii values of characters
# Use gawk because its printf "%c" works the way we want.
# Yes, this is pretty gross...
# 91/10/17 john h. dubois iii (john@armory.com)
# 92/02/16 added help
# 92/05/01 changed to #!gawk script
# 92/08/04 changed to use a function
# 94/01/01 Added all options.
# 94/01/08 Read from stdin if no data given on cmd line.
# 94/09/15 Added w option
# 94/10/15 Fixed h and r options.  Added l option.  Made work for 0 values.
# 95/05/07 Added z option.
# 95/07/26 Added pdsS options.
# 97/06/18 Added y option.
# 97/06/27 Added YR options.

BEGIN {
    Name = "asc"
    Usage = \
"Usage: " Name " [-hbowxlRyYz] [-p<bits>] [-[sS]<num-chars>] [-r<radix>]\n"\
"             [-d<digits>] <characters> ..."
    ARGC = Opts(Name,Usage,"bd>hlop>r>Rs>S>wxyYz",0,"","",0,"",0,"",
    "y,s,S,p,w,l;b,o,x,r;sSpwlboxrdz,Y,R")
    if ("h" in Options) {
	printf \
"%s: print the ASCII values of characters.\n"\
"%s\n"\
"The values of the characters in each word are printed together on a line,\n"\
"separated by spaces.  If more than one word is given, the values for each\n"\
"are printed on separate lines.  If no characters are given on the command\n"\
"line, they are read from the standard input.  A blank line is printed\n"\
"between the converted output for each line of input.\n"\
"Options:\n"\
"-h: Print this help.\n"\
"Input conversion:\n"\
"-s<numchars>: Read the standard input as a stream, and convert each\n"\
"    <numchars> characters to a word as a single value, with the first\n"\
"    character of each set read setting the low 8 bits, etc.  <numchars>\n"\
"    must be in the range 1..4.  Due to gawk limitations, if the last\n"\
"    character of the file is a newline, the last word may be incorrect.\n"\
"-S<numchars>: Like -s, except that the last character of each set read\n"\
"    sets the low 8 bits, etc.\n"\
"-p<bits>: Take each word to be an unsigned fixed-point number, with the\n"\
"    low <bits> bits being to the right of the point.\n"\
"-w: Convert the characters in each word as a single value.  The rightmost\n"\
"    character of each word sets the low 8 bits, etc.  If a word is longer\n"\
"    than 4 characters, each 4 characters (grouped from the right) are\n"\
"    converted separately.  Due to limitations of gawk arithmetic, only\n"\
"    values up to 2^31-1 may be converted.\n"\
"-l: Like -w, except that the leftmost character of each word sets the low\n"\
"    8 bits, etc.\n"\
"-y: Interpret certain input combinations as a symbolic value.  Currently,\n"\
"    the only conversion done is that the sequence ^X will be interpreted\n"\
"    as control-X, where X is any character from the set: @A-Za-z[\]^_?\n"\
"Output formatting:\n"\
"-b: Print values in binary.\n"\
"-o: Print values in octal.\n"\
"-x: Print values in hex.\n"\
"-r<radix>: Print values in radix (base) <radix>\n"\
"-d<digits>: Specify the number of output-base digits to print after the\n"\
"    decimal point.  Used with -p only.\n"\
"-z: Print values with leading zeros, so they occupy a fixed field width.\n"\
"-Y: Instead of printing numbers, produce output in which the characters\n"\
"    with ASCII values 32-126 are printed directly, characters 0-31 are\n"\
"    printed as ^@ through ^, and characters 128-255 are printed in octal\n"\
"    (\0xxx) form.  May not be used with any of the multi-character\n"\
"    conversion options.\n"\
"-R: Raw output; no conversion at all.  Normally only used with -y.\n"\
"    May not be used with any of the multi-character conversion options.\n",
    Name,Usage
	exit(0)
    }
    SymIn = "y" in Options
    SymOut = "Y" in Options
    rawOut = "R" in Options
    if ("b" in Options)
	Base = 2
    else if ("o" in Options)
	Base = 8
    else if ("x" in Options)
	Base = 16
    else if ("r" in Options)
	Base = Options["r"]+0
    else
	Base = 10
    if ("p" in Options) {
	Scale = 2^(Options["p"])
	# Convert the integer value of the maximum fractional part to a
	# string to estimate how many fraction digits are needed to
	# represent the value.
	if ("d" in Options)
	    FracDig = Options["d"]
	else
	    FracDig = length(itoa(Scale-1,Base))
    }
    else
	Scale = 0
    WordLen = 1
    MaxVal = 255
    if ("w" in Options || "l" in Options) {
	WordLen = 4
	MaxVal = 2^31-1
	Left = "l" in Options
    }
    if (Stream = ("s" in Options || "S" in Options)) {
	if ("s" in Options)
	    WordLen = Options["s"]
	else
	    WordLen = Options["S"]
	if (WordLen > 4) {
	    print \
	    "Number of characters given with -s and -S must be <= 4" \
	    > "/dev/stderr"
	    exit(1)
	}
	if (WordLen < 4)
	    MaxVal = 256^WordLen - 1
	else
	    MaxVal = 2^31-1
	Left = "s" in Options
    }
    if ("z" in Options) {
	if (Scale)
	    nDig = length(itoa(int(MaxVal/Scale),Base)) + 1 + FracDig
	else
	    nDig = length(itoa(MaxVal,Base))
    }
    else
	nDig = 0

    if (Stream) {
	# Since we can't tell whether RS occurs after the last record,
	# guarantee that it does by adding it after the end of the input
	# stream.  Note: this won't work until the bug wherein gawk closes
	# stdin for pipes to getline is fixed.
	# Cmd = "cat; echo ''"
	# while ((Cmd | getline) == 1) {
	# For now, just ignore the final RS... sigh.
	while (getline == 1) {
	    S = S Sep $0   # Every line except the first had to come after a \n
	    Start = 1
	    for (len = length(S); (Start+WordLen-1) >= len; Start += WordLen)
		ConvertWord(substr(S,Start,WordLen),Base,WordLen,Left,nDig,
		Scale,FracDig)
	    S = substr(S,Start)
	    Sep = "\n"
	}
	# close(Cmd)
	if (S != "")
	    ConvertWord(S,Base,WordLen,Left,nDig,Scale,FracDig)
    }
    else if (ARGC < 2) {
	while (getline == 1) {
	    printf newline	# print newline before each group except first
	    for (i = 1; i <= NF; i++)
		ConvertWord($i,Base,WordLen,Left,nDig,Scale,FracDig,SymIn,
		SymOut,rawOut)
	    newline = "\n"
	}
    }
    else {
	for (i = 1; i < ARGC; i++)
	    ConvertWord(ARGV[i],Base,WordLen,Left,nDig,Scale,FracDig,SymIn,
	    SymOut,rawOut)
    }
}

# Convert character sequences of the form ^X to control character X
function ToControl(S,  len,i,c0,c,newS) {
    len = length(S)
    if (!("@" in _ToControl_Map)) {
	_ToControl_Map["@"] = "\000"
	_ToControl_Map["["] = "\033"
	_ToControl_Map["\\"] = "\034"
	_ToControl_Map["]"] = "\035"
	_ToControl_Map["^"] = "\036"
	_ToControl_Map["_"] = "\037"
	_ToControl_Map["?"] = "\177"
	for (i = 1; i <= 26; i++) {
	    _ToControl_Map[sprintf("%c",i+64)] = sprintf("%c",i)
	    _ToControl_Map[sprintf("%c",i+96)] = sprintf("%c",i)
	}
    }
	
    for (i = 1; i <= len; i++)
	if ((c0 = substr(S,i,1)) == "^" && \
	(c = substr(S,i+1,1)) in _ToControl_Map) {
	    newS = newS _ToControl_Map[c]
	    i += 1
	}
	else
	    newS = newS c0
    return newS
}

# Convert the chars of string s to their ASCII integer values and print them.
# Each WordLen chars of s are converted as a unit.
# Base is the output radix.
# When WordLen is more than 1, Left determines which end of the substring
# sets which bits of the output word.
# If nDig is nonzero, values are printed with leading zeros to make the
# numeric part be nDig digits long, and a space is printed before the
# numeric value if it is positive.
# If Scale is nonzero, the number is taken to be a fixed-point number; it
# is divided by Scale and converted, with FracDig digits printed after the 
# decimal point.
function ConvertWord(s,Base,WordLen,Left,nDig,Scale,FracDig,SymIn,SymOut,
rawOut,
rem,len,n) {
    if (SymIn)
	s = ToControl(s)

    if (SymOut) {
	print Uncontrol(s)
	return
    }
    if (rawOut) {
	print s
	return
    }


    len = length(s)	# Find number of chars to convert
    
    if (Left)
	n = 1	# If converting left to right, start with char pos 1
    else {
	rem = len % WordLen
	# Do non-integral-word-length prefix first, if any
	if (rem)
	    if (Scale)
		printf ftoa(ascW(substr(s,1,rem))/Scale,Base,nDig,FracDig) " "
	    else
		printf itoa(ascW(substr(s,1,rem)),Base,nDig) " "
	n = rem + 1
    }
    for (; n <= len; n += WordLen)
	if (Scale)
	    printf \
	    ftoa(ascW(substr(s,n,WordLen),Left)/Scale,Base,nDig,FracDig) " "
	else
	    printf itoa(ascW(substr(s,n,WordLen),Left),Base,nDig) " "
    print ""
}

function asc(InC,  c,ascval,b) {
    ascval = 128
    b = 128
    while ((c = sprintf("%c",ascval)) != InC)
	if (c < InC)
	    ascval += (b /= 2)
	else
	    ascval -= (b /= 2)
    # use int() because if value is InC, the last division of b will give 0.5
    return int(ascval)
}

# Convert word of up to 4 chars to big ascii val & return it as an integer.
# If Left is false, rightmost char sets low 8 bits, etc.
# If Left is true, leftmost char sets low 8 bits, etc.
function ascW(S,Left,  l,tot,i) {
    l = length(S)
    if (Left)
	for (i = l; i >= 1; i--)
	    tot = tot * 256 + asc(substr(S,i,1))
    else
	for (i = 1; i <= l; i++)
	    tot = tot * 256 + asc(substr(S,i,1))
    return tot
}

### start of ntoa lib
# @(#) ntoa 1.0 94/01/01
# Converts integer inval to string representation in base radix & returns it.
# inval is taken to be a signed value; the result is preceded by a minus
# sign if negative.
# If numDig is nonzero, the result (before the minus sign, if any, is added)
# is padded on the left with zeros to make it numDig digits long.
# Then, either the minus sign or (if the result is positive) a space is added.
# This means that the result will always be numDig+1 characters long.
# If the result is longer than numDig before padding, it is left alone.
# If numDig is zero, the leading space is not printed.
# Null is returned on error.
function itoa(inval,radix,numDig,  Buf,value,neg,dig,Sign) {

    if (!(2 <= radix && radix <= 36))
	return ""
    if (neg = (inval < 0))
	value = -inval
    else
	value = inval
    if (value == 0)
	Buf = "0"
    while (value > 0) {
	if ((dig = value % radix) > 9)
	    # Add digit value to 'a' - 10
	    Buf = sprintf("%c",dig + 87) Buf
	else
	    # Add digit value to '0'
	    Buf = sprintf("%c",dig + 48) Buf
	value = int(value / radix)
    }
    if (neg)
	Sign "-"
    else if (numDig)	# Do this before zeroing numDig
	Sign = " "
    if (numDig)
	for (numDig -= length(Buf); numDig > 0; numDig--)
	    Buf = "0" Buf
    return Sign Buf
}

# ftoa: Convert a floating-point number to ASCII.
# Converts inval to string representation in base radix & returns it.
# inval is taken to be a signed value; the result is preceded by a minus
# sign if negative.
# fracDig is the number of digits in the output radix to print after the
# decimal point.
# If nDig is nonzero, the result (before the minus sign, if any, is added)
# is padded on the left with zeros to make it nDig digits long.
# Then, either the minus sign or (if the result is positive) a space is added.
# This means that the result will always be nDig+1 characters long.
# If the result is longer than nDig before padding, it is left alone.
# Null is returned on error.
function ftoa(inval,radix,nDig,fracDig,
Buf,value,dig,intPart) {

    if (!(2 <= radix && radix <= 36))
	return ""
    intPart = int(inval)
    value = abs(inval - intPart)
    Buf = itoa(int(inval),radix,nDig ? nDig - fracDig - 1 : 0) "."
    for (; fracDig; fracDig--) {
	dig = int(value *= radix)
	# Add digit value to 'a' - 10 or to '0'
	Buf = Buf sprintf("%c",dig + (dig > 9 ? 87 : 48))
	value -= dig
    }
    return Buf
}
### end of ntoa lib
### Start of ProcArgs library
# @(#) ProcArgs 1.11 96/12/08
# 92/02/29 john h. dubois iii (john@armory.com)
# 93/07/18 Added "#" arg type
# 93/09/26 Do not count -h against MinArgs
# 94/01/01 Stop scanning at first non-option arg.  Added ">" option type.
#          Removed meaning of "+" or "-" by itself.
# 94/03/08 Added & option and *()< option types.
# 94/04/02 Added NoRCopt to Opts()
# 94/06/11 Mark numeric variables as such.
# 94/07/08 Opts(): Do not require any args if h option is given.
# 95/01/22 Record options given more than once.  Record option num in argv.
# 95/06/08 Added ExclusiveOptions().
# 96/01/20 Let rcfiles be a colon-separated list of filenames.
#          Expand $VARNAME at the start of its filenames.
#          Let varname=0 and -option- turn off an option.
# 96/05/05 Changed meaning of 7th arg to Opts; now can specify exactly how many
#          of the vars should be searched for in the environment.
#          Check for duplicate rcfiles.
# 96/05/13 Return more specific error values.  Note: ProcArgs() and InitOpts()
#          now return various negatives values on error, not just -1, and
#          Opts() may set Err to various positive values, not just 1.
#          Added AllowUnrecOpt.
# 96/05/23 Check type given for & option
# 96/06/15 Re-port to awk
# 96/10/01 Moved file-reading code into ReadConfFile(), so that it can be
#          used by other functions.
# 96/10/15 Added OptChars
# 96/11/01 Added exOpts arg to Opts()
# 96/11/16 Added ; type
# 96/12/08 Added Opt2Set() & Opt2Sets()
# 96/12/27 Added CmdLineOpt()

# optlist is a string which contains all of the possible command line options.
# A character followed by certain characters indicates that the option takes
# an argument, with type as follows:
# :	String argument
# ;	Non-empty string argument
# *	Floating point argument
# (	Non-negative floating point argument
# )	Positive floating point argument
# #	Integer argument
# <	Non-negative integer argument
# >	Positive integer argument
# The only difference the type of argument makes is in the runtime argument
# error checking that is done.

# The & option is a special case used to get numeric options without the
# user having to give an option character.  It is shorthand for [-+.0-9].
# If & is included in optlist and an option string that begins with one of
# these characters is seen, the value given to "&" will include the first
# char of the option.  & must be followed by a type character other than ":"
# or ";".
# Note that if e.g. &> is given, an option of -.5 will produce an error.

# Strings in argv[] which begin with "-" or "+" are taken to be
# strings of options, except that a string which consists solely of "-"
# or "+" is taken to be a non-option string; like other non-option strings,
# it stops the scanning of argv and is left in argv[].
# An argument of "--" or "++" also stops the scanning of argv[] but is removed.
# If an option takes an argument, the argument may either immediately
# follow it or be given separately.
# "-" and "+" options are treated the same.  "+" is allowed because most awks
# take any -options to be arguments to themselves.  gawk 2.15 was enhanced to
# stop scanning when it encounters an unrecognized option, though until 2.15.5
# this feature had a flaw that caused problems in some cases.  See the OptChars
# parameter to explicitly set the option-specifier characters.

# If an option that does not take an argument is given,
# an index with its name is created in Options and its value is set to the
# number of times it occurs in argv[].

# If an option that does take an argument is given, an index with its name is
# created in Options and its value is set to the value of the argument given
# for it, and Options[option-name,"count"] is (initially) set to the 1.
# If an option that takes an argument is given more than once,
# Options[option-name,"count"] is incremented, and the value is assigned to
# the index (option-name,instance) where instance is 2 for the second occurance
# of the option, etc.
# In other words, the first time an option with a value is encountered, the
# value is assigned to an index consisting only of its name; for any further
# occurances of the option, the value index has an extra (count) dimension.

# The sequence number for each option found in argv[] is stored in
# Options[option-name,"num",instance], where instance is 1 for the first
# occurance of the option, etc.  The sequence number starts at 1 and is
# incremented for each option, both those that have a value and those that
# do not.  Options set from a config file have a value of 0 assigned to this.

# Options and their arguments are deleted from argv.
# Note that this means that there may be gaps left in the indices of argv[].
# If compress is nonzero, argv[] is packed by moving its elements so that
# they have contiguous integer indices starting with 0.
# Option processing will stop with the first unrecognized option, just as
# though -- was given except that unlike -- the unrecognized option will not be
# removed from ARGV[].  Normally, an error value is returned in this case.
# If AllowUnrecOpt is true, it is not an error for an unrecognized option to
# be found, so the number of remaining arguments is returned instead.
# If OptChars is not a null string, it is the set of characters that indicate
# that an argument is an option string if the string begins with one of the
# characters.  A string consisting solely of two of the same option-indicator
# characters stops the scanning of argv[].  The default is "-+".
# argv[0] is not examined.
# The number of arguments left in argc is returned.
# If an error occurs, the global string OptErr is set to an error message
# and a negative value is returned.
# Current error values:
# -1: option that required an argument did not get it.
# -2: argument of incorrect type supplied for an option.
# -3: unrecognized (invalid) option.
function ProcArgs(argc,argv,OptList,Options,compress,AllowUnrecOpt,OptChars,
ArgNum,ArgsLeft,Arg,ArgLen,ArgInd,Option,Pos,NumOpt,Value,HadValue,specGiven,
NeedNextOpt,GotValue,OptionNum,Escape,dest,src,count,c,OptTerm,OptCharSet)
{
# ArgNum is the index of the argument being processed.
# ArgsLeft is the number of arguments left in argv.
# Arg is the argument being processed.
# ArgLen is the length of the argument being processed.
# ArgInd is the position of the character in Arg being processed.
# Option is the character in Arg being processed.
# Pos is the position in OptList of the option being processed.
# NumOpt is true if a numeric option may be given.
    ArgsLeft = argc
    NumOpt = index(OptList,"&")
    OptionNum = 0
    if (OptChars == "")
	OptChars = "-+"
    while (OptChars != "") {
	c = substr(OptChars,1,1)
	OptChars = substr(OptChars,2)
	OptCharSet[c]
	OptTerm[c c]
    }
    for (ArgNum = 1; ArgNum < argc; ArgNum++) {
	Arg = argv[ArgNum]
	if (length(Arg) < 2 || !((specGiven = substr(Arg,1,1)) in OptCharSet))
	    break	# Not an option; quit
	if (Arg in OptTerm) {
	    delete argv[ArgNum]
	    ArgsLeft--
	    break
	}
	ArgLen = length(Arg)
	for (ArgInd = 2; ArgInd <= ArgLen; ArgInd++) {
	    Option = substr(Arg,ArgInd,1)
	    if (NumOpt && Option ~ /[-+.0-9]/) {
		# If this option is a numeric option, make its flag be & and
		# its option string flag position be the position of & in
		# the option string.
		Option = "&"
		Pos = NumOpt
		# Prefix Arg with a char so that ArgInd will point to the
		# first char of the numeric option.
		Arg = "&" Arg
		ArgLen++
	    }
	    # Find position of flag in option string, to get its type (if any).
	    # Disallow & as literal flag.
	    else if (!(Pos = index(OptList,Option)) || Option == "&") {
		if (AllowUnrecOpt) {
		    Escape = 1
		    break
		}
		else {
		    OptErr = "Invalid option: " specGiven Option
		    return -3
		}
	    }

	    # Find what the value of the option will be if it takes one.
	    # NeedNextOpt is true if the option specifier is the last char of
	    # this arg, which means that if the option requires a value it is
	    # the next arg.
	    if (NeedNextOpt = (ArgInd >= ArgLen)) { # Value is the next arg
		if (GotValue = ArgNum + 1 < argc)
		    Value = argv[ArgNum+1]
	    }
	    else {	# Value is included with option
		Value = substr(Arg,ArgInd + 1)
		GotValue = 1
	    }

	    if (HadValue = AssignVal(Option,Value,Options,
	    substr(OptList,Pos + 1,1),GotValue,"",++OptionNum,!NeedNextOpt,
	    specGiven)) {
		if (HadValue < 0)	# error occured
		    return HadValue
		if (HadValue == 2)
		    ArgInd++	# Account for the single-char value we used.
		else {
		    if (NeedNextOpt) {	# option took next arg as value
			delete argv[++ArgNum]
			ArgsLeft--
		    }
		    break	# This option has been used up
		}
	    }
	}
	if (Escape)
	    break
	# Do not delete arg until after processing of it, so that if it is not
	# recognized it can be left in ARGV[].
	delete argv[ArgNum]
	ArgsLeft--
    }
    if (compress != 0) {
	dest = 1
	src = argc - ArgsLeft + 1
	for (count = ArgsLeft - 1; count; count--) {
	    ARGV[dest] = ARGV[src]
	    dest++
	    src++
	}
    }
    return ArgsLeft
}

# Assignment to values in Options[] occurs only in this function.
# Option: Option specifier character.
# Value: Value to be assigned to option, if it takes a value.
# Options[]: Options array to return values in.
# ArgType: Argument type specifier character.
# GotValue: Whether any value is available to be assigned to this option.
# Name: Name of option being processed.
# OptionNum: Number of this option (starting with 1) if set in argv[],
#     or 0 if it was given in a config file or in the environment.
# SingleOpt: true if the value (if any) that is available for this option was
#     given as part of the same command line arg as the option.  Used only for
#     options from the command line.
# specGiven is the option specifier character use, if any (e.g. - or +),
# for use in error messages.
# Global variables: OptErr
# Return value: negative value on error, 0 if option did not require an
# argument, 1 if it did & used the whole arg, 2 if it required just one char of
# the arg.
# Current error values:
# -1: Option that required an argument did not get it.
# -2: Value of incorrect type supplied for option.
# -3: Bad type given for option &
function AssignVal(Option,Value,Options,ArgType,GotValue,Name,OptionNum,
SingleOpt,specGiven,  UsedValue,Err,NumTypes) {
    # If option takes a value...    [
    NumTypes = "*()#<>]"
    if (Option == "&" && ArgType !~ "[" NumTypes) {	# ]
	OptErr = "Bad type given for & option"
	return -3
    }

    if (UsedValue = (ArgType ~ "[:;" NumTypes)) {	# ]
	if (!GotValue) {
	    if (Name != "")
		OptErr = "Variable requires a value -- " Name
	    else
		OptErr = "option requires an argument -- " Option
	    return -1
	}
	if ((Err = CheckType(ArgType,Value,Option,Name,specGiven)) != "") {
	    OptErr = Err
	    return -2
	}
	# Mark this as a numeric variable; will be propogated to Options[] val.
	if (ArgType != ":" && ArgType != ";")
	    Value += 0
	if ((Instance = ++Options[Option,"count"]) > 1)
	    Options[Option,Instance] = Value
	else
	    Options[Option] = Value
    }
    # If this is an environ or rcfile assignment & it was given a value...
    else if (!OptionNum && Value != "") {
	UsedValue = 1
	# If the value is "0" or "-" and this is the first instance of it,
	# do not set Options[Option]; this allows an assignment in an rcfile to
	# turn off an option (for the simple "Option in Options" test) in such
	# a way that it cannot be turned on in a later file.
	if (!(Option in Options) && (Value == "0" || Value == "-"))
	    Instance = 1
	else
	    Instance = ++Options[Option]
	# Save the value even though this is a flag
	Options[Option,Instance] = Value
    }
    # If this is a command line flag and has a - following it in the same arg,
    # it is being turned off.
    else if (OptionNum && SingleOpt && substr(Value,1,1) == "-") {
	UsedValue = 2
	if (Option in Options)
	    Instance = ++Options[Option]
	else
	    Instance = 1
	Options[Option,Instance]
    }
    # If this is a flag assignment without a value, increment the count for the
    # flag unless it was turned off.  The indicator for a flag being turned off
    # is that the flag index has not been set in Options[] but it has an
    # instance count.
    else if (Option in Options || !((Option,1) in Options))
	# Increment number of times this flag seen; will inc null value to 1
	Instance = ++Options[Option]
    Options[Option,"num",Instance] = OptionNum
    return UsedValue
}

# Option is the option letter
# Value is the value being assigned
# Name is the var name of the option, if any
# ArgType is one of:
# :	String argument
# ;	Non-null string argument
# *	Floating point argument
# (	Non-negative floating point argument
# )	Positive floating point argument
# #	Integer argument
# <	Non-negative integer argument
# >	Positive integer argument
# specGiven is the option specifier character use, if any (e.g. - or +),
# for use in error messages.
# Returns null on success, err string on error
function CheckType(ArgType,Value,Option,Name,specGiven,  Err,ErrStr) {
    if (ArgType == ":")
	return ""
    if (ArgType == ";") {
	if (Value == "")
	    Err = "must be a non-empty string"
    }
    # A number begins with optional + or -, and is followed by a string of
    # digits or a decimal with digits before it, after it, or both
    else if (Value !~ /^[-+]?([0-9]+|[0-9]*\.[0-9]+|[0-9]+\.)$/)
	Err = "must be a number"
    else if (ArgType ~ "[#<>]" && Value ~ /\./)
	Err = "may not include a fraction"
    else if (ArgType ~ "[()<>]" && Value < 0)
	Err = "may not be negative"
    # (
    else if (ArgType ~ "[)>]" && Value == 0)
	Err = "must be a positive number"
    if (Err != "") {
	ErrStr = "Bad value \"" Value "\".  Value assigned to "
	if (Name != "")
	    return ErrStr "variable " substr(Name,1,1) " " Err
	else {
	    if (Option == "&")
		Option = Value
	    return ErrStr "option " specGiven substr(Option,1,1) " " Err
	}
    }
    else
	return ""
}

# Note: only the above functions are needed by ProcArgs.
# The rest of these functions call ProcArgs() and also do other
# option-processing stuff.

# Opts: Process command line arguments.
# Opts processes command line arguments using ProcArgs()
# and checks for errors.  If an error occurs, a message is printed
# and the program is exited.
#
# Input variables:
# Name is the name of the program, for error messages.
# Usage is a usage message, for error messages.
# OptList the option description string, as used by ProcArgs().
# MinArgs is the minimum number of non-option arguments that this
# program should have, non including ARGV[0] and +h.
# If the program does not require any non-option arguments,
# MinArgs should be omitted or given as 0.
# rcFiles, if given, is a colon-seprated list of filenames to read for
# variable initialization.  If a filename begins with ~/, the ~ is replaced
# by the value of the environment variable HOME.  If a filename begins with
# $, the part from the character after the $ up until (but not including)
# the first character not in [a-zA-Z0-9_] will be searched for in the
# environment; if found its value will be substituted, if not the filename will
# be discarded.
# rcfiles are read in the order given.
# Values given in them will not override values given on the command line,
# and values given in later files will not override those set in earlier
# files, because AssignVal() will store each with a different instance index.
# The first instance of each variable, either on the command line or in an
# rcfile, will be stored with no instance index, and this is the value
# normally used by programs that call this function.
# VarNames is a comma-separated list of variable names to map to options,
# in the same order as the options are given in OptList.
# If EnvSearch is given and nonzero, the first EnvSearch variables will also be
# searched for in the environment.  If set to -1, all values will be searched
# for in the environment.  Values given in the environment will override
# those given in the rcfiles but not those given on the command line.
# NoRCopt, if given, is an additional letter option that if given on the
# command line prevents the rcfiles from being read.
# See ProcArgs() for a description of AllowUnRecOpt and optChars, and
# ExclusiveOptions() for a description of exOpts.
# Special options:
# If x is made an option and is given, some debugging info is output.
# h is assumed to be the help option.

# Global variables:
# The command line arguments are taken from ARGV[].
# The arguments that are option specifiers and values are removed from
# ARGV[], leaving only ARGV[0] and the non-option arguments.
# The number of elements in ARGV[] should be in ARGC.
# After processing, ARGC is set to the number of elements left in ARGV[].
# The option values are put in Options[].
# On error, Err is set to a positive integer value so it can be checked for in
# an END block.
# Return value: The number of elements left in ARGV is returned.
# Must keep OptErr global since it may be set by InitOpts().
function Opts(Name,Usage,OptList,MinArgs,rcFiles,VarNames,EnvSearch,NoRCopt,
AllowUnrecOpt,optChars,exOpts,  ArgsLeft,e) {
    if (MinArgs == "")
	MinArgs = 0
    ArgsLeft = ProcArgs(ARGC,ARGV,OptList NoRCopt,Options,1,AllowUnrecOpt,
    optChars)
    if (ArgsLeft < (MinArgs+1) && !("h" in Options)) {
	if (ArgsLeft >= 0) {
	    OptErr = "Not enough arguments"
	    Err = 4
	}
	else
	    Err = -ArgsLeft
	printf "%s: %s.\nUse -h for help.\n%s\n",
	Name,OptErr,Usage > "/dev/stderr"
	exit 1
    }
    if (rcFiles != "" && (NoRCopt == "" || !(NoRCopt in Options)) &&
    (e = InitOpts(rcFiles,Options,OptList,VarNames,EnvSearch)) < 0)
    {
	print Name ": " OptErr ".\nUse -h for help." > "/dev/stderr"
	Err = -e
	exit 1
    }
    if ((exOpts != "") && ((OptErr = ExclusiveOptions(exOpts,Options)) != ""))
    {
	printf "%s: Error: %s\n",Name,OptErr > "/dev/stderr"
	Err = 1
	exit 1
    }
    return ArgsLeft
}

# ReadConfFile(): Read a file containing var/value assignments, in the form
# <variable-name><assignment-char><value>.
# Whitespace (spaces and tabs) around a variable (leading whitespace on the
# line and whitespace between the variable name and the assignment character) 
# is stripped.  Lines that do not contain an assignment operator or which
# contain a null variable name are ignored, other than possibly being noted in
# the return value.  If more than one assignment is made to a variable, the
# first assignment is used.
# Input variables:
# File is the file to read.
# Comment is the line-comment character.  If it is found as the first non-
#     whitespace character on a line, the line is ignored.
# Assign is the assignment string.  The first instance of Assign on a line
#     separates the variable name from its value.
# If StripWhite is true, whitespace around the value (whitespace between the
#     assignment char and trailing whitespace on the line) is stripped.
# VarPat is a pattern that variable names must match.  
#     Example: "^[a-zA-Z][a-zA-Z0-9]+$"
# If FlagsOK is true, variables are allowed to be "set" by being put alone on
#     a line; no assignment operator is needed.  These variables are set in
#     the output array with a null value.  Lines containing nothing but
#     whitespace are still ignored.
# Output variables:
# Values[] contains the assignments, with the indexes being the variable names
#     and the values being the assigned values.
# Lines[] contains the line number that each variable occured on.  A flag set
#     is record by giving it an index in Lines[] but not in Values[].
# Return value:
# If any errors occur, a string consisting of descriptions of the errors
# separated by newlines is returned.  In no case will the string start with a
# numeric value.  If no errors occur,  the number of lines read is returned.
function ReadConfigFile(Values,Lines,File,Comment,Assign,StripWhite,VarPat,
FlagsOK,
Line,Status,Errs,AssignLen,LineNum,Var,Val) {
    if (Comment != "")
	Comment = "^" Comment
    AssignLen = length(Assign)
    if (VarPat == "")
	VarPat = "."	# null varname not allowed
    while ((Status = (getline Line < File)) == 1) {
	LineNum++
	sub("^[ \t]+","",Line)
	if (Line == "")		# blank line
	    continue
	if (Comment != "" && Line ~ Comment)
	    continue
	if (Pos = index(Line,Assign)) {
	    Var = substr(Line,1,Pos-1)
	    Val = substr(Line,Pos+AssignLen)
	    if (StripWhite) {
		sub("^[ \t]+","",Val)
		sub("[ \t]+$","",Val)
	    }
	}
	else {
	    Var = Line	# If no value, var is entire line
	    Val = ""
	}
	if (!FlagsOK && Val == "") {
	    Errs = Errs \
	    sprintf("\nBad assignment on line %d of file %s: %s",
	    LineNum,File,Line)
	    continue
	}
	sub("[ \t]+$","",Var)
	if (Var !~ VarPat) {
	    Errs = Errs sprintf("\nBad variable name on line %d of file %s: %s",
	    LineNum,File,Var)
	    continue
	}
	if (!(Var in Lines)) {
	    Lines[Var] = LineNum
	    if (Pos)
		Values[Var] = Val
	}
    }
    if (Status)
	Errs = Errs "\nCould not read file " File
    close(File)
    return Errs == "" ? LineNum : substr(Errs,2)	# Skip first newline
}

# Variables:
# Data is stored in Options[].
# rcFiles, OptList, VarNames, and EnvSearch are as as described for Opts().
# Global vars:
# Sets OptErr.  Uses ENVIRON[].
# If anything is read from any of the rcfiles, sets READ_RCFILE to 1.
function InitOpts(rcFiles,Options,OptList,VarNames,EnvSearch,
Line,Var,Pos,Vars,Map,CharOpt,NumVars,TypesInd,Types,Type,Ret,i,rcFile,
fNames,numrcFiles,filesRead,Err,Values,retStr) {
    split("",filesRead,"")	# make awk know this is an array
    NumVars = split(VarNames,Vars,",")
    TypesInd = Ret = 0
    if (EnvSearch == -1)
	EnvSearch = NumVars
    for (i = 1; i <= NumVars; i++) {
	Var = Vars[i]
	CharOpt = substr(OptList,++TypesInd,1)
	if (CharOpt ~ "^[:;*()#<>&]$")
	    CharOpt = substr(OptList,++TypesInd,1)
	Map[Var] = CharOpt
	Types[Var] = Type = substr(OptList,TypesInd+1,1)
	# Do not overwrite entries from environment
	if (i <= EnvSearch && Var in ENVIRON &&
	(Err = AssignVal(CharOpt,ENVIRON[Var],Options,Type,1,Var,0)) < 0)
	    return Err
    }

    numrcFiles = split(rcFiles,fNames,":")
    for (i = 1; i <= numrcFiles; i++) {
	rcFile = fNames[i]
	if (rcFile ~ "^~/")
	    rcFile = ENVIRON["HOME"] substr(rcFile,2)
	else if (rcFile ~ /^\$/) {
	    rcFile = substr(rcFile,2)
	    match(rcFile,"^[a-zA-Z0-9_]*")
	    envvar = substr(rcFile,1,RLENGTH)
	    if (envvar in ENVIRON)
		rcFile = ENVIRON[envvar] substr(rcFile,RLENGTH+1)
	    else
		continue
	}
	if (rcFile in filesRead)
	    continue
	# rcfiles are liable to be given more than once, e.g. UHOME and HOME
	# may be the same
	filesRead[rcFile]
	if ("x" in Options)
	    printf "Reading configuration file %s\n",rcFile > "/dev/stderr"
	retStr = ReadConfigFile(Values,Lines,rcFile,"#","=",0,"",1)
	if (retStr > 0)
	    READ_RCFILE = 1
	else if (ret != "") {
	    OptErr = retStr
	    Ret = -1
	}
	for (Var in Lines)
	    if (Var in Map) {
		if ((Err = AssignVal(Map[Var],
		Var in Values ? Values[Var] : "",Options,Types[Var],
		Var in Values,Var,0)) < 0)
		    return Err
	    }
	    else {
		OptErr = sprintf(\
		"Unknown var \"%s\" assigned to on line %d\nof file %s",Var,
		Lines[Var],rcFile)
		Ret = -1
	    }
    }

    if ("x" in Options)
	for (Var in Map)
	    if (Map[Var] in Options)
		printf "(%s) %s=%s\n",Map[Var],Var,Options[Map[Var]] > \
		"/dev/stderr"
	    else
		printf "(%s) %s not set\n",Map[Var],Var > "/dev/stderr"
    return Ret
}

# OptSets is a semicolon-separated list of sets of option sets.
# Within a list of option sets, the option sets are separated by commas.  For
# each set of sets, if any option in one of the sets is in Options[] AND any
# option in one of the other sets is in Options[], an error string is returned.
# If no conflicts are found, nothing is returned.
# Example: if OptSets = "ab,def,g;i,j", an error will be returned due to
# the exclusions presented by the first set of sets (ab,def,g) if:
# (a or b is in Options[]) AND (d, e, or f is in Options[]) OR
# (a or b is in Options[]) AND (g is in Options) OR
# (d, e, or f is in Options[]) AND (g is in Options)
# An error will be returned due to the exclusions presented by the second set
# of sets (i,j) if: (i is in Options[]) AND (j is in Options[]).
# todo: make options given on command line unset options given in config file
# todo: that they conflict with.
function ExclusiveOptions(OptSets,Options,
Sets,SetSet,NumSets,Pos1,Pos2,Len,s1,s2,c1,c2,ErrStr,L1,L2,SetSets,NumSetSets,
SetNum,OSetNum) {
    NumSetSets = split(OptSets,SetSets,";")
    # For each set of sets...
    for (SetSet = 1; SetSet <= NumSetSets; SetSet++) {
	# NumSets is the number of sets in this set of sets.
	NumSets = split(SetSets[SetSet],Sets,",")
	# For each set in a set of sets except the last...
	for (SetNum = 1; SetNum < NumSets; SetNum++) {
	    s1 = Sets[SetNum]
	    L1 = length(s1)
	    for (Pos1 = 1; Pos1 <= L1; Pos1++)
		# If any of the options in this set was given, check whether
		# any of the options in the other sets was given.  Only check
		# later sets since earlier sets will have already been checked
		# against this set.
		if ((c1 = substr(s1,Pos1,1)) in Options)
		    for (OSetNum = SetNum+1; OSetNum <= NumSets; OSetNum++) {
			s2 = Sets[OSetNum]
			L2 = length(s2)
			for (Pos2 = 1; Pos2 <= L2; Pos2++)
			    if ((c2 = substr(s2,Pos2,1)) in Options)
				ErrStr = ErrStr "\n"\
				sprintf("Cannot give both %s and %s options.",
				c1,c2)
		    }
	}
    }
    if (ErrStr != "")
	return substr(ErrStr,2)
    return ""
}

# The value of each instance of option Opt that occurs in Options[] is made an
# index of Set[].
# The return value is the number of instances of Opt in Options.
function Opt2Set(Options,Opt,Set,  count) {
    if (!(Opt in Options))
	return 0
    Set[Options[Opt]]
    count = Options[Opt,"count"]
    for (; count > 1; count--)
	Set[Options[Opt,count]]
    return count
}

# The value of each instance of option Opt that occurs in Options[] that
# begins with "!" is made an index of nSet[] (with the ! stripped from it).
# Other values are made indexes of Set[].
# The return value is the number of instances of Opt in Options.
function Opt2Sets(Options,Opt,Set,nSet,  count,aSet,ret) {
    ret = Opt2Set(Options,Opt,aSet)
    for (value in aSet)
	if (substr(value,1,1) == "!")
	    nSet[substr(value,2)]
	else
	    Set[value]
    return ret
}

# Returns true if option Opt was given on the command line.
function CmdLineOpt(Options,Opt,  i) {
    for (i = 1; (Opt,"num",i) in Options; i++)
	if (Options[Opt,"num",i] != 0)
	    return 1
    return 0
}
### End of ProcArgs library

function abs(value) {
    if (value >= 0)
	return value
    else
	return -value
}
### Begin UnControl routines

# @(#) uncontrol.awk 1.1 96/05/29
# 92/11/09 john h. dubois iii (john@armory.com)
# 96/05/29 Added octal-only conversion.

# Uncontrol(S): Convert control characters in S to symbolic form.
# Characters in S with values < 32 and with value 127 are converted to the form
# ^X.  Characters with value >= 128 are converted to the octal form \0nnn,
# where nnn is the octal value of the character.
# The resulting string is returned.
# If OctalOnly is true, octal numbers are used for all symbolic values instead
# of ^X.
# Global variables: UncTable[] and char2octal[].
function Uncontrol(S,OctalOnly,  i,len,Output) {
    len = length(S)
    Output = ""
    if (!("a" in UncTable))
	MakeUncontrolTable()
    for (i = 1; i <= len; i++)
	Output = Output \
	(OctalOnly ? char2octal[substr(S,i,1)] : UncTable[substr(S,i,1)])
    return Output
}

# MakeUncontrolTable: Make tables for use by Uncontrol().
# Global variables:
# UncTable[] is made into a character -> symbolic character lookup table
# with characters with values < 32 and with value 127 converted to the form
# ^X, and characters with value >= 128 are converted to the octal form \0nnn.
# char2octal[] is made into a similar table but with all non-printing chars
# in the form \0nnn.
function MakeUncontrolTable(  i,c) {
    for (i = 0; i < 32; i++) {
	UncTable[c = sprintf("%c",i)] = "^" sprintf("%c",i + 64)
	char2octal[c] = "\\" sprintf("%03o",i)
    }
    for (i = 32; i < 127; i++) {
	c = sprintf("%c",i)
	char2octal[c]  = UncTable[c] = sprintf("%c",i)
    }
    UncTable[c = sprintf("%c",127)] = "^?"
    char2octal[c] = "\\0177"
    for (i = 128; i < 256; i++) {
	UncTable[c = sprintf("%c",i)] = "\\" sprintf("%03o",i)
	char2octal[c] = "\\" sprintf("%03o",i)
    }
}

### End UnControl routines
