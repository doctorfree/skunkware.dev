In case you're wondering _why_ I wrote these programs:

argus, arpwatch, and tcpdump are the big 3 programs that use the libpcap
library.  courtney is the perl wrapper for SATAN.  I didn't write any of
this code -- I just wrote the underlying MDI interface code for libpcap
which these all use.

I wrote dumpscreen because CSI2i in screen(HW) wouldn't work for me, 
I needed to see kernel messages on my system console, and it was easier
to telnet to a machine and run a program to observe what was on the 
screen than to find a person to accurately describe the screen contents.
A handy program for a tech support folks or dialing/telneting into somewhere.
I don't include the attribute byte as you may run dumpscreen from a 
terminal where attribute bytes are meaningless.  I think it still works 
in 40 column mode and ega80x43 mode but don't quote me on this.

nacl was an experiment that went wild.  It originally started in 1994 as
a means of tracking down certain network system calls from a stripped 
binary I was debugging (trace won't work, and socket/bind/connect/etc 
information was passed as pointers in a structure as an ioctl on /dev/socksys).
After that, I wanted to log only certain information.  That grew into a
list of things to log.  I shelved nacl for over a year to work on other
projects until a friend asked about it for a need he had.  I dusted 
nacl off for OSR5, added a few more features, and that's what you see today.

sockinfo started out as sock2pid, which was really a proof-of-concept program.
I then needed to see some PCB options which weren't available anywhere else,
so I added the necessary code.  After a few months of this, sock2pid didn't 
quite fit anymore, and sockinfo was born.  Adding UNIX domain socket support 
for OSR5 was the last feature I added.  The idea of sockinfo is to show 
as much information as possible from any given netstat -a line, with a 
heavy leaning towards programmers.  That's why the output is terse. 
lsof gives more readable output for everyday use.
I mean to rewrite the bulk of it eventually to allow for better command line
options, but somehow I never have the time :-(
If you're wondering why your disk grinds frantically when sockinfo starts,
it's because sockinfo tries to nlist(S) 33(!) structures and variables out of 
/unix, so give it some time.
sockinfo first saw public exposure on SLS net382d, followed by SLS net382e,
then TLS 583, and now this.

I wrote ss in a few hours when I was frustrated with crash and shoved it
onto SLS net382e.  I added the necessary code for OSR5 dynamic tables but
otherwise it's the same program from way back then:  no frills.

I can't say why I wrote spyfs, but I fully realize it has lots of Big
Brother(tm) potential.  Remember, there are commercial programs that do the same
thing.  Some run the application under a pseudo tty while others also perform
line discipline tweaks -- the concept is the same.

Each of these programs has been useful for assorted purposes and I thought
others might find them useful too.

Nathan Peterson
nathan@sco.com
01 August 1996
