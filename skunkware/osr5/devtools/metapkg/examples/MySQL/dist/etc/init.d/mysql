#!/bin/sh
# Copyright Abandoned 1996 TCX DataKonsult AB & Monty Program KB & Detron HB
# Modified extensively by Ronald Joe Record <rr@sco.com> for use on
# SCO OpenServer and UnixWare.
#
# This file is public domain and comes with NO WARRANTY of any kind

# MySQL daemon start/stop script.

# Usually this is put in /etc/init.d (at least on machines SYSV R4 based
# systems) and linked to /etc/rc3.d/S99mysql and /etc/rc0.d/K01mysql.
# When this is done the mysql server will be started when the machine is
# started and shut down when the systems goes down.

# Comments to support chkconfig on Linux
# chkconfig: 2345 90 20
# description: A very fast and reliable SQL database engine.

# Comments to support LSB init script conventions
### BEGIN INIT INFO
# Provides: mysql
# Required-Start: $local_fs $network $remote_fs
# Required-Stop: $local_fs $network $remote_fs
# Default-Start:  2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: start and stop MySQL
# Description: MySQL is a very fast and reliable SQL database engine.
### END INIT INFO
 
# If you install MySQL on some other places than /, then you
# have to do one of the following things for this script to work:
#
# - Run this script from within the MySQL installation directory
# - Create a /etc/my.cnf file with the following information:
#   [mysqld]
#   basedir=<path-to-mysql-installation-directory>
# - Add the above to any other configuration file (for example ~/.my.ini)
#   and copy my_print_defaults to /usr/bin
# - Add the path to the mysql-installation-directory to the basedir variable
#   below.
#
# If you want to affect other MySQL variables, you should make your changes
# in the /etc/my.cnf, ~/.my.cnf or other MySQL configuration files.

basedir=

# The following variables are only set for letting mysql.server find things.

# Set some defaults
MYSQLDIR=/usr/mysql

if test -e /etc/default/mysql; then
        . /etc/default/mysql
fi

#
# If special parameters were not set, set the defaults
#
if test -z "$MYSQLUSER"; then
  if test -e /tcb/files/auth/m/mysql; then
    MYSQLUSER=mysql
  else
    MYSQLUSER=nouser
  fi
fi

if test -z "$MYSQLDATA"; then
  MYSQLDATA="$MYSQLDIR/data"
fi

if test -z "$MYSQLLOG"; then
  MYSQLSTARTOPTS=""
else
  MYSQLSTARTOPTS="-l $MYSQLLOG"
fi

if test -n "$MYSQLOPTS"; then
  MYSQLSTARTOPTS="$MYSQLSTARTOPTS -o $MYSQLOPTS"
fi

# definitions
USAGE="Usage: %s [ start | stop | enable | disable | query | status | restart ]"
CAT="mysql.cat"

MYSQLPIDFILE="$MYSQLDATA/mysqld.pid"
SCRIPTDIR="/etc/init.d"
SCRIPT="mysql"
MYSQL_LABEL="mysql"
SCRIPTNUM="89"
TRUE=0
FALSE=1

#############################################################################
#
# get_server_pid
#
# returns the server PID, from the PID file, or 0 if no PID file found
#
#############################################################################
get_server_pid() {
  if test -r $MYSQLPIDFILE; then
    MYPID=`sed -n 1p $MYSQLPIDFILE`
    if test "$MYPID" -lt 0; then
      MYPID=`expr 0 - $MYPID`
    fi
    return $MYPID
  fi
  return 0
}

#############################################################################
#
# server_running
#
# check to see if the server is running - returns
#		$TRUE if the daemon is running
#		$FALSE otherwise
#
#############################################################################
server_running() {
  # get the server process PID, or zero if no PID file
  get_server_pid; kill_pid=$?
  if [ $kill_pid -ne 0 ]; then
    # try killing this process with signal zero
    if kill -0 $kill_pid 2>/dev/null; then
      # the process is running
      return $TRUE
    fi
  fi

  # either the PID file does not exist, or the kill failed; in both
  # cases this means that the server isn't running
  return $FALSE
}

#############################################################################
#
# mysql_start
#
# start the server daemon running
#
#############################################################################
mysql_start() {
  # see if the server is already running, and if it is then
  # just return without further action
  if server_running; then
    dspmsg $CAT 2 "%s is already running.\n" $MYSQL_LABEL
    return
  fi

  # it's not running, so remove any old, stale PID file that
  # might be lurking about
  rm -f $MYSQLPIDFILE >/dev/null 2>&1

  # start the server
  if test -d $datadir; then
    if test -x $bindir/mysqld_safe
    then
     # Give extra arguments to mysqld with the my.cnf file. This script may
     # be overwritten at next upgrade.
     dspmsg $CAT 3 "Starting %s ... " $MYSQL_LABEL
     $bindir/mysqld_safe --datadir=$datadir \
                         --pid-file=$pid_file >/dev/null 2>&1 &
     if test -w /var/lock/subsys
     then
        touch /var/lock/subsys/mysql
     fi
     dspmsg $CAT 4 "done.\n"
    else
     echo "Can't execute $bindir/mysqld_safe from dir $basedir"
    fi
  else
    echo "The database directory: $datadir"
    echo "  does not exist or has not been initialized."
    if test -z "$MKDEV_INVOKED"; then
      echo "Please run mkdev mysql."
    fi
  fi
}


#############################################################################
#
# mysql_stop
#
# stop the server daemon if it is running
#
#############################################################################
mysql_stop() {
    # see if the server is already running, and if it is not then
    # return without further action
    if server_running; then
      :
    else
      # the server isn't running
      dspmsg $CAT 7 "%s does not appear to be running.\n" $MYSQL_LABEL
      return
    fi

    if test -s "$pid_file"
    then
      mysqld_pid=`cat $pid_file`
      dspmsg $CAT 3 "Stopping %s ... " $MYSQL_LABEL
      kill $mysqld_pid
      # mysqld should remove the pid_file when it exits, so wait for it.

      sleep 1
      while [ -s $pid_file -a "$flags" != aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ]
      do
	[ -z "$flags" ] && echo $echo_n "Wait for mysqld to exit$echo_c" || echo $echo_n ".$echo_c"
        flags=a$flags
        sleep 1
      done
      if [ -s $pid_file ]
         then echo " gave up waiting!"
      elif [ -n "$flags" ]
      then
         dspmsg $CAT 4 "done.\n"
      fi
      if test -f /var/lock/subsys/mysql
      then
        rm -f /var/lock/subsys/mysql
      fi
    else
      echo "No mysqld pid file found. Looked for $pid_file."
    fi
}

#############################################################################
#
# mysql_enable
#
# add a link to this script into the /etc/rc2.d directory, then start
# the server
#
#############################################################################
mysql_enable() {
  # create the /etc/rc2.d startup file
  if [ -f /etc/rc2.d/P$SCRIPTNUM$SCRIPT ]; then
    # file already exists
    test -z "$ISL" && dspmsg $CAT 15 "%s is already enabled.\n" $MYSQL_LABEL
  else
    # link in the file
    test -z "$ISL" && dspmsg $CAT 16 "Enabling %s ... " $MYSQL_LABEL
    ln $SCRIPTDIR/$SCRIPT /etc/rc2.d/P$SCRIPTNUM$SCRIPT
    ln $SCRIPTDIR/$SCRIPT /etc/rc0.d/P$SCRIPTNUM$SCRIPT
    test -z "$ISL" && dspmsg $CAT 17 "done.\n"
  fi

  # start the server
  test -z "$ISL" && mysql_start
}


#############################################################################
#
# mysql_disable
#
# stop the server, then remove any links to this script in /etc/rc2.d
#
#############################################################################
mysql_disable() {
  # stop the server
  mysql_stop

  # remove the /etc/rc2.d startup file
  if [ -f /etc/rc2.d/P$SCRIPTNUM$SCRIPT ]; then
    # unlink the file
    test -z "$ISL" && dspmsg $CAT 18 "Disabling %s ... " $MYSQL_LABEL
    rm -f /etc/rc2.d/P$SCRIPTNUM$SCRIPT
    rm -f /etc/rc0.d/P$SCRIPTNUM$SCRIPT
    test -z "$ISL" && dspmsg $CAT 19 "done.\n"
  else
    # file does not exist
    test -z "$ISL" && dspmsg $CAT 20 "%s is already disabled.\n" $MYSQL_LABEL
  fi
}


#############################################################################
#
# mysql_query
#
# query the server to see if it is running
#
#############################################################################
mysql_query() {
  # test for the server process
  if server_running; then
    if test -z "$MKDEV_INVOKED"; then
      dspmsg $CAT 21 "%s is currently running.\n" $MYSQL_LABEL
    fi
    MKDEVRET="R"
  else
    if test -z "$MKDEV_INVOKED"; then
      dspmsg $CAT 22 "%s is not running.\n" $MYSQL_LABEL
    fi
    MKDEVRET="N"
  fi

  # test for the /etc/rc2.d startup on boot file
  if [ -f /etc/rc2.d/P$SCRIPTNUM$SCRIPT ]; then
    if test -z "$MKDEV_INVOKED"; then
      dspmsg $CAT 23 "%s is enabled.\n" $MYSQL_LABEL
    fi
    MKDEVRET="${MKDEVRET} E"
  else
    if test -z "$MKDEV_INVOKED"; then
      dspmsg $CAT 24 "%s is disabled.\n" $MYSQL_LABEL
    fi
    MKDEVRET="${MKDEVRET} D"
  fi
  if test -n "$MKDEV_INVOKED"; then
    echo "$MKDEVRET"
  fi
}

datadir=$MYSQLDATA
pid_file=$MYSQLPIDFILE
if test -z "$basedir"
then
  basedir=/
  bindir=/usr/bin
else
  bindir="$basedir/bin"
fi

PATH=/sbin:/usr/sbin:/bin:/usr/bin:$basedir/bin:/usr/gnu/bin
export PATH

mode=$1    # start or stop

case `echo "testing\c"`,`echo -n testing` in
    *c*,-n*) echo_n=   echo_c=     ;;
    *c*,*)   echo_n=-n echo_c=     ;;
    *)       echo_n=   echo_c='\c' ;;
esac

parse_arguments() {
  for arg do
    case "$arg" in
      --basedir=*)  basedir=`echo "$arg" | sed -e 's/^[^=]*=//'` ;;
      --datadir=*)  datadir=`echo "$arg" | sed -e 's/^[^=]*=//'` ;;
      --pid-file=*) pid_file=`echo "$arg" | sed -e 's/^[^=]*=//'` ;;
    esac
  done
}

# Get arguments from the my.cnf file,
# groups [mysqld] [mysql_server] and [mysql.server]
if test -x ./bin/my_print_defaults
then
  print_defaults="./bin/my_print_defaults"
elif test -x $bindir/my_print_defaults
then
  print_defaults="$bindir/my_print_defaults"
elif test -x $bindir/mysql_print_defaults
then
  print_defaults="$bindir/mysql_print_defaults"
else
  # Try to find basedir in /etc/my.cnf
  conf=/etc/my.cnf
  print_defaults=
  if test -r $conf
  then
    subpat='^[^=]*basedir[^=]*=\(.*\)$'
    dirs=`sed -e "/$subpat/!d" -e 's//\1/' $conf`
    for d in $dirs
    do
      d=`echo $d | sed -e 's/[ 	]//g'`
      if test -x "$d/bin/my_print_defaults"
      then
        print_defaults="$d/bin/my_print_defaults"
        break
      fi
      if test -x "$d/bin/mysql_print_defaults"
      then
        print_defaults="$d/bin/mysql_print_defaults"
        break
      fi
    done
  fi

  # Hope it's in the PATH ... but I doubt it
  test -z "$print_defaults" && print_defaults="my_print_defaults"
fi

#
# Test if someone changed datadir;  In this case we should also read the
# default arguments from this directory
#

extra_args=""
if test "$datadir" != "/var/lib/mysql"
then
  extra_args="-e $datadir/my.cnf"
fi

parse_arguments `$print_defaults $extra_args mysqld mysql_server mysql.server`

#
# Set pid file if not given
#
if test -z "$pid_file"
then
  pid_file=$datadir/`/bin/hostname`.pid
else
  case "$pid_file" in
    /* ) ;;
    * )  pid_file="$datadir/$pid_file" ;;
  esac
fi

# Safeguard (relative paths, core dumps..)
cd $basedir

case "$mode" in
  'start')
       # Start daemon
	mysql_start	;;

  'stop')
    # Stop daemon. We use a signal here to avoid having to know the
    # root password.
    STOP_ARGS="$*"
    mysql_stop	;;

  'restart')
    # Stop the service and regardless of whether it was
    # running or not, start it again.
    dspmsg $CAT 3 "Restarting %s ... " $MYSQL_LABEL
    $0 stop 2>&1 > /dev/null
    $0 start 2>&1 > /dev/null
    dspmsg $CAT 4 "done.\n"
	;;
enable)
	mysql_enable	;;
disable)
	mysql_disable	;;
query)
	mysql_query	;;
status)
	mysql_query	;;
  *)
    # usage
    dspmsg $CAT 1 "$USAGE\n" `basename $0`
    exit 1
    ;;
esac

# done
exit 0
