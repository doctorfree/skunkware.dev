@@@STARTPACK(SNNS;SNNS - Stuttgart Neural Network Simulator)

<P>
@@@UW2DIST(http://www.sco.com/skunkware/uw7/x11/misc/SNNS/)
@@@SOURCE(ftp://ftp.informatik.uni-tuebingen.de/pub/SNNS)
@@@HOMEPAGE(http://www-ra.informatik.uni-tuebingen.de/SNNS/)

<P>
SNNS (Stuttgart Neural Network Simulator) is a  software simulator for
neural networks  on Unix  workstations developed at the Institute  for
Parallel  and  Distributed  High  Performance  Systems (IPVR)  at  the
University of Stuttgart.  The goal of the SNNS project is to create an
efficient  and  flexible  simulation  environment for research  on and
application of neural nets.
<P>
The SNNS simulator consists of two main components:
<OL>
<LI> simultor kernel written in C
<LI> graphical user interface under X11R5 or X11R6
</OL>
The simulator kernel operates  on the internal network data structures
of the neural nets and performs all operations of learning and recall.
It can also be used without the other parts as a C program embedded in
custom  applications. It supports arbitrary  network  topologies  and,
like RCS, supports the concept of  sites. SNNS can  be extended by the
user with user defined activation  functions, output  functions,  site
functions and learning  procedures, which  are  written  as  simple  C
programs and linked to the simulator kernel.
<P>
Currently the following network architectures and learning procedures
are included:
<UL>
 <LI> Backpropagation (BP) for feedforward networks
<UL>
<LI>    vanilla (online) BP
<LI>    BP with momentum term and flat spot elimination
<LI>    batch BP
<LI>    BP with Chunkwise Updating
</UL>
 <LI> Counterpropagation
 <LI> Quickprop
 <LI> Backpercolation 1
 <LI> RProp
 <LI> RProp with Weight Decay
 <LI> Generalized radial basis functions (RBF)
 <LI> ART1
 <LI> ART2
 <LI> ARTMAP
 <LI> Cascade Correlation
 <LI> Dynamic LVQ
 <LI> Backpropagation through time (for recurrent networks)
 <LI> Quickprop through time (for recurrent networks)
 <LI> Self-organizing maps (Kohonen maps)
 <LI> TDNN (time-delay networks) with Backpropagation
 <LI> Jordan networks
 <LI> Elman networks and extended hierarchical Elman networks
 <LI> Associative Memory
 <LI> RBF_DDA
 <LI> Simulated Annealing
 <LI> Monte Carlo.
 <LI> Pruned-Cascade-Correlation
</UL>
A number of network pruning algorithms are available as well:
<UL>
 <LI> Optimal Brain Damage (OBD),
 <LI> Optimal Brain Surgeon (OBS),
 <LI> Skeletonization,
 <LI> Magnitute based pruning (Mag).
</UL>

The graphical  user interface XGUI (X Graphical User Interface), built
on top of the kernel, gives  a 2D and a 3D graphical representation of
the neural networks and controls the kernel during the simulation run.
In addition, the 2D user interface  has  an integrated  network editor
which  can be used to directly create, manipulate and visualize neural
nets in various ways.
<P>

@@@ENDPACK

